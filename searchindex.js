Search.setIndex({"docnames": ["api/hypercoil.data.bids", "api/hypercoil.data.bids.BIDSObjectFactory", "api/hypercoil.data.bids.LightBIDSLayout", "api/hypercoil.data.bids.LightBIDSObject", "api/hypercoil.data.bids.fMRIPrepDataset", "api/hypercoil.data.bids.fmriprep_references", "api/hypercoil.data.collate", "api/hypercoil.data.dataref", "api/hypercoil.data.dataref.DataQuery", "api/hypercoil.data.dataref.DataReference", "api/hypercoil.data.dataref.data_references", "api/hypercoil.data.dataset", "api/hypercoil.data.dataset.ReferencedDataLoader", "api/hypercoil.data.dataset.ReferencedDataset", "api/hypercoil.data.functional", "api/hypercoil.data.functional.dataframe", "api/hypercoil.data.functional.filesystem", "api/hypercoil.data.functional.general", "api/hypercoil.data.functional.metadata", "api/hypercoil.data.functional.missing", "api/hypercoil.data.functional.neuroimage", "api/hypercoil.data.functional.tensor", "api/hypercoil.data.functional.timeseries", "api/hypercoil.data.grabber.LightGrabber", "api/hypercoil.data.hcp", "api/hypercoil.data.hcp.hcp_references", "api/hypercoil.data.neuro.fMRIDataReference", "api/hypercoil.engine.accumulate", "api/hypercoil.engine.accumulate.AccumulatingFunction", "api/hypercoil.engine.accumulate.Accumulator", "api/hypercoil.functional.activation", "api/hypercoil.functional.activation.amplitude_atanh", "api/hypercoil.functional.activation.amplitude_tanh", "api/hypercoil.functional.activation.corrnorm", "api/hypercoil.functional.activation.isochor", "api/hypercoil.functional.cmass", "api/hypercoil.functional.cmass.cmass", "api/hypercoil.functional.cmass.cmass_coor", "api/hypercoil.functional.cmass.cmass_reference", "api/hypercoil.functional.cmass.diffuse", "api/hypercoil.functional.connectopy", "api/hypercoil.functional.connectopy.diffusion_mapping", "api/hypercoil.functional.connectopy.laplacian_eigenmaps", "api/hypercoil.functional.cov", "api/hypercoil.functional.cov.conditionalcorr", "api/hypercoil.functional.cov.conditionalcov", "api/hypercoil.functional.cov.corr", "api/hypercoil.functional.cov.cov", "api/hypercoil.functional.cov.pairedcorr", "api/hypercoil.functional.cov.pairedcov", "api/hypercoil.functional.cov.partialcorr", "api/hypercoil.functional.cov.partialcov", "api/hypercoil.functional.cov.precision", "api/hypercoil.functional.fourier", "api/hypercoil.functional.fourier.analytic_signal", "api/hypercoil.functional.fourier.env_inst", "api/hypercoil.functional.fourier.envelope", "api/hypercoil.functional.fourier.hilbert_transform", "api/hypercoil.functional.fourier.instantaneous_frequency", "api/hypercoil.functional.fourier.instantaneous_phase", "api/hypercoil.functional.fourier.product_filter", "api/hypercoil.functional.fourier.product_filtfilt", "api/hypercoil.functional.fourier.unwrap", "api/hypercoil.functional.graph", "api/hypercoil.functional.graph.coaffiliation", "api/hypercoil.functional.graph.girvan_newman_null", "api/hypercoil.functional.graph.graph_laplacian", "api/hypercoil.functional.graph.modularity_matrix", "api/hypercoil.functional.graph.relaxed_modularity", "api/hypercoil.functional.interpolate", "api/hypercoil.functional.interpolate.hybrid_interpolate", "api/hypercoil.functional.interpolate.spectral_interpolate", "api/hypercoil.functional.interpolate.weighted_interpolate", "api/hypercoil.functional.kernel", "api/hypercoil.functional.kernel.cosine_kernel", "api/hypercoil.functional.kernel.gaussian_kernel", "api/hypercoil.functional.kernel.linear_kernel", "api/hypercoil.functional.kernel.polynomial_kernel", "api/hypercoil.functional.kernel.rbf_kernel", "api/hypercoil.functional.kernel.sigmoid_kernel", "api/hypercoil.functional.matrix", "api/hypercoil.functional.matrix.delete_diagonal", "api/hypercoil.functional.matrix.expand_outer", "api/hypercoil.functional.matrix.fill_diagonal", "api/hypercoil.functional.matrix.invert_spd", "api/hypercoil.functional.matrix.recondition_eigenspaces", "api/hypercoil.functional.matrix.spd", "api/hypercoil.functional.matrix.squareform", "api/hypercoil.functional.matrix.sym2vec", "api/hypercoil.functional.matrix.symmetric", "api/hypercoil.functional.matrix.toeplitz", "api/hypercoil.functional.matrix.vec2sym", "api/hypercoil.functional.resid.residualise", "api/hypercoil.functional.semidefinite", "api/hypercoil.functional.semidefinite.cone_project_spd", "api/hypercoil.functional.semidefinite.mean_euc_spd", "api/hypercoil.functional.semidefinite.mean_geom_spd", "api/hypercoil.functional.semidefinite.mean_harm_spd", "api/hypercoil.functional.semidefinite.mean_logeuc_spd", "api/hypercoil.functional.semidefinite.tangent_project_spd", "api/hypercoil.functional.sphere", "api/hypercoil.functional.sphere.euclidean_conv", "api/hypercoil.functional.sphere.spatial_conv", "api/hypercoil.functional.sphere.sphere_to_latlong", "api/hypercoil.functional.sphere.sphere_to_normals", "api/hypercoil.functional.sphere.spherical_conv", "api/hypercoil.functional.sphere.spherical_geodesic", "api/hypercoil.functional.sylo", "api/hypercoil.functional.symmap", "api/hypercoil.functional.symmap.symexp", "api/hypercoil.functional.symmap.symlog", "api/hypercoil.functional.symmap.symmap", "api/hypercoil.functional.symmap.symsqrt", "api/hypercoil.functional.tsconv", "api/hypercoil.functional.tsconv.basischan", "api/hypercoil.functional.tsconv.basisconv2d", "api/hypercoil.functional.tsconv.polychan", "api/hypercoil.functional.tsconv.polyconv2d", "api/hypercoil.functional.tsconv.tsconv2d", "api/hypercoil.functional.utils", "api/hypercoil.functional.utils.apply_mask", "api/hypercoil.functional.utils.complex_decompose", "api/hypercoil.functional.utils.complex_recompose", "api/hypercoil.functional.utils.conform_mask", "api/hypercoil.functional.utils.orient_and_conform", "api/hypercoil.functional.utils.sparse_mm", "api/hypercoil.functional.utils.sparse_rcmul", "api/hypercoil.functional.utils.wmean", "api/hypercoil.init.atlas", "api/hypercoil.init.atlas.AtlasInit", "api/hypercoil.init.atlas.BaseAtlas", "api/hypercoil.init.atlas.CortexSubcortexCIfTIAtlas", "api/hypercoil.init.atlas.DirichletInitBaseAtlas", "api/hypercoil.init.atlas.DirichletInitSurfaceAtlas", "api/hypercoil.init.atlas.DirichletInitVolumetricAtlas", "api/hypercoil.init.atlas.DiscreteVolumetricAtlas", "api/hypercoil.init.atlas.MultiVolumetricAtlas", "api/hypercoil.init.atlas.MultifileVolumetricAtlas", "api/hypercoil.init.atlasmixins", "api/hypercoil.init.base", "api/hypercoil.init.base.ConstantInitialiser", "api/hypercoil.init.base.DistributionInitialiser", "api/hypercoil.init.base.DomainInitialiser", "api/hypercoil.init.base.constant_init_", "api/hypercoil.init.base.from_distr_init_", "api/hypercoil.init.base.identity_init_", "api/hypercoil.init.deltaplus", "api/hypercoil.init.dirichlet", "api/hypercoil.init.domain", "api/hypercoil.init.domain.AmplitudeAtanh", "api/hypercoil.init.domain.AmplitudeMultiLogit", "api/hypercoil.init.domain.Atanh", "api/hypercoil.init.domain.Logit", "api/hypercoil.init.domain.MultiLogit", "api/hypercoil.init.domain.UnitNormSphere", "api/hypercoil.init.domainbase", "api/hypercoil.init.domainbase.Affine", "api/hypercoil.init.domainbase.Clip", "api/hypercoil.init.domainbase.Identity", "api/hypercoil.init.domainbase.Linear", "api/hypercoil.init.domainbase.Normalise", "api/hypercoil.init.domainbase._Domain", "api/hypercoil.init.domainbase._PhaseAmplitudeDomain", "api/hypercoil.init.freqfilter", "api/hypercoil.init.freqfilter.FreqFilterSpec", "api/hypercoil.init.freqfilter.clamp_init_", "api/hypercoil.init.freqfilter.freqfilter_init_", "api/hypercoil.init.iirfilter", "api/hypercoil.init.laplace", "api/hypercoil.init.masklogic", "api/hypercoil.init.mpbl", "api/hypercoil.init.semidefinite", "api/hypercoil.init.semidefinite.SemidefiniteMean", "api/hypercoil.init.semidefinite.TangencyInit", "api/hypercoil.init.sylo", "api/hypercoil.init.toeplitz", "api/hypercoil.loss.base.LossApply", "api/hypercoil.loss.base.ReducingLoss", "api/hypercoil.loss.batchcorr.BatchCorrelation", "api/hypercoil.loss.batchcorr.QCFC", "api/hypercoil.loss.batchcorr.auto_tol", "api/hypercoil.loss.cmass.Compactness", "api/hypercoil.loss.cmass.HemisphericTether", "api/hypercoil.loss.connectopy", "api/hypercoil.loss.determinant", "api/hypercoil.loss.dispersion.VectorDispersion", "api/hypercoil.loss.entropy", "api/hypercoil.loss.equilibrium", "api/hypercoil.loss.hinge.HingeLoss", "api/hypercoil.loss.jsdiv", "api/hypercoil.loss.modularity.ModularityLoss", "api/hypercoil.loss.mvkurtosis.MultivariateKurtosis", "api/hypercoil.loss.norm.ConstraintViolation", "api/hypercoil.loss.norm.NormedLoss", "api/hypercoil.loss.norm.UnilateralNormedLoss", "api/hypercoil.loss.scheme.LossScheme", "api/hypercoil.loss.secondmoment", "api/hypercoil.loss.smoothness.SmoothnessPenalty", "api/hypercoil.loss.symbimodal", "api/hypercoil.neuro.synth", "api/hypercoil.neuro.synth.match_cov_and_spectrum", "api/hypercoil.neuro.synth.match_covariance", "api/hypercoil.neuro.synth.match_reference", "api/hypercoil.neuro.synth.match_spectra", "api/hypercoil.neuro.synth.synthesise_from_cov_and_spectrum", "api/hypercoil.neuro.synth.synthesise_matched", "api/hypercoil.nn.activation", "api/hypercoil.nn.activation.CorrelationNorm", "api/hypercoil.nn.atlas", "api/hypercoil.nn.atlas.AtlasAccumuline", "api/hypercoil.nn.atlas.AtlasLinear", "api/hypercoil.nn.cov", "api/hypercoil.nn.cov.BinaryCovariance", "api/hypercoil.nn.cov.BinaryCovarianceTW", "api/hypercoil.nn.cov.BinaryCovarianceUW", "api/hypercoil.nn.cov.UnaryCovariance", "api/hypercoil.nn.cov.UnaryCovarianceTW", "api/hypercoil.nn.cov.UnaryCovarianceUW", "api/hypercoil.nn.cov._Cov", "api/hypercoil.nn.freqfilter.FrequencyDomainFilter", "api/hypercoil.nn.iirfilter", "api/hypercoil.nn.interpolate", "api/hypercoil.nn.interpolate.HybridInterpolate", "api/hypercoil.nn.interpolate.SpectralInterpolate", "api/hypercoil.nn.interpolate.WeightedInterpolate", "api/hypercoil.nn.recombinator", "api/hypercoil.nn.recombinator.QueryEncoder", "api/hypercoil.nn.recombinator.Recombinator", "api/hypercoil.nn.resid.Residualise", "api/hypercoil.nn.select", "api/hypercoil.nn.select.EliminationSelector", "api/hypercoil.nn.select.LinearCombinationSelector", "api/hypercoil.nn.select.ResponseFunctionLinearSelector", "api/hypercoil.nn.semidefinite", "api/hypercoil.nn.semidefinite.BatchTangentProject", "api/hypercoil.nn.semidefinite.TangentProject", "api/hypercoil.nn.spdnoise.SPDNoise", "api/hypercoil.nn.svm.SVM", "api/hypercoil.nn.sylo", "api/hypercoil.nn.sylo.Sylo", "api/hypercoil.nn.sylo.SyloResNet", "api/hypercoil.nn.vertcom", "api/hypercoil.nn.vertcom.VerticalCompression", "api/hypercoil.nn.vertcom.vertical_compression", "api/hypercoil.nn.window.WindowAmplifier", "data", "diffprog", "engine", "eval", "functional", "index", "init", "installation", "loss", "modules", "neuro", "nn", "portal", "viz"], "filenames": ["api/hypercoil.data.bids.rst", "api/hypercoil.data.bids.BIDSObjectFactory.rst", "api/hypercoil.data.bids.LightBIDSLayout.rst", "api/hypercoil.data.bids.LightBIDSObject.rst", "api/hypercoil.data.bids.fMRIPrepDataset.rst", "api/hypercoil.data.bids.fmriprep_references.rst", "api/hypercoil.data.collate.rst", "api/hypercoil.data.dataref.rst", "api/hypercoil.data.dataref.DataQuery.rst", "api/hypercoil.data.dataref.DataReference.rst", "api/hypercoil.data.dataref.data_references.rst", "api/hypercoil.data.dataset.rst", "api/hypercoil.data.dataset.ReferencedDataLoader.rst", "api/hypercoil.data.dataset.ReferencedDataset.rst", "api/hypercoil.data.functional.rst", "api/hypercoil.data.functional.dataframe.rst", "api/hypercoil.data.functional.filesystem.rst", "api/hypercoil.data.functional.general.rst", "api/hypercoil.data.functional.metadata.rst", "api/hypercoil.data.functional.missing.rst", "api/hypercoil.data.functional.neuroimage.rst", "api/hypercoil.data.functional.tensor.rst", "api/hypercoil.data.functional.timeseries.rst", "api/hypercoil.data.grabber.LightGrabber.rst", "api/hypercoil.data.hcp.rst", "api/hypercoil.data.hcp.hcp_references.rst", "api/hypercoil.data.neuro.fMRIDataReference.rst", "api/hypercoil.engine.accumulate.rst", "api/hypercoil.engine.accumulate.AccumulatingFunction.rst", "api/hypercoil.engine.accumulate.Accumulator.rst", "api/hypercoil.functional.activation.rst", "api/hypercoil.functional.activation.amplitude_atanh.rst", "api/hypercoil.functional.activation.amplitude_tanh.rst", "api/hypercoil.functional.activation.corrnorm.rst", "api/hypercoil.functional.activation.isochor.rst", "api/hypercoil.functional.cmass.rst", "api/hypercoil.functional.cmass.cmass.rst", "api/hypercoil.functional.cmass.cmass_coor.rst", "api/hypercoil.functional.cmass.cmass_reference.rst", "api/hypercoil.functional.cmass.diffuse.rst", "api/hypercoil.functional.connectopy.rst", "api/hypercoil.functional.connectopy.diffusion_mapping.rst", "api/hypercoil.functional.connectopy.laplacian_eigenmaps.rst", "api/hypercoil.functional.cov.rst", "api/hypercoil.functional.cov.conditionalcorr.rst", "api/hypercoil.functional.cov.conditionalcov.rst", "api/hypercoil.functional.cov.corr.rst", "api/hypercoil.functional.cov.cov.rst", "api/hypercoil.functional.cov.pairedcorr.rst", "api/hypercoil.functional.cov.pairedcov.rst", "api/hypercoil.functional.cov.partialcorr.rst", "api/hypercoil.functional.cov.partialcov.rst", "api/hypercoil.functional.cov.precision.rst", "api/hypercoil.functional.fourier.rst", "api/hypercoil.functional.fourier.analytic_signal.rst", "api/hypercoil.functional.fourier.env_inst.rst", "api/hypercoil.functional.fourier.envelope.rst", "api/hypercoil.functional.fourier.hilbert_transform.rst", "api/hypercoil.functional.fourier.instantaneous_frequency.rst", "api/hypercoil.functional.fourier.instantaneous_phase.rst", "api/hypercoil.functional.fourier.product_filter.rst", "api/hypercoil.functional.fourier.product_filtfilt.rst", "api/hypercoil.functional.fourier.unwrap.rst", "api/hypercoil.functional.graph.rst", "api/hypercoil.functional.graph.coaffiliation.rst", "api/hypercoil.functional.graph.girvan_newman_null.rst", "api/hypercoil.functional.graph.graph_laplacian.rst", "api/hypercoil.functional.graph.modularity_matrix.rst", "api/hypercoil.functional.graph.relaxed_modularity.rst", "api/hypercoil.functional.interpolate.rst", "api/hypercoil.functional.interpolate.hybrid_interpolate.rst", "api/hypercoil.functional.interpolate.spectral_interpolate.rst", "api/hypercoil.functional.interpolate.weighted_interpolate.rst", "api/hypercoil.functional.kernel.rst", "api/hypercoil.functional.kernel.cosine_kernel.rst", "api/hypercoil.functional.kernel.gaussian_kernel.rst", "api/hypercoil.functional.kernel.linear_kernel.rst", "api/hypercoil.functional.kernel.polynomial_kernel.rst", "api/hypercoil.functional.kernel.rbf_kernel.rst", "api/hypercoil.functional.kernel.sigmoid_kernel.rst", "api/hypercoil.functional.matrix.rst", "api/hypercoil.functional.matrix.delete_diagonal.rst", "api/hypercoil.functional.matrix.expand_outer.rst", "api/hypercoil.functional.matrix.fill_diagonal.rst", "api/hypercoil.functional.matrix.invert_spd.rst", "api/hypercoil.functional.matrix.recondition_eigenspaces.rst", "api/hypercoil.functional.matrix.spd.rst", "api/hypercoil.functional.matrix.squareform.rst", "api/hypercoil.functional.matrix.sym2vec.rst", "api/hypercoil.functional.matrix.symmetric.rst", "api/hypercoil.functional.matrix.toeplitz.rst", "api/hypercoil.functional.matrix.vec2sym.rst", "api/hypercoil.functional.resid.residualise.rst", "api/hypercoil.functional.semidefinite.rst", "api/hypercoil.functional.semidefinite.cone_project_spd.rst", "api/hypercoil.functional.semidefinite.mean_euc_spd.rst", "api/hypercoil.functional.semidefinite.mean_geom_spd.rst", "api/hypercoil.functional.semidefinite.mean_harm_spd.rst", "api/hypercoil.functional.semidefinite.mean_logeuc_spd.rst", "api/hypercoil.functional.semidefinite.tangent_project_spd.rst", "api/hypercoil.functional.sphere.rst", "api/hypercoil.functional.sphere.euclidean_conv.rst", "api/hypercoil.functional.sphere.spatial_conv.rst", "api/hypercoil.functional.sphere.sphere_to_latlong.rst", "api/hypercoil.functional.sphere.sphere_to_normals.rst", "api/hypercoil.functional.sphere.spherical_conv.rst", "api/hypercoil.functional.sphere.spherical_geodesic.rst", "api/hypercoil.functional.sylo.rst", "api/hypercoil.functional.symmap.rst", "api/hypercoil.functional.symmap.symexp.rst", "api/hypercoil.functional.symmap.symlog.rst", "api/hypercoil.functional.symmap.symmap.rst", "api/hypercoil.functional.symmap.symsqrt.rst", "api/hypercoil.functional.tsconv.rst", "api/hypercoil.functional.tsconv.basischan.rst", "api/hypercoil.functional.tsconv.basisconv2d.rst", "api/hypercoil.functional.tsconv.polychan.rst", "api/hypercoil.functional.tsconv.polyconv2d.rst", "api/hypercoil.functional.tsconv.tsconv2d.rst", "api/hypercoil.functional.utils.rst", "api/hypercoil.functional.utils.apply_mask.rst", "api/hypercoil.functional.utils.complex_decompose.rst", "api/hypercoil.functional.utils.complex_recompose.rst", "api/hypercoil.functional.utils.conform_mask.rst", "api/hypercoil.functional.utils.orient_and_conform.rst", "api/hypercoil.functional.utils.sparse_mm.rst", "api/hypercoil.functional.utils.sparse_rcmul.rst", "api/hypercoil.functional.utils.wmean.rst", "api/hypercoil.init.atlas.rst", "api/hypercoil.init.atlas.AtlasInit.rst", "api/hypercoil.init.atlas.BaseAtlas.rst", "api/hypercoil.init.atlas.CortexSubcortexCIfTIAtlas.rst", "api/hypercoil.init.atlas.DirichletInitBaseAtlas.rst", "api/hypercoil.init.atlas.DirichletInitSurfaceAtlas.rst", "api/hypercoil.init.atlas.DirichletInitVolumetricAtlas.rst", "api/hypercoil.init.atlas.DiscreteVolumetricAtlas.rst", "api/hypercoil.init.atlas.MultiVolumetricAtlas.rst", "api/hypercoil.init.atlas.MultifileVolumetricAtlas.rst", "api/hypercoil.init.atlasmixins.rst", "api/hypercoil.init.base.rst", "api/hypercoil.init.base.ConstantInitialiser.rst", "api/hypercoil.init.base.DistributionInitialiser.rst", "api/hypercoil.init.base.DomainInitialiser.rst", "api/hypercoil.init.base.constant_init_.rst", "api/hypercoil.init.base.from_distr_init_.rst", "api/hypercoil.init.base.identity_init_.rst", "api/hypercoil.init.deltaplus.rst", "api/hypercoil.init.dirichlet.rst", "api/hypercoil.init.domain.rst", "api/hypercoil.init.domain.AmplitudeAtanh.rst", "api/hypercoil.init.domain.AmplitudeMultiLogit.rst", "api/hypercoil.init.domain.Atanh.rst", "api/hypercoil.init.domain.Logit.rst", "api/hypercoil.init.domain.MultiLogit.rst", "api/hypercoil.init.domain.UnitNormSphere.rst", "api/hypercoil.init.domainbase.rst", "api/hypercoil.init.domainbase.Affine.rst", "api/hypercoil.init.domainbase.Clip.rst", "api/hypercoil.init.domainbase.Identity.rst", "api/hypercoil.init.domainbase.Linear.rst", "api/hypercoil.init.domainbase.Normalise.rst", "api/hypercoil.init.domainbase._Domain.rst", "api/hypercoil.init.domainbase._PhaseAmplitudeDomain.rst", "api/hypercoil.init.freqfilter.rst", "api/hypercoil.init.freqfilter.FreqFilterSpec.rst", "api/hypercoil.init.freqfilter.clamp_init_.rst", "api/hypercoil.init.freqfilter.freqfilter_init_.rst", "api/hypercoil.init.iirfilter.rst", "api/hypercoil.init.laplace.rst", "api/hypercoil.init.masklogic.rst", "api/hypercoil.init.mpbl.rst", "api/hypercoil.init.semidefinite.rst", "api/hypercoil.init.semidefinite.SemidefiniteMean.rst", "api/hypercoil.init.semidefinite.TangencyInit.rst", "api/hypercoil.init.sylo.rst", "api/hypercoil.init.toeplitz.rst", "api/hypercoil.loss.base.LossApply.rst", "api/hypercoil.loss.base.ReducingLoss.rst", "api/hypercoil.loss.batchcorr.BatchCorrelation.rst", "api/hypercoil.loss.batchcorr.QCFC.rst", "api/hypercoil.loss.batchcorr.auto_tol.rst", "api/hypercoil.loss.cmass.Compactness.rst", "api/hypercoil.loss.cmass.HemisphericTether.rst", "api/hypercoil.loss.connectopy.rst", "api/hypercoil.loss.determinant.rst", "api/hypercoil.loss.dispersion.VectorDispersion.rst", "api/hypercoil.loss.entropy.rst", "api/hypercoil.loss.equilibrium.rst", "api/hypercoil.loss.hinge.HingeLoss.rst", "api/hypercoil.loss.jsdiv.rst", "api/hypercoil.loss.modularity.ModularityLoss.rst", "api/hypercoil.loss.mvkurtosis.MultivariateKurtosis.rst", "api/hypercoil.loss.norm.ConstraintViolation.rst", "api/hypercoil.loss.norm.NormedLoss.rst", "api/hypercoil.loss.norm.UnilateralNormedLoss.rst", "api/hypercoil.loss.scheme.LossScheme.rst", "api/hypercoil.loss.secondmoment.rst", "api/hypercoil.loss.smoothness.SmoothnessPenalty.rst", "api/hypercoil.loss.symbimodal.rst", "api/hypercoil.neuro.synth.rst", "api/hypercoil.neuro.synth.match_cov_and_spectrum.rst", "api/hypercoil.neuro.synth.match_covariance.rst", "api/hypercoil.neuro.synth.match_reference.rst", "api/hypercoil.neuro.synth.match_spectra.rst", "api/hypercoil.neuro.synth.synthesise_from_cov_and_spectrum.rst", "api/hypercoil.neuro.synth.synthesise_matched.rst", "api/hypercoil.nn.activation.rst", "api/hypercoil.nn.activation.CorrelationNorm.rst", "api/hypercoil.nn.atlas.rst", "api/hypercoil.nn.atlas.AtlasAccumuline.rst", "api/hypercoil.nn.atlas.AtlasLinear.rst", "api/hypercoil.nn.cov.rst", "api/hypercoil.nn.cov.BinaryCovariance.rst", "api/hypercoil.nn.cov.BinaryCovarianceTW.rst", "api/hypercoil.nn.cov.BinaryCovarianceUW.rst", "api/hypercoil.nn.cov.UnaryCovariance.rst", "api/hypercoil.nn.cov.UnaryCovarianceTW.rst", "api/hypercoil.nn.cov.UnaryCovarianceUW.rst", "api/hypercoil.nn.cov._Cov.rst", "api/hypercoil.nn.freqfilter.FrequencyDomainFilter.rst", "api/hypercoil.nn.iirfilter.rst", "api/hypercoil.nn.interpolate.rst", "api/hypercoil.nn.interpolate.HybridInterpolate.rst", "api/hypercoil.nn.interpolate.SpectralInterpolate.rst", "api/hypercoil.nn.interpolate.WeightedInterpolate.rst", "api/hypercoil.nn.recombinator.rst", "api/hypercoil.nn.recombinator.QueryEncoder.rst", "api/hypercoil.nn.recombinator.Recombinator.rst", "api/hypercoil.nn.resid.Residualise.rst", "api/hypercoil.nn.select.rst", "api/hypercoil.nn.select.EliminationSelector.rst", "api/hypercoil.nn.select.LinearCombinationSelector.rst", "api/hypercoil.nn.select.ResponseFunctionLinearSelector.rst", "api/hypercoil.nn.semidefinite.rst", "api/hypercoil.nn.semidefinite.BatchTangentProject.rst", "api/hypercoil.nn.semidefinite.TangentProject.rst", "api/hypercoil.nn.spdnoise.SPDNoise.rst", "api/hypercoil.nn.svm.SVM.rst", "api/hypercoil.nn.sylo.rst", "api/hypercoil.nn.sylo.Sylo.rst", "api/hypercoil.nn.sylo.SyloResNet.rst", "api/hypercoil.nn.vertcom.rst", "api/hypercoil.nn.vertcom.VerticalCompression.rst", "api/hypercoil.nn.vertcom.vertical_compression.rst", "api/hypercoil.nn.window.WindowAmplifier.rst", "data.rst", "diffprog.rst", "engine.rst", "eval.rst", "functional.rst", "index.rst", "init.rst", "installation.rst", "loss.rst", "modules.rst", "neuro.rst", "nn.rst", "portal.rst", "viz.rst"], "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">bids</span></code>: BIDS interfaces", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BIDSObjectFactory</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">LightBIDSLayout</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">LightBIDSObject</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">fMRIPrepDataset</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">fmriprep_references</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">collate</span></code>: Batch collation functionality", "<code class=\"docutils literal notranslate\"><span class=\"pre\">dataref</span></code>: Data references", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DataQuery</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DataReference</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">data_references</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">dataset</span></code>: Referenced datasets", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ReferencedDataLoader</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ReferencedDataset</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">functional</span></code>: Data transform functions", "Data frames", "I/O and filesystem", "General use", "Metadata", "Missing values", "Neuroimaging datasets", "Tensor casting and binding", "Time series", "<code class=\"docutils literal notranslate\"><span class=\"pre\">LightGrabber</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hcp</span></code>: HCP interfaces", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hcp_references</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">fMRIDataReference</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">accumulate</span></code>: Local gradient accumulation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">AccumulatingFunction</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Accumulator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">activation</span></code>: Activation functions", "<code class=\"docutils literal notranslate\"><span class=\"pre\">amplitude_atanh</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">amplitude_tanh</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">corrnorm</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">isochor</span></code>: PSD normalisation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cmass</span></code>: Centre of mass", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cmass</span></code>: Centre of mass, array coordinates", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cmass_coor</span></code>: Centre of mass, any coordinates", "Displacement from a reference centre of mass", "<code class=\"docutils literal notranslate\"><span class=\"pre\">diffuse</span></code>: Diffuseness around centre of mass", "<code class=\"docutils literal notranslate\"><span class=\"pre\">connectopy</span></code>: Connectopic manifolds", "<code class=\"docutils literal notranslate\"><span class=\"pre\">diffusion_mapping</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">laplacian_eigenmaps</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cov</span></code>: Covariances and correlations", "<code class=\"docutils literal notranslate\"><span class=\"pre\">conditionalcorr</span></code>: Conditional correlation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">conditionalcov</span></code>: Conditional covariance", "<code class=\"docutils literal notranslate\"><span class=\"pre\">corr</span></code>: Pearson correlation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cov</span></code>: Covariance", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pairedcorr</span></code>: Paired correlation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pairedcov</span></code>: Paired covariance", "<code class=\"docutils literal notranslate\"><span class=\"pre\">partialcorr</span></code>: Partial correlation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">partialcov</span></code>: Partial covariance", "<code class=\"docutils literal notranslate\"><span class=\"pre\">precision</span></code>: Inverse covariance (precision)", "<code class=\"docutils literal notranslate\"><span class=\"pre\">fourier</span></code>: Frequency-domain filter", "<code class=\"docutils literal notranslate\"><span class=\"pre\">analytic_signal</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">env_inst</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">envelope</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hilbert_transform</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">instantaneous_frequency</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">instantaneous_phase</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">product_filter</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">product_filtfilt</span></code>: Zero-phase filter", "<code class=\"docutils literal notranslate\"><span class=\"pre\">unwrap</span></code>: Unwrap phase", "<code class=\"docutils literal notranslate\"><span class=\"pre\">graph</span></code>: Graphs and networks", "<code class=\"docutils literal notranslate\"><span class=\"pre\">coaffiliation</span></code>: Community coaffiliation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">girvan_newman_null</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">graph_laplacian</span></code>: Graph Laplacian", "<code class=\"docutils literal notranslate\"><span class=\"pre\">modularity_matrix</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">relaxed_modularity</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">interpolate</span></code>: Interpolation and imputation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">hybrid_interpolate</span></code>: Weighted + spectral interpolation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">spectral_interpolate</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">weighted_interpolate</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">kernel</span></code>: Parameterised kernels", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cosine_kernel</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">gaussian_kernel</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">linear_kernel</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">polynomial_kernel</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rbf_kernel</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sigmoid_kernel</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">matrix</span></code>: Matrix operations", "<code class=\"docutils literal notranslate\"><span class=\"pre\">delete_diagonal</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">expand_outer</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">fill_diagonal</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">invert_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">recondition_eigenspaces</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">squareform</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sym2vec</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">symmetric</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">toeplitz</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">vec2sym</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">residualise</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">semidefinite</span></code>: Positive semidefinite cone", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cone_project_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">mean_euc_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">mean_geom_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">mean_harm_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">mean_logeuc_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tangent_project_spd</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sphere</span></code>: Spherical coordinates", "<code class=\"docutils literal notranslate\"><span class=\"pre\">euclidean_conv</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">spatial_conv</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sphere_to_latlong</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sphere_to_normals</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">spherical_conv</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">spherical_geodesic</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sylo</span></code>: Sylo function", "<code class=\"docutils literal notranslate\"><span class=\"pre\">symmap</span></code>: Symmetric matrix maps", "<code class=\"docutils literal notranslate\"><span class=\"pre\">symexp</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">symlog</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">symmap</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">symsqrt</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tsconv</span></code>: Time series convolution", "<code class=\"docutils literal notranslate\"><span class=\"pre\">basischan</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">basisconv2d</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">polychan</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">polyconv2d</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tsconv2d</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code>: Miscellaneous", "<code class=\"docutils literal notranslate\"><span class=\"pre\">apply_mask</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">complex_decompose</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">complex_recompose</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">conform_mask</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">orient_and_conform</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sparse_mm</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sparse_rcmul</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">wmean</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">atlas</span></code>: Atlas initialisation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">AtlasInit</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BaseAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">CortexSubcortexCIfTIAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DirichletInitBaseAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DirichletInitSurfaceAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DirichletInitVolumetricAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DiscreteVolumetricAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">MultiVolumetricAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">MultifileVolumetricAtlas</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">atlasmixins</span></code>: Atlas mixins", "<code class=\"docutils literal notranslate\"><span class=\"pre\">base</span></code>: Base initialisations", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantInitialiser</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DistributionInitialiser</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">DomainInitialiser</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">constant_init_</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">from_distr_init_</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">identity_init_</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">deltaplus</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">dirichlet</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code>: Domain mappers", "<code class=\"docutils literal notranslate\"><span class=\"pre\">AmplitudeAtanh</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">AmplitudeMultiLogit</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Atanh</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Logit</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">MultiLogit</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">UnitNormSphere</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">domainbase</span></code>: Domain mapper base classes", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Affine</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Clip</span></code>: OOD handler", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Identity</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Linear</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Normalise</span></code>: OOD handler", "<code class=\"docutils literal notranslate\"><span class=\"pre\">_Domain</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PhaseAmplitudeDomain</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">freqfilter</span></code>: Frequency band init", "<code class=\"docutils literal notranslate\"><span class=\"pre\">FreqFilterSpec</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clamp_init_</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">freqfilter_init_</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">iirfilter</span></code>: IIR filter init", "<code class=\"docutils literal notranslate\"><span class=\"pre\">laplace</span></code>", "Mask logic", "<code class=\"docutils literal notranslate\"><span class=\"pre\">mpbl</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">semidefinite</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SemidefiniteMean</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">TangencyInit</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sylo</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">toeplitz</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">LossApply</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ReducingLoss</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BatchCorrelation</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">QCFC</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">auto_tol</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Compactness</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">HemisphericTether</span></code>", "Connectopy loss functional", "<code class=\"docutils literal notranslate\"><span class=\"pre\">determinant</span></code>: Log determinant-based losses", "<code class=\"docutils literal notranslate\"><span class=\"pre\">VectorDispersion</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Entropy</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SoftmaxEntropy</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Equilibrium</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SoftmaxEquilibrium</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">HingeLoss</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">JSDivergence</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SoftmaxJSDivergence</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ModularityLoss</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">MultivariateKurtosis</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ConstraintViolation</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">NormedLoss</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">UnilateralNormedLoss</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">LossScheme</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">secondmoment</span></code>: Second moment-based losses", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SmoothnessPenalty</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricBimodal</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">synth</span></code>: Data synthesis", "<code class=\"docutils literal notranslate\"><span class=\"pre\">match_cov_and_spectrum</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">match_covariance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">match_reference</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">match_spectra</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">synthesise_from_cov_and_spectrum</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">synthesise_matched</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">activation</span></code>: Activation functions as modules", "<code class=\"docutils literal notranslate\"><span class=\"pre\">CorrelationNorm</span></code>: Correlation normalisation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">atlas</span></code>: Atlas layers", "<code class=\"docutils literal notranslate\"><span class=\"pre\">AtlasAccumuline</span></code>: Linear atlas accumulator", "<code class=\"docutils literal notranslate\"><span class=\"pre\">AtlasLinear</span></code>: Linear atlas layer", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cov</span></code>: Covariance modules", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BinaryCovariance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BinaryCovarianceTW</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BinaryCovarianceUW</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">UnaryCovariance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">UnaryCovarianceTW</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">UnaryCovarianceUW</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">_Cov</span></code>: Covariance base class", "<code class=\"docutils literal notranslate\"><span class=\"pre\">freqfilter</span></code>: Frequency-domain filter layer", "<code class=\"docutils literal notranslate\"><span class=\"pre\">iirfilter</span></code>: IIR filter layer", "<code class=\"docutils literal notranslate\"><span class=\"pre\">interpolate</span></code>: Interpolation layers", "<code class=\"docutils literal notranslate\"><span class=\"pre\">HybridInterpolate</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SpectralInterpolate</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">WeightedInterpolate</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">recombinator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">QueryEncoder</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Recombinator</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Residualise</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code>: Model Selection", "<code class=\"docutils literal notranslate\"><span class=\"pre\">EliminationSelector</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">LinearCombinationSelector</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ResponseFunctionLinearSelector</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">semidefinite</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">BatchTangentProject</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">TangentProject</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SPDNoise</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SVM</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">sylo</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">Sylo</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SyloResNet</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">vertcom</span></code>: Vertex compression", "<code class=\"docutils literal notranslate\"><span class=\"pre\">VerticalCompression</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">vertical_compression</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">WindowAmplifier</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>: Data engineering", "Framework", "<code class=\"docutils literal notranslate\"><span class=\"pre\">engine</span></code>: Differentiable engine", "<code class=\"docutils literal notranslate\"><span class=\"pre\">eval</span></code>: Benchmarks and evaluation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">functional</span></code>: Functions and functionals", "Differentiable programming for brain mapping", "<code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code>: Initialisation schemes", "Installation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">loss</span></code>: Loss and regularisation", "API reference", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuro</span></code>: Neuroscience data utilities", "<code class=\"docutils literal notranslate\"><span class=\"pre\">nn</span></code>: Neural network modules", "Poster landing page", "<code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code>: Visualisation"], "terms": {"load": [0, 11, 15, 16, 18, 20, 24, 27, 102, 128, 130, 131, 133, 135, 136, 137, 138, 169, 196], "conform": [0, 8, 21, 49, 87, 90, 114, 123, 124, 175, 190, 219], "neuroimag": [0, 4, 5, 6, 7, 14, 16, 24, 25, 26, 128, 210, 245, 251, 255], "data": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 45, 47, 49, 60, 61, 70, 71, 72, 90, 92, 101, 102, 105, 107, 113, 114, 115, 116, 117, 118, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 146, 147, 160, 168, 169, 175, 178, 198, 204, 205, 212, 213, 214, 215, 216, 217, 218, 219, 233, 234, 235, 250, 254], "The": [0, 9, 11, 15, 17, 24, 26, 27, 28, 29, 31, 32, 34, 36, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 54, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 75, 78, 82, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 102, 105, 107, 115, 117, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 146, 147, 149, 150, 151, 152, 153, 160, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 198, 201, 204, 205, 212, 213, 214, 215, 216, 217, 219, 227, 230, 234, 236, 237, 239, 245, 250, 251, 253], "refer": [0, 4, 5, 9, 10, 11, 12, 13, 24, 25, 26, 35, 94, 99, 107, 124, 128, 130, 131, 133, 134, 135, 136, 137, 138, 199, 201, 202, 203, 204, 205, 234, 235, 239, 245, 249, 250], "retriev": [0, 24, 28, 245], "util": [0, 6, 24, 120, 121, 122, 123, 124, 125, 126, 127, 249, 250, 254], "i": [0, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 160, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 230, 231, 234, 235, 236, 237, 239, 240, 242, 243, 245, 250, 251, 252, 253, 257], "written": 0, "assumpt": [0, 185, 201], "input": [0, 5, 6, 9, 10, 15, 16, 17, 19, 21, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 42, 45, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 121, 122, 124, 125, 126, 127, 128, 138, 146, 147, 150, 153, 157, 158, 160, 165, 166, 168, 170, 172, 173, 175, 176, 181, 184, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 231, 234, 235, 236, 237, 239, 243, 251, 253], "path": [0, 2, 4, 5, 8, 10, 15, 16, 17, 18, 20, 25, 130, 131, 133, 135, 136, 137, 138, 245, 251], "deriv": [0, 28, 29, 43, 54, 218, 235, 237, 239], "dataset": [0, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 23, 25, 26, 27, 70, 72, 102, 114, 115, 116, 117, 160, 173, 196, 204, 219, 235, 237, 239, 245, 254], "creat": [0, 4, 5, 6, 10, 17, 19, 21, 24, 25, 26, 28, 70, 72, 90, 107, 114, 116, 130, 131, 132, 133, 134, 135, 136, 137, 138, 164, 169, 175, 204, 205, 245], "fmriprep": [0, 4, 5, 24], "recommend": [0, 5, 17, 24, 25, 109, 186, 245, 252], "us": [0, 5, 6, 8, 9, 10, 11, 13, 14, 15, 19, 20, 24, 25, 26, 28, 29, 33, 34, 36, 39, 41, 42, 47, 54, 60, 61, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 86, 90, 92, 94, 96, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 160, 161, 162, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 198, 201, 210, 212, 213, 214, 215, 216, 217, 219, 220, 228, 230, 234, 235, 237, 239, 245, 250, 251, 252, 253], "first": [0, 6, 16, 24, 27, 28, 29, 34, 45, 61, 62, 71, 72, 74, 75, 76, 77, 78, 79, 86, 90, 91, 107, 115, 117, 125, 149, 150, 151, 152, 153, 154, 160, 161, 162, 164, 165, 167, 170, 174, 175, 183, 184, 186, 201, 230, 239, 245, 257], "through": [0, 24, 27, 28, 33, 34, 68, 85, 111, 130, 142, 147, 182, 184, 190, 210, 230, 234, 235, 237, 251, 253], "fmriprep_refer": [0, 10, 245], "function": [0, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 138, 142, 146, 147, 148, 149, 150, 151, 152, 153, 155, 161, 162, 163, 164, 165, 166, 168, 170, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 209, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 237, 239, 240, 245, 250, 251, 253, 254, 256, 257], "call": [0, 4, 6, 9, 19, 21, 24, 26, 28, 29, 126, 129, 138, 142, 164, 169, 195, 237, 240, 245, 253], "pass": [0, 4, 9, 13, 24, 26, 27, 28, 29, 34, 60, 61, 67, 68, 82, 93, 107, 115, 117, 138, 142, 154, 164, 167, 177, 181, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 201, 203, 227, 230, 237, 239, 245, 253], "make_wd": [0, 24, 245], "A": [0, 4, 5, 8, 9, 13, 24, 25, 26, 33, 39, 41, 65, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 94, 96, 99, 110, 111, 112, 114, 116, 119, 125, 126, 142, 164, 165, 166, 172, 181, 183, 184, 186, 187, 190, 196, 210, 212, 213, 214, 215, 216, 217, 219, 225, 234, 235, 237, 239, 242], "fmriprepdataset": [0, 245], "class": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 23, 26, 28, 29, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 230, 231, 232, 236, 237, 239, 240, 244, 251, 254, 256], "also": [0, 6, 9, 20, 26, 28, 29, 33, 52, 75, 78, 82, 107, 130, 138, 185, 190, 196, 227, 236, 237, 239, 240, 251, 253, 257], "exist": [0, 8, 27, 119, 128, 129, 134, 138, 190, 251], "port": [0, 250], "webdataset": [0, 5, 6, 11, 25, 245], "yield": [0, 65, 164, 166, 210, 219], "far": [0, 28, 29], "superior": 0, "perform": [0, 28, 29, 43, 47, 49, 61, 102, 115, 117, 125, 138, 154, 195, 212, 213, 214, 215, 216, 217, 221, 237], "gener": [0, 4, 5, 10, 14, 24, 25, 27, 45, 47, 49, 74, 75, 76, 77, 78, 79, 82, 107, 109, 128, 132, 160, 198, 210, 213, 216, 237, 239, 245, 251], "ciftifi": 0, "compat": [0, 28, 33, 146, 147, 168, 175, 198, 245, 251], "like": [0, 2, 11, 13, 24, 25, 27, 43, 105, 107, 128, 138, 154, 174, 184, 186, 237, 239, 245, 257], "absent": 0, "thi": [0, 4, 5, 6, 8, 9, 10, 14, 17, 19, 20, 21, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 47, 49, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 82, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 145, 147, 150, 153, 154, 160, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 230, 234, 235, 236, 237, 239, 240, 242, 243, 245, 250, 251, 253, 257], "should": [0, 4, 5, 6, 8, 9, 10, 20, 25, 26, 28, 29, 41, 42, 47, 55, 60, 61, 62, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 85, 88, 89, 90, 91, 94, 99, 107, 111, 114, 115, 116, 117, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 157, 160, 164, 165, 167, 168, 170, 175, 180, 181, 183, 184, 186, 187, 190, 195, 198, 210, 212, 213, 214, 215, 216, 217, 219, 227, 236, 237, 239, 240, 243], "develop": [0, 14, 250], "prioriti": 0, "given": [0, 15, 28, 44, 46, 48, 64, 66, 67, 68, 71, 94, 99, 114, 147, 154, 178, 181, 183, 196, 200, 201, 210, 234, 235], "great": [0, 27, 102, 106], "deal": 0, "ha": [0, 12, 13, 28, 36, 49, 61, 85, 90, 96, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 149, 150, 151, 152, 153, 154, 172, 175, 183, 184, 186, 187, 191, 210, 252], "oper": [0, 19, 20, 27, 28, 29, 33, 35, 41, 42, 61, 62, 71, 84, 85, 92, 93, 96, 100, 107, 111, 126, 138, 164, 165, 169, 172, 174, 176, 177, 183, 184, 187, 190, 192, 193, 194, 196, 203, 228, 234, 235, 238, 249, 254], "under": [0, 27, 29, 64, 68, 138, 142, 149, 150, 151, 152, 153, 154, 156, 159, 161, 162, 183, 190, 212, 213, 215, 216], "cifti": [0, 20, 128, 131, 133, 138], "current": [0, 4, 5, 8, 9, 10, 24, 25, 26, 27, 28, 29, 42, 62, 70, 72, 84, 93, 102, 115, 117, 128, 138, 145, 147, 164, 170, 174, 182, 185, 193, 213, 216, 220, 234, 237, 245, 250, 252], "we": [0, 6, 20, 27, 28, 29, 45, 92, 106, 128, 142, 150, 153, 174, 187, 190, 196, 228, 230, 237, 245, 257], "acquir": 0, "an": [0, 6, 9, 15, 17, 18, 23, 26, 27, 28, 29, 37, 39, 45, 47, 49, 57, 62, 66, 67, 70, 74, 75, 76, 77, 78, 79, 82, 86, 94, 96, 99, 102, 105, 107, 111, 120, 124, 125, 128, 129, 130, 131, 132, 133, 134, 138, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 170, 172, 174, 175, 177, 181, 182, 183, 184, 186, 190, 196, 200, 201, 203, 210, 212, 213, 214, 215, 216, 217, 219, 220, 230, 234, 235, 239, 240, 242, 245, 251, 257], "intern": [0, 13, 28, 29, 142, 184, 196, 212, 213, 215, 216, 218, 230, 251], "lightgrabb": 0, "d": [0, 37, 39, 66, 84, 94, 95, 96, 97, 98, 99, 102, 105, 109, 110, 111, 112, 128, 181, 183, 185, 191, 200, 201, 202, 203, 204, 205, 210, 219, 237, 257], "eventu": [0, 8, 128, 250, 251], "actual": [0, 129, 142, 143, 164, 196, 218, 245], "bidslayout": 0, "from": [0, 2, 4, 5, 6, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 25, 26, 28, 29, 33, 35, 36, 41, 45, 70, 71, 81, 82, 83, 86, 88, 90, 91, 92, 93, 94, 99, 103, 104, 106, 107, 110, 111, 112, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 144, 146, 147, 164, 165, 166, 168, 170, 173, 174, 177, 178, 180, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 198, 201, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217, 219, 230, 234, 235, 236, 239, 249, 250, 252, 253, 257], "pybid": [0, 245], "robust": [0, 128, 210, 234], "lightbidslayout": [0, 245], "bidsobjectfactori": [0, 245], "lightbidsobject": [0, 1, 245], "hypercoil": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 249, 250, 252], "bid": [1, 2, 3, 4, 5, 10, 245, 254], "sourc": [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244], "factori": [1, 8, 9, 26], "produc": [1, 8, 9, 10, 15, 21, 26, 41, 82, 142, 192, 193, 194, 212, 213, 214, 215, 216, 217, 231, 236], "thin": [1, 3, 179, 231], "wrapper": [1, 3, 176, 177, 179, 186, 231, 253], "around": [1, 3, 35, 179, 181, 231, 249], "variablefactori": [1, 9, 26], "consult": [1, 3, 44, 45, 46, 48, 49, 50, 51, 52, 164, 167, 218, 219], "further": [1, 3, 9, 27, 28, 66, 92, 146, 147, 168, 175, 219, 257], "document": [1, 3, 4, 8, 9, 12, 13, 23, 28, 29, 44, 45, 46, 48, 49, 50, 51, 52, 92, 115, 117, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 147, 164, 167, 168, 175, 181, 182, 184, 185, 186, 187, 189, 190, 196, 198, 218, 219, 250, 257], "root": [2, 23, 33, 74, 94, 99, 108, 112, 174, 183, 236], "queri": [2, 8, 9, 10, 26, 226], "lightweight": 2, "minim": [2, 150, 153, 250], "datagrabb": 2, "inspir": [2, 71, 245], "paramet": [2, 4, 5, 8, 9, 10, 13, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 202, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 231, 234, 235, 236, 237, 239, 240, 243, 251], "str": [2, 4, 5, 8, 10, 16, 18, 21, 23, 25, 33, 92, 130, 131, 133, 134, 135, 136, 137, 154, 177, 178, 181, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198], "directori": [2, 4, 5, 8, 9, 10, 23, 25, 26], "file": [2, 4, 5, 10, 16, 18, 20, 23, 24, 25, 128, 131, 133, 135, 136, 137, 138, 245], "system": [2, 16, 100, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 181], "pattern": [2, 4, 8, 23, 218, 245], "list": [2, 4, 5, 8, 9, 10, 13, 17, 19, 21, 23, 25, 26, 29, 41, 42, 66, 102, 114, 164, 165, 166, 168, 173, 219, 234, 235, 237], "string": [2, 4, 5, 17, 19, 177, 178, 181, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198], "constrain": [2, 5, 25, 34, 142, 146, 147, 149, 151, 152, 154, 161, 162, 164, 166, 168, 170, 175, 186, 187, 190, 210, 212, 213, 215, 216, 219, 239, 251], "scope": 2, "layout": [2, 8, 9, 10, 23, 26, 245], "If": [2, 8, 9, 12, 13, 17, 19, 20, 21, 26, 28, 33, 34, 36, 37, 39, 41, 42, 47, 56, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 84, 86, 87, 90, 92, 94, 96, 99, 102, 105, 106, 107, 110, 112, 115, 117, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 145, 146, 147, 154, 160, 164, 167, 168, 169, 170, 172, 174, 175, 178, 181, 183, 190, 192, 193, 194, 201, 203, 210, 212, 213, 214, 215, 216, 217, 219, 220, 227, 230, 234, 235, 237, 239, 243, 251, 257], "ar": [2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 26, 27, 28, 29, 32, 34, 36, 37, 39, 52, 54, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 86, 90, 92, 94, 96, 99, 102, 105, 106, 107, 110, 111, 112, 114, 115, 116, 117, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 168, 170, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 187, 190, 194, 196, 202, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217, 219, 228, 230, 234, 235, 237, 239, 243, 245, 249, 250, 251, 257], "provid": [2, 8, 9, 15, 17, 26, 28, 33, 34, 36, 41, 42, 60, 61, 66, 68, 71, 74, 75, 76, 77, 78, 79, 82, 102, 106, 107, 124, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 164, 165, 166, 167, 170, 183, 190, 201, 203, 212, 213, 214, 215, 216, 218, 219, 237, 251, 253], "includ": [2, 4, 5, 6, 9, 10, 13, 23, 25, 26, 49, 70, 72, 88, 91, 102, 105, 114, 115, 116, 117, 125, 128, 130, 138, 149, 150, 151, 152, 153, 166, 177, 184, 187, 210, 212, 213, 214, 215, 216, 217, 245, 250], "ani": [2, 4, 5, 9, 10, 15, 16, 19, 20, 21, 23, 25, 26, 28, 29, 33, 34, 35, 36, 39, 41, 42, 45, 47, 49, 60, 61, 64, 65, 66, 67, 68, 70, 74, 75, 76, 77, 78, 79, 82, 84, 90, 92, 94, 95, 96, 97, 98, 99, 102, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 125, 126, 146, 147, 149, 150, 151, 152, 153, 154, 160, 161, 162, 164, 168, 169, 170, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 210, 212, 213, 214, 215, 216, 217, 219, 230, 231, 234, 235, 236, 249, 251], "do": [2, 20, 28, 111, 123, 128, 142, 164, 174, 210, 213, 216, 237], "match": [2, 8, 10, 21, 23, 164, 168, 199, 200, 201, 202, 203, 204, 205, 245], "least": [2, 86, 92, 170, 183, 210, 228], "one": [2, 6, 13, 17, 27, 28, 29, 45, 85, 125, 128, 164, 167, 170, 173, 178, 182, 183, 185, 187, 190, 195, 212, 213, 214, 230, 235, 237], "dataqueri": [2, 7, 10, 245], "object": [2, 5, 6, 8, 9, 10, 11, 13, 17, 21, 23, 25, 26, 28, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 164, 165, 166, 168, 169, 170, 173, 175, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 210, 212, 213, 214, 215, 216, 217, 219, 234, 235, 245, 253], "defin": [2, 27, 28, 29, 36, 39, 44, 45, 46, 48, 65, 67, 68, 72, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 181, 182, 184, 185, 186, 187, 190, 192, 193, 194, 195, 197, 239, 245], "variabl": [2, 4, 5, 8, 9, 10, 17, 25, 26, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 61, 92, 114, 115, 116, 117, 191, 212, 213, 214, 215, 216, 217, 219, 230, 237, 240, 245], "extract": [2, 27, 210], "via": [2, 4, 5, 9, 10, 19, 21, 25, 44, 46, 48, 50, 51, 53, 56, 58, 59, 60, 61, 86, 92, 94, 96, 99, 107, 115, 117, 172, 196, 210, 219], "name": [3, 8, 9, 10, 15, 16, 21, 23, 26, 29, 130, 131, 132, 133, 134, 135, 136, 137, 138, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 225, 245], "regex": 3, "metadata": [3, 14, 15, 16, 20, 24, 245], "none": [3, 4, 5, 6, 8, 9, 10, 15, 17, 19, 21, 25, 26, 28, 29, 33, 34, 36, 37, 38, 39, 41, 42, 47, 49, 54, 55, 56, 57, 58, 59, 62, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 82, 90, 101, 102, 105, 106, 107, 115, 117, 118, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 146, 147, 149, 150, 151, 152, 153, 154, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 226, 227, 230, 231, 232, 234, 235, 237, 239, 240, 242, 243], "metadata_glob": 3, "metadata_loc": 3, "datapathvari": 3, "fmriprep_dir": [4, 5], "space": [4, 5, 37, 39, 96, 102, 105, 128, 130, 138, 150, 153, 172, 181, 182, 212, 213, 214, 215, 216, 217, 234, 235], "additional_t": [4, 5, 10, 25], "ignor": [4, 5, 10, 25, 29, 90, 125, 175, 195, 212, 213, 214, 215, 216, 217], "label": [4, 5, 9, 10, 15, 25, 26, 70, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 210, 245], "subject": [4, 5, 10, 11, 23, 25, 26, 27, 107, 251], "outcom": [4, 5, 9, 10, 25, 26, 186, 245], "model": [4, 5, 10, 15, 24, 25, 27, 28, 29, 65, 67, 68, 131, 133, 138, 182, 190, 212, 213, 214, 215, 216, 217, 230, 231, 232, 234, 237, 240, 251, 252, 253, 254, 256], "tmask": [4, 5, 25, 71], "observ": [4, 5, 6, 9, 10, 25, 26, 45, 47, 49, 50, 51, 60, 61, 70, 71, 72, 74, 75, 76, 77, 78, 79, 92, 102, 105, 114, 115, 116, 117, 160, 172, 180, 185, 190, 196, 200, 201, 202, 203, 205, 212, 213, 214, 215, 216, 217, 219, 230, 231, 237, 245], "level": [4, 5, 8, 9, 10, 11, 12, 13, 17, 25, 26, 27, 178, 180], "session": [4, 5, 10, 11, 25], "run": [4, 5, 10, 23, 25, 26, 27, 29, 96, 102, 105, 170, 172, 195], "task": [4, 5, 6, 10, 25], "depth": [4, 9, 11, 12, 13, 26], "0": [4, 5, 6, 13, 22, 25, 28, 39, 41, 42, 47, 49, 70, 71, 77, 79, 83, 85, 88, 90, 91, 94, 95, 96, 97, 98, 99, 110, 111, 112, 132, 133, 134, 135, 138, 142, 143, 146, 150, 152, 153, 154, 156, 158, 161, 162, 164, 166, 167, 168, 170, 172, 173, 174, 175, 178, 179, 180, 181, 184, 187, 190, 191, 192, 198, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 226, 230, 232, 234, 235, 237, 239, 240, 244], "base": [4, 6, 12, 13, 16, 17, 23, 26, 40, 71, 128, 130, 131, 132, 134, 138, 140, 141, 142, 143, 144, 145, 174, 176, 177, 180, 183, 193, 197, 198, 211, 237, 240, 251, 253, 254, 256], "referenceddataset": [4, 11, 12, 26, 245], "referenc": [4, 5, 13, 245, 254], "output": [4, 10, 14, 15, 21, 27, 28, 29, 31, 32, 33, 34, 36, 45, 47, 49, 60, 61, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 82, 84, 86, 89, 90, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 121, 122, 124, 125, 126, 164, 166, 168, 169, 170, 174, 176, 177, 181, 192, 193, 194, 196, 203, 204, 205, 212, 213, 214, 215, 216, 217, 219, 227, 230, 231, 234, 235, 236, 239, 253], "top": [4, 5, 10, 25, 26], "contain": [4, 5, 8, 9, 10, 15, 16, 18, 19, 20, 21, 25, 26, 28, 29, 34, 36, 37, 41, 42, 45, 47, 49, 62, 66, 74, 75, 76, 77, 78, 79, 92, 102, 103, 104, 105, 106, 114, 116, 130, 131, 132, 133, 134, 135, 136, 137, 138, 164, 165, 178, 179, 185, 186, 187, 192, 201, 210, 212, 213, 214, 215, 216, 217, 219, 240, 245, 251], "all": [4, 5, 6, 8, 9, 10, 14, 16, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 34, 36, 41, 45, 49, 50, 51, 64, 65, 68, 70, 71, 75, 78, 85, 86, 93, 94, 96, 99, 110, 111, 112, 115, 117, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 168, 169, 172, 183, 184, 186, 187, 190, 195, 202, 203, 205, 219, 234, 235, 237, 239, 240, 249, 251, 253], "preprocess": [4, 5], "default": [4, 5, 8, 10, 13, 15, 16, 19, 21, 25, 29, 33, 34, 36, 37, 39, 41, 42, 47, 54, 55, 56, 57, 58, 59, 62, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 88, 89, 90, 91, 92, 102, 104, 105, 106, 107, 111, 114, 115, 116, 117, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 146, 147, 149, 150, 151, 152, 153, 154, 164, 166, 167, 168, 169, 170, 172, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 202, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 237, 239, 251], "indic": [4, 5, 10, 13, 16, 17, 19, 25, 28, 35, 39, 41, 42, 47, 55, 64, 66, 67, 68, 70, 71, 72, 89, 92, 103, 104, 111, 114, 115, 116, 117, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 157, 160, 164, 168, 190, 201, 202, 203, 205, 210, 212, 213, 214, 215, 216, 217, 236, 237], "stereotax": [4, 5], "coordin": [4, 5, 35, 38, 39, 41, 42, 102, 103, 104, 105, 106, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 168, 181, 183, 185, 210, 249, 254], "which": [4, 5, 6, 11, 12, 13, 25, 27, 28, 29, 33, 36, 39, 41, 42, 54, 55, 56, 57, 58, 59, 62, 64, 65, 67, 68, 70, 71, 86, 89, 94, 95, 96, 97, 98, 99, 102, 105, 111, 115, 117, 124, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 144, 146, 147, 150, 153, 154, 164, 168, 172, 173, 174, 175, 177, 178, 179, 180, 184, 186, 187, 190, 192, 193, 194, 196, 197, 204, 210, 219, 234, 235, 237, 245], "imag": [4, 5, 128, 129, 130, 132, 135, 136, 137, 138, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 169, 183, 210, 251], "addit": [4, 5, 6, 8, 10, 13, 15, 16, 20, 24, 25, 27, 29, 30, 33, 34, 55, 56, 58, 59, 60, 61, 67, 68, 74, 75, 76, 77, 78, 79, 90, 111, 115, 117, 138, 142, 174, 175, 190, 195, 212, 213, 214, 215, 216, 217, 236], "each": [4, 5, 6, 9, 10, 13, 15, 17, 19, 21, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 82, 84, 86, 88, 90, 92, 94, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 121, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 170, 173, 175, 178, 179, 181, 182, 184, 186, 187, 189, 190, 196, 210, 212, 213, 214, 215, 216, 217, 219, 234, 235, 236, 237, 239, 245, 253], "index": [4, 5, 9, 10, 15, 17, 25, 26, 41, 42, 66, 187, 219], "column": [4, 5, 9, 10, 15, 25, 26, 33, 34, 37, 39, 41, 42, 66, 74, 75, 76, 77, 78, 79, 82, 84, 90, 94, 95, 96, 97, 98, 99, 107, 109, 110, 111, 112, 126, 175, 181, 183, 187, 196, 213, 216, 239, 243, 251], "correspond": [4, 5, 9, 10, 12, 13, 15, 25, 26, 28, 29, 33, 35, 37, 39, 41, 42, 45, 47, 49, 60, 61, 62, 65, 66, 67, 72, 82, 90, 102, 115, 116, 117, 125, 126, 128, 131, 133, 135, 142, 164, 172, 175, 181, 182, 183, 184, 186, 187, 192, 193, 194, 196, 197, 198, 202, 203, 205, 212, 213, 214, 215, 216, 217, 230, 245], "identifi": [4, 5, 8, 9, 10, 23, 25, 26, 86, 128, 177, 178, 181, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198], "present": [4, 5, 9, 10, 25, 26, 130, 138, 251, 257], "e": [4, 5, 10, 11, 23, 25, 28, 29, 37, 39, 41, 42, 47, 66, 75, 78, 115, 117, 138, 149, 151, 152, 168, 179, 181, 187, 190, 196, 200, 201, 203, 204, 212, 213, 214, 215, 216, 217, 245], "g": [4, 5, 10, 11, 23, 25, 28, 37, 39, 179, 187, 196, 200, 203, 212, 213, 214, 215, 216, 217, 245], "etc": [4, 5, 10, 25, 41, 192, 193, 194, 197, 198, 212, 213, 215, 216, 240], "dict": [4, 5, 8, 9, 10, 16, 18, 20, 25, 26, 29, 129, 130, 131, 132, 133, 134, 135, 136, 137, 164, 227, 239], "dictionari": [4, 5, 8, 9, 10, 15, 16, 17, 18, 20, 25, 26, 29, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 164, 227, 239], "doesn": [4, 5, 10, 25, 143], "t": [4, 5, 8, 10, 15, 16, 20, 25, 28, 106, 143, 170, 174, 180, 196, 201, 210, 219, 230, 231, 234], "support": [4, 5, 10, 25, 28, 42, 68, 100, 113, 155, 164, 190, 211, 214, 217, 229, 237, 252], "logic": [4, 5, 10, 25, 138, 251, 254], "composit": [4, 5, 10, 25], "take": [4, 5, 8, 10, 23, 25, 28, 29, 35, 102, 107, 124, 128, 138, 142, 174, 184, 195, 212, 215, 219, 230, 245], "OR": [4, 5, 10, 25], "over": [4, 5, 10, 11, 25, 27, 28, 29, 55, 58, 59, 62, 71, 72, 95, 96, 97, 98, 109, 114, 115, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 154, 172, 173, 178, 181, 184, 186, 187, 190, 192, 193, 194, 197, 210, 219, 251, 253], "specif": [4, 5, 10, 15, 21, 24, 25, 26, 36, 38, 43, 70, 115, 117, 164, 165, 166, 167, 173, 201, 218, 219, 235], "In": [4, 5, 6, 9, 10, 24, 25, 26, 27, 47, 92, 96, 102, 107, 111, 128, 160, 170, 172, 181, 184, 196, 212, 213, 214, 215, 216, 217, 228, 235, 245, 251, 257], "other": [4, 5, 9, 10, 25, 28, 34, 45, 50, 51, 62, 82, 102, 107, 113, 134, 145, 176, 181, 182, 185, 187, 194, 239, 240, 253], "word": [4, 5, 10, 25], "thei": [4, 5, 9, 10, 11, 19, 20, 21, 25, 28, 70, 71, 72, 74, 75, 76, 77, 78, 79, 86, 119, 210, 251], "satisfi": [4, 5, 10, 25, 192, 210, 237, 239], "criteria": [4, 5, 10, 25], "tupl": [4, 5, 9, 10, 25, 26, 28, 66, 89, 90, 103, 104, 115, 117, 124, 146, 154, 164, 167, 170, 198, 239], "categor": [4, 5, 9, 10, 17, 25, 26, 133, 134, 147, 186], "These": [4, 5, 10, 11, 25, 128, 138, 164, 187, 213, 216, 219, 253], "can": [4, 5, 6, 9, 10, 13, 15, 17, 19, 20, 21, 25, 26, 27, 28, 29, 33, 34, 36, 45, 47, 50, 51, 54, 60, 61, 62, 71, 75, 78, 82, 90, 92, 94, 96, 99, 102, 105, 107, 110, 111, 112, 115, 117, 119, 125, 126, 128, 129, 130, 138, 142, 145, 146, 147, 160, 164, 165, 166, 168, 172, 173, 174, 175, 176, 181, 182, 184, 185, 186, 187, 190, 196, 197, 198, 210, 212, 213, 214, 215, 216, 217, 219, 234, 235, 237, 239, 240, 243, 245, 251, 253], "taken": [4, 5, 10, 25], "either": [4, 5, 10, 25, 28, 71, 72, 87, 96, 124, 126, 128, 138, 161, 162, 172, 187, 198, 201, 212, 213, 214, 219, 237, 239, 243, 251], "tabl": [4, 5, 10, 25], "becom": [4, 5, 10, 25, 96, 172, 184, 186, 237], "avail": [4, 5, 10, 20, 25, 35, 52, 130, 138, 184, 196, 212, 213, 214, 215, 216, 217, 237, 239, 250, 251], "predict": [4, 5, 10, 25], "target": [4, 5, 10, 25, 34, 41, 42, 66, 234, 235], "classif": [4, 5, 10, 25, 237], "By": [4, 5, 13, 25, 29, 47, 67, 68, 70, 72, 88, 89, 91, 130, 131, 133, 135, 136, 137, 154, 164, 183, 184, 186, 190, 210, 212, 213, 214, 215, 216, 217, 219, 237], "continu": [4, 5, 9, 10, 25, 26, 62, 128, 130, 136, 137, 138, 169], "regress": [4, 5, 10, 25, 212, 213, 214, 229], "formula": [4, 5, 25, 28], "express": [4, 5, 25, 106, 138, 181], "repres": [4, 5, 8, 10, 17, 25, 28, 34, 94, 99, 166, 186, 190, 196, 210, 240], "confound": [4, 5, 24, 25, 45, 212, 213, 214, 229, 245], "For": [4, 5, 6, 8, 11, 25, 26, 27, 28, 29, 47, 62, 65, 66, 67, 74, 75, 76, 77, 78, 79, 108, 111, 115, 117, 125, 128, 133, 134, 138, 142, 146, 147, 153, 164, 166, 168, 175, 183, 184, 186, 187, 190, 192, 198, 212, 213, 214, 215, 216, 217, 239, 242, 251, 252, 253], "exampl": [4, 5, 9, 25, 27, 142, 154, 177, 187, 192, 240, 250, 251, 252], "36": [4, 5, 25], "expand": [4, 5, 25, 82, 107, 114, 116, 117, 174, 239, 257], "specifi": [4, 5, 8, 9, 10, 13, 15, 16, 17, 20, 21, 22, 23, 25, 26, 28, 29, 33, 34, 36, 37, 39, 47, 62, 70, 72, 74, 75, 77, 78, 79, 82, 86, 89, 90, 96, 107, 110, 111, 112, 114, 115, 116, 117, 122, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 160, 164, 166, 167, 168, 169, 170, 172, 173, 175, 180, 181, 186, 187, 192, 193, 194, 196, 197, 210, 212, 213, 214, 215, 216, 217, 219, 237, 239, 249], "dd1": [4, 5, 25], "rp": [4, 5, 25, 164, 167], "wm": [4, 5, 25], "csf": [4, 5, 25], "gsr": [4, 5, 25], "2": [4, 5, 25, 27, 28, 29, 36, 39, 41, 42, 47, 55, 58, 59, 60, 61, 62, 66, 75, 82, 85, 88, 89, 90, 91, 94, 99, 103, 104, 105, 106, 107, 115, 116, 117, 125, 126, 146, 154, 164, 170, 174, 180, 181, 182, 183, 187, 191, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 212, 213, 214, 215, 216, 217, 230, 234, 235, 239], "tempor": [4, 5, 6, 25, 47, 210, 212, 213, 214, 215, 216, 217], "mask": [4, 5, 6, 25, 70, 72, 120, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 164, 165, 210, 212, 213, 214, 215, 216, 217, 219, 251, 254], "instanc": [4, 5, 6, 25, 26, 29, 34, 47, 67, 68, 82, 90, 94, 99, 107, 111, 125, 128, 129, 130, 136, 137, 138, 146, 147, 160, 164, 168, 170, 175, 179, 183, 185, 190, 195, 198, 210, 212, 213, 214, 215, 216, 217, 239, 243, 251, 253], "uthr0": [4, 5, 25], "5": [4, 5, 25, 41, 125, 152, 164, 230, 240], "fd": [4, 5, 25], "uthr1": [4, 5, 25], "dv": [4, 5, 25], "result": [4, 5, 8, 9, 25, 26, 65, 67, 68, 71, 86, 92, 106, 107, 129, 130, 131, 132, 133, 134, 135, 136, 137, 153, 157, 160, 168, 170, 177, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 210, 227, 228, 230, 236], "time": [4, 5, 6, 14, 20, 25, 34, 41, 43, 44, 46, 47, 48, 60, 61, 64, 65, 68, 70, 71, 72, 107, 115, 117, 118, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 170, 184, 187, 190, 196, 201, 204, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 231, 237, 242, 243, 245, 249, 254, 257], "point": [4, 5, 6, 25, 38, 39, 43, 62, 71, 72, 94, 96, 99, 102, 103, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 157, 164, 165, 168, 169, 172, 173, 181, 187, 210, 212, 213, 214, 215, 216, 217, 219, 230, 231, 234, 235, 251, 253], "less": [4, 5, 25, 70, 71, 96, 157, 169, 172, 192], "than": [4, 5, 9, 21, 25, 26, 27, 34, 39, 62, 70, 71, 75, 78, 86, 96, 138, 142, 157, 160, 169, 172, 183, 185, 186, 193, 194, 212, 213, 214, 215, 216, 217, 230], "framewis": [4, 5, 25], "displac": [4, 5, 25, 35, 181, 182, 249], "1": [4, 5, 22, 25, 27, 28, 29, 34, 36, 39, 41, 45, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 82, 88, 89, 91, 94, 95, 96, 97, 98, 99, 101, 104, 105, 106, 107, 110, 111, 112, 115, 117, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 230, 234, 235, 236, 237, 239, 240, 244], "standardis": [4, 5, 14, 25, 196, 245], "dvar": [4, 5, 25], "whose": [4, 5, 8, 9, 10, 17, 25, 26, 31, 32, 36, 37, 45, 70, 71, 90, 103, 115, 117, 128, 130, 131, 133, 134, 135, 136, 137, 138, 142, 157, 160, 164, 166, 170, 179, 183, 184, 185, 187, 190, 192, 193, 194, 196, 201, 235, 239, 245], "packag": [4, 5, 9, 10, 25, 26, 237, 245, 253], "separ": [4, 5, 10, 25, 26, 36, 45, 71, 102, 105, 128, 138, 164, 184, 185, 186, 230], "have": [4, 5, 6, 8, 10, 20, 25, 27, 28, 34, 68, 85, 92, 126, 142, 143, 147, 150, 153, 164, 166, 177, 178, 179, 181, 184, 190, 196, 228, 237, 239, 240, 257], "same": [4, 5, 6, 10, 25, 31, 32, 64, 65, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 82, 86, 90, 96, 107, 114, 115, 116, 117, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 142, 164, 167, 172, 173, 175, 182, 190, 196, 214, 217, 234, 235, 243], "valu": [4, 5, 6, 9, 10, 14, 17, 18, 21, 23, 25, 26, 28, 31, 32, 36, 41, 47, 54, 62, 64, 67, 68, 70, 71, 72, 85, 86, 90, 94, 96, 99, 102, 103, 104, 110, 111, 112, 121, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 175, 178, 180, 181, 184, 190, 191, 193, 197, 198, 201, 203, 210, 212, 213, 214, 215, 216, 217, 219, 230, 234, 235, 237, 239, 245, 253], "sublevel": [4, 5, 10, 25], "permit": [4, 5, 10, 25, 115, 117, 157, 160, 212, 213, 215, 216], "easier": [4, 5, 10, 25], "augment": [4, 5, 10, 25, 212, 213, 214, 215, 216, 217, 232, 234], "pool": [4, 5, 10, 25], "across": [4, 5, 10, 25, 26, 27, 36, 70, 71, 82, 89, 114, 115, 116, 117, 136, 137, 138, 168, 187, 202, 203, 205, 210, 219, 230], "int": [4, 13, 21, 41, 42, 47, 54, 55, 56, 57, 58, 59, 62, 66, 70, 72, 77, 88, 89, 90, 91, 95, 96, 97, 98, 102, 105, 116, 130, 131, 132, 133, 134, 135, 136, 137, 147, 150, 153, 154, 164, 167, 170, 172, 180, 186, 187, 192, 193, 194, 197, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 231, 237, 239], "sampl": [4, 5, 12, 13, 25, 26, 27, 28, 45, 47, 49, 55, 58, 71, 94, 99, 110, 111, 112, 128, 132, 133, 134, 138, 144, 146, 147, 164, 167, 168, 204, 205, 210, 230, 235, 236], "nest": [4, 12, 13, 23, 26, 138, 240], "hierarch": [4, 13], "minibatch": [4, 13], "highest": [4, 13], "method": [4, 6, 8, 9, 10, 12, 13, 23, 26, 28, 29, 41, 42, 69, 70, 71, 86, 105, 111, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 169, 170, 172, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 190, 193, 195, 196, 198, 207, 209, 210, 218, 219, 220, 222, 223, 224, 230, 231, 232, 236, 237, 239, 244], "add_data": [4, 13, 245], "add": [4, 13, 47, 174, 178, 179, 212, 213, 214, 215, 216, 217, 227, 237, 239], "anoth": [4, 6, 45, 128, 130, 131, 132, 133, 134, 135, 136, 137, 173, 190, 210, 225, 235], "follow": [4, 10, 28, 29, 33, 51, 62, 70, 85, 88, 91, 102, 130, 142, 164, 166, 191, 212, 213, 215, 216, 219, 220, 236, 245, 257], "constructor": [4, 138, 237], "dtype": [5, 21, 25, 90, 130, 131, 132, 133, 134, 135, 136, 137, 165, 180, 204, 210, 212, 213, 214, 215, 216, 217, 219, 220, 226, 227, 230, 231, 232, 235, 239, 242], "devic": [5, 17, 21, 25, 90, 130, 131, 132, 133, 134, 135, 136, 137, 180, 204, 210, 212, 213, 214, 215, 216, 217, 219, 220, 226, 227, 230, 231, 232, 235, 239, 242], "obtain": [5, 9, 10, 13, 15, 18, 20, 25, 44, 46, 47, 48, 50, 51, 62, 102, 191, 212, 213, 214, 215, 216, 217], "process": [5, 24, 28, 29, 34, 191, 201, 204, 205, 219, 245], "torch": [5, 6, 21, 25, 27, 28, 29, 43, 60, 61, 92, 109, 111, 115, 117, 147, 154, 165, 178, 181, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 198, 204, 210, 228, 231, 240, 252], "datatyp": [5, 21, 25, 130, 131, 132, 133, 134, 135, 136, 137, 166], "datarefer": [5, 7, 10, 11, 13, 25, 26, 245], "creation": [5, 25, 130, 131, 135, 136, 137], "note": [5, 9, 17, 20, 25, 27, 34, 61, 62, 68, 86, 103, 104, 107, 110, 111, 112, 125, 129, 138, 149, 150, 153, 154, 160, 164, 166, 174, 178, 179, 183, 185, 190, 193, 212, 213, 215, 216, 230, 237, 239, 252], "you": [5, 20, 25, 28, 42, 56, 58, 59, 102, 105, 111, 160, 178, 179, 183, 219, 220, 237, 240, 257], "train": [5, 25, 210, 218, 237, 240, 245, 253], "strongli": [5, 11, 25], "type": [5, 6, 8, 9, 21, 25, 26, 28, 39, 62, 130, 131, 133, 134, 135, 136, 137, 164, 167, 204, 212, 213, 214, 215, 216, 217], "return": [5, 8, 9, 10, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 47, 55, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 117, 121, 122, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 146, 147, 157, 158, 160, 164, 165, 166, 168, 169, 170, 173, 175, 177, 178, 179, 181, 184, 185, 186, 189, 190, 191, 192, 193, 194, 196, 198, 201, 203, 205, 210, 228, 237, 240], "data_ref": [5, 10, 13, 25], "fmridatarefer": [5, 9, 25], "found": [5, 10, 25, 92, 173, 196, 228, 257], "patch": 6, "pytorch": [6, 21, 47, 144, 252], "": [6, 8, 9, 12, 13, 15, 19, 20, 26, 27, 28, 29, 35, 36, 37, 39, 64, 68, 107, 114, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 149, 150, 151, 152, 153, 154, 161, 162, 164, 165, 174, 178, 179, 181, 183, 184, 187, 190, 210, 219, 230, 234, 245, 251, 257], "default_col": 6, "associ": [6, 102, 105, 138, 180, 181, 185, 190], "enabl": [6, 9, 24, 26, 27, 130, 131, 132, 133, 134, 135, 136, 137, 164, 239, 251, 253], "argument": [6, 8, 9, 15, 16, 20, 21, 26, 28, 29, 31, 32, 33, 35, 61, 70, 71, 72, 90, 94, 99, 128, 138, 140, 141, 142, 146, 149, 154, 168, 173, 175, 183, 197, 219], "typic": [6, 43, 70, 102, 108, 138], "when": [6, 9, 20, 26, 28, 41, 42, 68, 70, 71, 92, 96, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 147, 149, 150, 151, 152, 153, 164, 172, 182, 183, 184, 186, 187, 190, 191, 196, 201, 210, 228, 237, 239, 240, 245, 251], "tensor": [6, 14, 17, 19, 22, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217, 219, 227, 231, 234, 235, 236, 237, 239, 243, 245, 253], "form": [6, 8, 74, 87, 88, 91, 94, 99, 122, 126, 128, 183, 201, 231, 237, 245], "our": [6, 27, 28, 29, 196, 245, 246, 257], "gen_col": [6, 245], "modifi": [6, 85, 86], "make": [6, 28, 61, 142, 184, 237], "itself": [6, 31, 32, 74, 75, 76, 77, 78, 79, 107, 128, 149, 151, 152, 184, 201, 236], "set": [6, 8, 20, 28, 29, 33, 36, 45, 47, 49, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 88, 91, 106, 107, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 164, 168, 169, 170, 178, 180, 181, 183, 184, 185, 186, 190, 191, 192, 194, 195, 196, 210, 212, 213, 214, 215, 216, 217, 219, 230, 234, 235, 237, 239, 245, 251], "stack": [6, 90, 107, 175, 239, 243, 250], "along": [6, 19, 21, 36, 45, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 88, 90, 91, 96, 111, 120, 124, 147, 150, 153, 154, 168, 172, 186, 187, 190, 196, 197, 212, 213, 215, 216, 236], "new": [6, 8, 15, 16, 19, 21, 28, 96, 114, 116, 128, 170, 172, 234, 236, 237], "prepend": [6, 197], "axi": [6, 19, 21, 22, 35, 37, 45, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 78, 79, 81, 90, 92, 95, 96, 97, 98, 115, 117, 120, 123, 124, 125, 131, 133, 147, 150, 153, 154, 160, 168, 172, 175, 182, 186, 187, 189, 190, 192, 193, 194, 197, 212, 213, 214, 215, 216, 217], "With": [6, 138], "altern": [6, 26, 234, 235, 237], "extend_and_bind": [6, 245], "design": [6, 107, 128, 138, 170, 181, 187, 245], "handl": [6, 36, 128, 149, 150, 151, 152, 153, 154, 157, 161, 162, 245], "case": [6, 11, 15, 26, 27, 28, 29, 42, 47, 62, 67, 68, 92, 110, 111, 112, 128, 145, 170, 176, 181, 183, 184, 187, 190, 196, 198, 212, 213, 214, 215, 216, 217, 228, 234, 235, 239, 245, 250, 251], "being": [6, 28, 34, 88, 94, 99, 143, 184, 210], "might": [6, 9, 15, 26, 71, 102, 105, 111, 128, 142, 177, 184, 187, 196, 230, 234], "size": [6, 19, 21, 27, 45, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 90, 92, 94, 95, 96, 97, 98, 99, 107, 109, 110, 111, 112, 114, 115, 116, 117, 125, 170, 174, 178, 190, 212, 213, 214, 215, 216, 217, 219, 234, 235, 236], "commonli": 6, "occur": [6, 70, 94, 99, 111, 184, 187], "differ": [6, 10, 21, 35, 60, 61, 62, 64, 67, 68, 71, 75, 78, 90, 96, 117, 130, 131, 132, 133, 134, 135, 136, 137, 160, 170, 172, 173, 175, 176, 183, 184, 190, 196, 197, 214, 217, 234, 235, 239], "acquisit": 6, "durat": [6, 191], "termin": [6, 28, 96, 172], "earli": 6, "pad": [6, 21, 115, 117, 118], "miss": [6, 14, 21, 70, 71, 72, 245], "until": [6, 19, 21, 72, 90, 210], "concaten": [6, 90, 175, 210], "them": [6, 9, 26, 29, 45, 70, 71, 72, 157, 183, 184, 186, 190, 192, 195, 218, 230, 240, 253], "wai": [6, 17, 27, 105, 107, 123, 142, 237, 240], "prefix": 6, "random": [6, 28, 29, 41, 128, 133, 134, 146, 168, 170, 210, 236, 251], "window": [6, 14, 70, 72, 115, 117, 244, 245], "selector": [6, 176, 230], "transform": [6, 8, 9, 15, 17, 26, 31, 32, 54, 55, 56, 57, 58, 59, 70, 71, 94, 99, 107, 109, 110, 111, 112, 115, 117, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 147, 149, 150, 151, 152, 153, 154, 156, 159, 161, 162, 164, 166, 168, 169, 170, 175, 183, 186, 190, 192, 193, 194, 200, 204, 205, 210, 212, 213, 215, 216, 219, 242, 245, 251, 254], "sure": [6, 174], "appropri": [6, 62, 92, 114, 142, 147, 183, 210], "would": [6, 27, 128, 183, 185, 237, 245, 257], "sens": [6, 28, 61], "replac": [6, 11, 16, 19, 34, 36, 62, 71, 82, 94, 96, 99, 107, 110, 111, 112, 172, 234, 235], "signal": [6, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 164, 167, 200, 201, 202, 203, 204, 205, 208, 210, 251], "exclud": [6, 131, 133, 138, 168, 190, 194], "keep": 6, "code": [6, 138], "sync": 6, "could": [6, 61, 102, 106, 115, 117, 170, 179, 187], "failur": 6, "concat": 6, "built": 6, "concat_axi": 6, "basic": [6, 201, 250], "stolen": 6, "adapt": [6, 41, 220], "_util": 6, "py": 6, "out": [6, 20, 27, 28, 29, 31, 32, 45, 60, 61, 64, 65, 68, 82, 90, 102, 105, 107, 115, 116, 117, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 174, 190, 210, 219, 227, 242, 243, 257], "interfac": [7, 28, 245, 249, 254], "between": [7, 27, 43, 45, 48, 49, 50, 51, 62, 64, 65, 67, 68, 74, 75, 76, 77, 78, 79, 82, 87, 96, 102, 106, 107, 142, 149, 150, 151, 152, 153, 160, 164, 172, 173, 182, 183, 184, 185, 190, 197, 212, 213, 214, 218, 233, 234, 235, 239], "loader": [7, 12, 138], "data_refer": [7, 9, 13, 26, 245], "dataref": [8, 9, 10, 245, 254], "templat": [8, 23, 82, 107, 132, 133, 174, 239], "filter": [8, 10, 23, 60, 71, 107, 163, 164, 165, 166, 176, 249, 251, 254, 256], "grabber": [8, 23, 245], "represent": [8, 54, 74, 75, 76, 77, 78, 79, 130, 138, 142, 210, 239, 245], "filesystem": [8, 9, 14, 17, 26, 138, 245], "within": [8, 29, 36, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 181, 185, 195], "search": [8, 13, 129, 250], "subsequ": 8, "substanti": [8, 130, 131, 132, 133, 134, 135, 136, 137, 138, 250], "narrow": 8, "acceler": [8, 252], "variablefactoryfactori": 8, "child": [8, 169, 240], "datasetvari": [8, 9, 26], "suitabl": [8, 67, 68, 94, 96, 99, 110, 111, 112, 172, 190, 234, 235], "store": [8, 17, 28, 29, 122, 128, 135, 136, 137, 142, 210, 212, 213, 214, 218, 245, 251], "doe": [8, 19, 28, 29, 42, 49, 87, 146, 150, 153, 166, 168, 175, 214, 217], "noth": [8, 19, 29, 134], "overrid": [8, 47, 212, 213, 214, 215, 216, 217], "now": [8, 20, 28, 29, 96, 102, 103, 104, 105, 119, 170, 172], "just": [8, 28, 106, 239], "write": [8, 245, 250], "ones": [8, 34, 176], "don": [8, 20, 106, 174], "keyword": [8, 138], "onli": [8, 9, 16, 17, 18, 21, 27, 28, 29, 31, 32, 103, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 154, 164, 166, 167, 170, 176, 177, 178, 182, 192, 210, 212, 213, 215, 216, 227, 230, 234, 237], "those": [8, 9, 27, 34, 45, 71, 72, 90, 154, 178, 179, 184, 212, 213, 214], "summari": [8, 9, 23, 107], "__call__": [8, 9, 129, 130, 131, 132, 133, 134, 135, 136, 137, 169, 245, 251], "param": [8, 28, 44, 45, 46, 48, 50, 51, 52, 60, 61, 67, 68, 115, 117, 118, 190], "submit": 8, "It": [8, 10, 20, 27, 28, 29, 43, 45, 50, 51, 68, 71, 72, 94, 96, 99, 102, 135, 138, 142, 154, 172, 174, 183, 184, 185, 187, 190, 219, 227, 237, 253], "must": [8, 10, 19, 28, 29, 47, 71, 107, 114, 122, 124, 125, 126, 130, 136, 137, 142, 147, 164, 181, 183, 210, 212, 213, 214, 215, 216, 217, 219, 220, 237, 239, 240], "implement": [8, 9, 10, 26, 27, 29, 47, 62, 87, 93, 101, 105, 128, 130, 138, 164, 165, 166, 196, 210, 218, 219, 220, 237, 245, 253], "get": [8, 9, 10, 23, 106], "entri": [8, 9, 10, 17, 19, 21, 26, 33, 44, 46, 47, 48, 50, 51, 62, 64, 68, 90, 121, 126, 129, 138, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 175, 176, 179, 181, 183, 190, 197, 212, 213, 214, 215, 216, 217, 236], "combin": [8, 10, 34, 70, 94, 96, 99, 111, 128, 130, 131, 132, 133, 134, 135, 136, 137, 172, 176, 183, 184, 231, 232, 234, 235, 245, 251], "initialis": [8, 9, 26, 96, 129, 132, 133, 134, 138, 140, 141, 142, 143, 144, 145, 146, 147, 153, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 182, 210, 212, 213, 215, 216, 218, 219, 227, 230, 234, 235, 239, 245, 250, 254], "collis": 8, "preced": [8, 37, 39, 41, 42, 64, 66, 82, 84, 124, 230, 231, 234, 235, 236], "variable_factori": [8, 245], "assign": [8, 9, 18, 21, 26, 39, 64, 67, 68, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 186, 187, 190, 240], "idx": [9, 26], "level_nam": [9, 26], "singl": [9, 21, 26, 36, 90, 114, 115, 116, 117, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 160, 164, 170, 175, 183, 186, 187, 190, 210, 212, 213, 215, 216, 217, 237, 245, 253], "multivari": [9, 26, 45, 47, 49, 60, 61, 191, 200, 201, 202, 203, 204, 205, 212, 213, 214, 215, 216, 217], "sub": [9, 26], "recurs": [9, 17, 26, 164, 167, 169], "subref": [9, 26], "field": [9, 26, 134, 169, 174, 181, 210], "parent": [9, 13, 26, 147, 240], "dataload": [9, 12], "travers": [9, 26], "see": [9, 29, 38, 55, 58, 59, 92, 101, 105, 115, 117, 125, 128, 132, 140, 141, 146, 160, 168, 173, 175, 178, 201, 237, 246], "datafram": [9, 15, 21, 26], "panda": [9, 21], "assum": [9, 20, 23, 26, 29, 64, 68, 135, 190, 203, 243], "iter": [9, 17, 21, 26, 28, 29, 33, 36, 41, 72, 96, 130, 131, 132, 133, 134, 135, 136, 137, 138, 147, 168, 169, 170, 172, 183, 192, 193, 194], "togeth": [9, 26, 28, 36, 70, 72, 102, 105, 115, 117, 128, 130, 131, 132, 133, 134, 135, 136, 137, 153, 184, 218, 236], "furthermor": [9, 26], "slice": [9, 26, 29, 36, 45, 47, 49, 64, 68, 86, 88, 89, 145, 147, 150, 153, 154, 190, 192, 193, 194, 196, 197, 212, 213, 214, 215, 216, 217], "here": [9, 26, 28, 90, 93, 105, 134, 150, 153, 166, 174, 234, 237, 251], "futur": [9, 11, 24, 26, 115, 117, 145], "comput": [9, 26, 28, 29, 33, 35, 36, 37, 39, 41, 42, 45, 47, 49, 50, 51, 54, 55, 56, 58, 59, 62, 64, 65, 67, 68, 74, 75, 76, 77, 78, 79, 84, 95, 96, 97, 98, 102, 105, 106, 107, 108, 109, 110, 112, 129, 130, 131, 132, 133, 134, 135, 136, 137, 149, 151, 152, 154, 166, 168, 171, 172, 174, 178, 180, 181, 183, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 210, 212, 213, 214, 215, 216, 217, 234, 236, 237, 239, 249], "automat": [9, 13, 26, 27, 28, 47, 74, 75, 77, 78, 79, 131, 138, 180, 196, 212, 213, 214, 215, 216, 217, 237, 252], "rather": [9, 20, 26, 27, 75, 78, 138, 142, 183, 186, 193, 212, 213, 214, 215, 216, 217], "themselv": [9, 26], "subrefer": [9, 26], "eas": [9, 26], "without": [9, 26, 138, 181, 186, 196, 214, 217], "overwrit": [9, 26], "categoricalvari": [9, 26], "continuousvari": [9, 26], "addition": [9, 26, 27, 128, 138, 253, 257], "access": [9, 26, 27, 29, 138], "attribut": [9, 26, 28, 29, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 164, 178, 179, 210, 212, 213, 214, 215, 216, 217, 218, 219, 227, 230, 231, 234, 235, 236, 239, 240], "fulli": [9, 26, 237, 250], "vfactori": [9, 26], "lfactori": [9, 26], "ofactori": [9, 26], "were": [9, 19, 21, 26, 28, 86, 210], "thu": [9, 26, 28, 29, 52, 86, 96, 128, 172, 184, 185, 186, 196, 210, 212, 215, 236], "id": [9, 26, 105], "direct": [9, 21, 50, 51, 68, 70, 72, 190, 252], "kei": [9, 17, 18, 22, 29, 128, 138, 164], "pair": [9, 33, 43, 50, 51, 62, 65, 102, 106, 138, 164, 181, 182, 184, 190, 196, 212, 213, 214, 249, 251], "its": [9, 13, 15, 16, 21, 29, 36, 39, 60, 61, 62, 82, 85, 89, 107, 122, 124, 128, 129, 138, 142, 145, 149, 150, 151, 152, 153, 154, 156, 159, 161, 162, 166, 168, 177, 181, 183, 184, 186, 190, 192, 193, 201, 210, 219, 239, 252], "__getattr__": [9, 245], "request": 9, "so": [9, 10, 19, 20, 28, 36, 71, 86, 124, 128, 129, 142, 149, 154, 160, 165, 174, 176, 183, 184, 193, 201, 219, 242, 245], "multipl": [9, 28, 29, 53, 60, 61, 125, 126, 136, 137, 138, 149, 151, 152, 164, 170, 196, 212, 214, 215, 216, 217, 219, 253], "entir": [9, 11, 31, 138], "otherwis": [9, 21, 41, 42, 66, 70, 72, 82, 90, 107, 164, 175, 183, 187, 192, 201, 203, 212, 213, 215, 216, 237], "get_var": [9, 245], "parse_id": [9, 245], "popul": [9, 19, 21, 36, 90, 91, 144, 164, 175], "order": [9, 22, 36, 37, 60, 61, 77, 88, 91, 154, 164, 167, 170, 192, 193, 194, 197, 198, 237], "ident": [9, 14, 34, 64, 68, 74, 75, 76, 77, 78, 79, 86, 94, 96, 99, 106, 111, 129, 130, 131, 133, 134, 135, 136, 137, 142, 145, 146, 155, 164, 166, 168, 172, 174, 175, 184, 190, 201, 210, 219, 234, 235, 239, 245, 251], "map": [9, 15, 28, 29, 31, 32, 33, 40, 41, 42, 64, 102, 107, 111, 114, 115, 116, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 149, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 174, 177, 178, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 198, 208, 210, 218, 219, 225, 227, 242, 245, 249, 253, 254], "data_dir": 10, "getal": [10, 23], "entiti": [10, 23], "subclass": [10, 11, 27, 28, 29, 128, 129, 173, 195, 210, 240], "locat": [10, 19, 35, 37, 39, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 154, 210, 245], "uniqu": [10, 23, 128, 150, 153, 170, 237], "select": [10, 15, 17, 130, 131, 132, 133, 134, 135, 136, 137, 170, 230, 231, 232, 234, 235, 237, 253, 254, 256], "long": [10, 20, 130, 131, 132, 133, 134, 135, 136, 137, 143, 237], "format": [10, 16, 18, 24, 103, 104, 106, 245], "hcp_refer": [10, 24, 245], "hcp": [10, 25, 245, 254], "compos": [11, 176, 177, 249], "encourag": [11, 183], "remain": [11, 64, 68, 125, 129, 147, 168, 190, 192, 193, 194, 210, 212, 213, 214, 215, 216, 217, 236, 245], "chang": [11, 14, 16, 17, 21, 164, 167, 210, 251, 253], "switch": 11, "deprec": 11, "advis": [11, 14, 71, 138], "anyth": 11, "import": [11, 47, 166, 183, 212, 213, 214, 215, 216, 217, 240], "referenceddataload": [11, 245], "kwarg": [12, 15, 16, 20, 28, 29, 130, 132, 134, 176, 177, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198], "set_depth": [12, 13, 245], "adjust": [12, 13, 21, 164, 237], "append": [13, 28, 124, 197], "collat": [13, 28, 245, 254], "variou": [14, 164, 253], "modal": 14, "moment": [14, 27, 184, 253, 254], "larg": [14, 17, 20, 27, 62, 66, 67, 68, 90, 168, 181, 190, 196, 237, 245], "undocu": 14, "untest": [14, 209, 210, 245], "dure": [14, 28, 130, 131, 132, 133, 134, 135, 136, 137, 181, 210, 230, 234, 237], "come": [14, 20, 174], "round": [14, 111, 112], "howev": [14, 27, 28, 184, 239, 257], "interim": 14, "user": [14, 29, 71, 128, 130, 138], "verifi": [14, 87, 92, 228], "expect": [14, 27, 65, 71, 160, 187, 190, 191, 201, 203, 245], "get_path_from_var": [14, 245], "apply_transform": [14, 245], "apply_to_select": [14, 245], "transform_block": [14, 245], "unzip_blocked_dict": [14, 245], "transpos": [14, 29, 47, 82, 89, 92, 107, 190, 212, 213, 214, 215, 216, 217, 239, 245], "vector_encod": [14, 245], "o": [14, 64, 65, 67, 68, 212, 213, 214, 215, 216, 217, 231, 245], "read_data_fram": [14, 245], "read_neuro_imag": [14, 245], "read_json": [14, 245], "change_extens": [14, 245], "cast": [14, 17, 62, 126, 245], "bind": [14, 245], "to_tensor": [14, 245], "to_named_tensor": [14, 245], "consolidate_block": [14, 245], "extend_to_s": [14, 245], "extend_to_max_s": [14, 245], "frame": [14, 69, 70, 71, 72, 115, 117, 237, 245], "get_col": [14, 245], "apply_model_spec": [14, 245], "nifti_head": [14, 245], "cwb_cifti_head": [14, 245], "dump_data": [14, 245], "get_metadata_vari": [14, 245], "nanfil": [14, 21, 245], "fillnan": [14, 245], "seri": [14, 43, 47, 60, 61, 70, 71, 72, 115, 117, 118, 128, 174, 184, 196, 201, 210, 212, 213, 214, 215, 216, 217, 219, 245, 249, 254], "polynomial_detrend": [14, 245], "normalis": [14, 30, 33, 42, 44, 45, 46, 47, 48, 50, 64, 66, 67, 68, 129, 130, 131, 132, 133, 134, 135, 136, 137, 154, 155, 164, 167, 168, 183, 184, 187, 190, 191, 196, 206, 210, 212, 213, 214, 215, 216, 217, 236, 245, 249, 251, 256], "random_window": [14, 245], "window_map": [14, 245], "df": [15, 26], "accord": [15, 27, 31, 32, 36, 44, 46, 48, 60, 61, 70, 82, 107, 164, 178, 179, 212, 215], "collect": [15, 26, 28, 253], "subset": [15, 129, 210, 212, 213, 214, 215, 216, 217, 253], "therebi": [15, 26, 27, 86, 164, 166, 212, 213, 214, 215, 216, 217, 219, 245], "option": [15, 33, 34, 107, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 164, 183, 212, 213, 214, 215, 216, 217, 236, 239], "guid": 15, "some": [15, 20, 24, 29, 41, 43, 62, 92, 94, 99, 105, 115, 117, 138, 142, 149, 151, 152, 161, 162, 185, 186, 187, 190, 198, 210, 212, 213, 214, 215, 216, 217, 228, 234, 237, 251], "compulsori": 15, "sep": [15, 16], "tabular": [15, 16], "tsv": [15, 16], "forward": [15, 16, 20, 27, 28, 29, 61, 66, 70, 72, 93, 142, 150, 153, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 230, 237, 240, 247, 253], "pd": [15, 16], "read_csv": [15, 16], "nibabel": [16, 20, 169], "json": [16, 18], "python": [16, 18, 20, 142, 252], "new_ext": 16, "mode": [16, 27, 28, 174, 198, 218, 240], "edit": [16, 160], "extens": [16, 19, 21, 196], "last": [16, 29, 35, 36, 37, 45, 47, 49, 60, 61, 74, 75, 76, 77, 78, 79, 88, 89, 92, 115, 117, 145, 183, 212, 213, 214, 215, 216, 217], "everyth": 16, "after": [16, 29, 45, 62, 70, 86, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 170, 178, 179, 204, 205, 210, 212, 213, 214, 215, 216, 217, 236], "period": [16, 55, 58, 59, 62, 71], "treat": [16, 86, 210], "old": 16, "text": 16, "final": [16, 34, 60, 61, 70, 72, 74, 75, 76, 77, 78, 79, 81, 83, 88, 115, 117, 170, 212, 213, 214, 215, 216, 217, 231, 245], "new_path": 16, "var": [17, 146, 168], "ensur": [17, 85, 86, 94, 96, 99, 106, 110, 111, 112, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 172, 173, 183, 184, 187, 210, 212, 213, 214, 215, 216, 217, 219, 234, 235, 237, 252], "appli": [17, 22, 28, 29, 31, 32, 54, 55, 56, 57, 58, 59, 60, 61, 70, 111, 115, 117, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 168, 169, 175, 176, 181, 184, 189, 192, 195, 196, 210, 219, 242, 247, 251, 253], "potenti": [17, 19, 34, 42, 60, 61, 107, 112, 125, 138, 170, 212, 213, 214, 215, 216, 217, 240], "block": [17, 18, 21, 27, 28, 33, 65, 67, 68, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 107, 171, 175, 178, 179, 187, 190, 240, 245], "encod": [17, 28, 64, 68, 128, 130, 138, 147, 190, 226, 234, 235], "vector": [17, 34, 36, 65, 74, 75, 76, 77, 78, 79, 82, 86, 87, 88, 91, 92, 103, 104, 106, 107, 154, 178, 179, 184, 186, 187, 189, 191, 193, 198, 230, 231, 236, 237, 239], "matrix": [17, 28, 29, 33, 34, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 102, 107, 109, 110, 111, 112, 125, 126, 145, 154, 170, 172, 173, 175, 183, 184, 185, 190, 191, 193, 200, 201, 204, 212, 213, 214, 215, 216, 217, 227, 234, 235, 236, 237, 239, 242, 243, 249, 251, 254], "dimens": [17, 20, 21, 27, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 90, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 121, 122, 124, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 164, 165, 166, 170, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 212, 213, 214, 215, 216, 217, 219, 230, 231, 234, 235, 236, 243], "equal": [17, 19, 21, 27, 64, 68, 88, 90, 115, 117, 124, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 147, 181, 187, 190, 196, 239], "number": [17, 20, 28, 33, 34, 36, 37, 39, 41, 42, 45, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 82, 84, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 147, 164, 165, 166, 170, 172, 174, 180, 181, 182, 183, 190, 194, 196, 200, 201, 202, 203, 205, 210, 212, 213, 214, 215, 216, 217, 219, 227, 230, 231, 234, 235, 236, 237, 239], "hot": 17, "endod": 17, "becaus": [17, 27, 70, 71, 84, 106, 130, 131, 132, 133, 134, 135, 136, 137, 160, 164, 174, 181, 183, 184, 190, 196, 236, 250, 257], "expens": 17, "mani": [17, 27, 28, 29, 66, 67, 68, 138, 170, 183, 190, 245], "dataobj": 18, "dataobjectvari": 18, "fill": [19, 21, 83, 90, 169, 175], "invalid": 19, "np": 19, "ndarrai": [19, 130, 131, 133, 135, 136, 137], "denot": [19, 21, 33, 34, 36, 37, 39, 41, 42, 45, 47, 49, 60, 61, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 82, 84, 86, 90, 92, 94, 95, 96, 97, 98, 99, 102, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 122, 125, 164, 165, 166, 182, 183, 186, 190, 200, 201, 202, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217, 219, 230, 231, 234, 235, 236], "nan": [19, 21, 36, 161, 162], "float": [19, 34, 36, 37, 39, 41, 47, 55, 58, 59, 62, 67, 68, 70, 71, 74, 75, 77, 78, 79, 85, 86, 90, 94, 96, 99, 102, 104, 105, 106, 110, 111, 112, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 149, 150, 151, 152, 153, 154, 157, 160, 164, 167, 168, 169, 170, 172, 173, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 210, 212, 213, 214, 215, 216, 217, 230, 234, 235, 236, 237, 239], "broadcast": [19, 60, 61, 122, 143, 168, 196], "against": [19, 110, 111, 112], "part": [19, 54, 130, 131, 132, 133, 134, 135, 136, 137, 166], "mean": [19, 20, 29, 70, 72, 94, 95, 96, 97, 98, 99, 127, 164, 171, 172, 173, 177, 178, 181, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 198, 202, 203, 205, 210, 234, 235, 257], "everi": [19, 29, 70, 72, 102, 106, 130, 131, 132, 133, 134, 135, 136, 137, 154, 187, 195, 230, 237], "non": [19, 27, 28, 33, 42, 68, 70, 71, 110, 128, 130, 131, 132, 133, 134, 135, 136, 137, 190, 210, 212, 213, 214, 215, 216, 217], "nanmask": 19, "boolean": [19, 28, 70, 71, 72, 130, 131, 132, 133, 134, 135, 136, 137, 138, 157, 160, 164, 169, 201, 203, 210, 212, 215, 219, 240], "cell": 19, "where": [19, 67, 68, 74, 75, 76, 77, 78, 79, 88, 91, 92, 94, 99, 110, 111, 112, 124, 125, 128, 149, 150, 151, 152, 153, 170, 182, 186, 187, 190, 196, 201, 212, 215, 218, 219, 251], "previous": [19, 28, 128, 129], "restor": 19, "later": [19, 245], "desir": [19, 66, 67, 68, 124, 138, 186, 187, 190, 251, 252], "tensor_list": [19, 21], "extend": [19, 21, 90, 175], "largest": [19, 21, 34, 168, 193, 237], "mark": [19, 21, 27, 72, 138], "chain": [19, 21], "most": [20, 28, 43, 160, 166, 183, 196, 198, 250, 251], "essenti": [20, 190], "tm": 20, "nifti": [20, 135, 136, 137, 138, 169], "header": 20, "right": [20, 39, 60, 61, 67, 68, 82, 85, 86, 97, 98, 107, 128, 130, 131, 133, 138, 170, 172, 174, 181, 182, 183, 185, 186, 187, 190, 196, 201, 210, 239, 242], "tr": 20, "smart": 20, "enough": [20, 128], "figur": [20, 174], "unit": [20, 31, 32, 154, 164, 167], "re": [20, 28, 160, 183, 212, 213, 214, 215, 216, 217, 257], "fourth": 20, "repetit": 20, "probabl": [20, 64, 68, 111, 129, 138, 147, 150, 153, 186, 187, 189, 190, 210, 251, 257], "need": [20, 27, 28, 29, 42, 174, 195, 212, 213, 214, 215, 216, 217], "anywai": [20, 170], "slow": [20, 237, 245], "pars": 20, "To": [20, 28, 29, 34, 70, 71, 110, 112, 115, 117, 164, 167, 169, 190, 194, 219], "limit": [20, 27, 45, 82, 149, 151, 152, 158, 161, 162, 245], "connectom": 20, "workbench": 20, "inform": [20, 170, 253], "isn": [20, 170], "generalis": [20, 193], "more": [20, 27, 29, 34, 45, 47, 49, 56, 58, 59, 70, 105, 109, 128, 145, 153, 160, 181, 183, 186, 251], "effici": [20, 50, 56, 58, 59, 105, 245], "dim": [21, 90, 124, 127, 175, 212, 213, 214, 215, 216, 217, 218, 219, 239], "auto": [21, 178, 237], "minimum": [21, 86, 96, 149, 151, 152, 157, 160, 172, 184, 186, 187, 198, 210], "made": [21, 28, 86, 145, 237, 240], "singleton": [21, 124], "ad": [21, 28, 62, 86, 107, 111, 129, 146, 173, 210, 235, 236, 250], "greater": [21, 62, 138, 157, 169, 187, 230], "consolid": 21, "smaller": [21, 62, 67, 68, 86, 169, 186, 190, 237], "befor": [21, 34, 60, 61, 62, 66, 71, 96, 107, 126, 130, 131, 132, 133, 134, 135, 136, 137, 149, 150, 151, 152, 153, 172, 197, 210, 240, 251], "posit": [21, 34, 47, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 94, 95, 96, 97, 98, 99, 107, 108, 109, 110, 111, 112, 130, 131, 133, 134, 135, 136, 137, 154, 171, 172, 173, 184, 192, 210, 212, 213, 214, 215, 216, 217, 227, 233, 234, 235, 236, 237, 239, 249, 254], "polynomi": [22, 77, 114, 115, 116, 117, 237], "detrend": 22, "window_length": 22, "window_start": 22, "lightgrabberbas": 23, "_indexquerymixin": 23, "find_fil": 23, "find": [23, 34, 129, 184, 230, 237], "particular": [23, 24, 27, 160, 164, 219, 235], "enumer": 23, "requir": [24, 27, 28, 56, 58, 59, 96, 105, 111, 114, 138, 142, 169, 172, 181, 196, 235, 236, 237], "cannot": [24, 27, 70, 164, 166, 237], "download": 24, "directli": [24, 28, 33, 43, 183], "script": 24, "share": [24, 71, 82], "hcp_dir": 25, "cpu": [25, 210], "neuro": [26, 200, 201, 202, 203, 204, 205, 250, 254], "magnet": 26, "reson": 26, "behaviour": [26, 33, 68, 70, 107, 147, 164, 190], "suffici": [26, 27, 245], "aris": [26, 27], "split": [26, 239, 245], "throughput": [27, 209], "control": [27, 45, 70, 71, 212, 213, 214], "convey": 27, "atla": [27, 37, 39, 129, 130, 131, 132, 133, 134, 135, 136, 137, 182, 251, 254, 256], "layer": [27, 30, 107, 142, 164, 166, 167, 209, 225, 227, 230, 237, 239, 241, 242, 251, 254, 256], "voxel": [27, 37, 39, 128, 129, 130, 138, 187, 210], "wise": [27, 95, 96, 97, 98, 126, 172, 178, 210], "vertex": [27, 41, 42, 64, 66, 68, 128, 131, 133, 170, 183, 190, 210, 254, 256], "necessit": 27, "memori": [27, 102, 105, 130, 131, 132, 133, 134, 135, 136, 137, 181, 196], "footprint": [27, 181, 196], "On": [27, 201], "consum": 27, "grade": 27, "gpu": [27, 196, 252], "fewer": [27, 210], "10": [27, 28, 41, 42, 96, 170, 172, 232, 237], "reason": [27, 28, 92, 170, 186, 187, 190, 228, 237, 251], "fit": [27, 70, 71, 92, 196, 210, 228, 237], "pose": 27, "signific": [27, 178, 180], "problem": [27, 170, 186, 237], "downstream": [27, 239], "modul": [27, 29, 82, 107, 128, 139, 146, 147, 168, 170, 174, 175, 193, 195, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 233, 234, 235, 237, 239, 240, 249, 250, 251, 254], "impos": [27, 82, 86, 89, 107, 185, 186, 239], "penalti": [27, 181, 186, 187, 192, 230, 239], "relationship": [27, 43, 47, 50, 51, 92, 212, 213, 214, 215, 216, 217], "featur": [27, 74, 75, 76, 77, 78, 79, 174, 187, 196, 225, 227, 239, 245], "nuisanc": [27, 45], "measur": [27, 39, 43, 50, 51, 54, 63, 107, 115, 117, 173, 178, 179, 181, 184, 185, 196, 212, 213, 214, 215, 216, 217, 218, 234, 235, 253], "connect": [27, 43, 64, 65, 67, 68, 170, 179, 190, 250], "estim": [27, 41, 42, 43, 47, 52, 70, 71, 96, 150, 153, 172, 173, 196, 210, 211, 212, 213, 214, 215, 216, 217, 218], "movement": 27, "accur": 27, "stabli": 27, "pearson": [27, 33, 43, 44, 45, 47, 48, 50, 184, 212, 213, 214, 215, 216, 217, 249], "correl": [27, 33, 45, 47, 49, 92, 178, 179, 180, 184, 201, 206, 212, 213, 214, 215, 216, 217, 249, 254, 256], "batch": [27, 29, 36, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 61, 65, 67, 68, 71, 84, 92, 94, 95, 96, 97, 98, 99, 107, 109, 110, 111, 112, 114, 115, 116, 117, 123, 125, 126, 172, 178, 180, 187, 212, 213, 214, 215, 216, 217, 219, 234, 245, 254], "attain": [27, 96, 149, 151, 152, 172, 184, 186, 187], "constraint": [27, 82, 107, 146, 168, 175, 183, 186, 192, 212, 213, 215, 216, 239], "circumv": 27, "ineffici": [27, 237], "usual": 27, "There": [27, 107, 123], "principl": 27, "appear": 27, "interact": [27, 245, 251], "autograd": [27, 28], "work": [27, 71, 96, 102, 103, 104, 105, 106, 107, 154, 160, 172, 182, 196, 209, 220, 257], "streamlin": 27, "approach": [27, 70, 71, 82, 107, 170, 183], "perhap": [27, 210], "involv": [27, 184, 196, 237], "autodifferenti": 27, "alreadi": [27, 68, 138, 186, 187, 190], "better": [27, 123, 138, 174, 183, 196, 251], "solut": [27, 183, 190, 237], "fragment": 27, "high": [27, 60, 61, 71, 164, 167, 234], "demand": 27, "onc": [27, 115, 117, 174], "accumulatingfunct": [27, 29, 247], "cach": [27, 28], "averag": [27, 29, 70, 72, 82, 89, 107, 129, 130, 131, 132, 133, 134, 135, 136, 137, 181, 239], "respect": [27, 28, 29, 45, 62, 92, 129, 170, 210, 245], "backward": [27, 28, 29, 33, 61, 70, 72, 93, 198, 237, 247, 253], "save": [27, 28, 131, 133, 245], "factor": [27, 33, 47, 64, 68, 94, 96, 99, 110, 111, 112, 149, 151, 152, 170, 172, 183, 207, 212, 213, 214, 215, 216, 217, 234, 235, 237, 245], "ratio": 27, "differenti": [27, 28, 35, 36, 37, 41, 42, 43, 85, 93, 108, 111, 164, 166, 173, 184, 190, 220, 235, 237, 245, 249, 251, 252, 253, 254], "backpropag": [27, 28], "compartmentalis": [27, 128], "environ": 27, "possibl": [27, 43, 86, 105, 115, 117, 174, 186, 219, 227, 230, 237], "per": [27, 45, 47, 49, 60, 61, 92, 102, 105, 114, 115, 116, 117, 178, 200, 201, 202, 203, 205, 212, 213, 214, 215, 216, 217, 219, 230, 231, 240], "outsid": [27, 149, 150, 151, 152, 153, 154, 160, 161, 162], "insid": 27, "histori": [27, 28, 234], "track": [27, 28, 29], "therefor": [27, 94, 96, 99, 110, 112, 136, 137, 147, 164, 166, 172, 234, 235], "inact": 27, "introduc": [27, 71, 237], "second": [27, 35, 37, 45, 74, 75, 76, 77, 78, 79, 106, 107, 115, 117, 125, 138, 164, 165, 167, 170, 183, 184, 212, 213, 214, 239, 253, 254], "challeng": 27, "often": [27, 43, 70, 71, 138, 142, 183, 187, 196], "want": [27, 29, 178, 179], "loss": [27, 28, 127, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 235, 250, 254], "stage": [27, 70, 72, 196, 245, 250], "littl": 27, "chanc": [27, 174, 210], "full": [27, 164, 196, 212, 215, 226, 230], "again": [27, 47, 61, 86, 212, 213, 214, 215, 216, 217], "two": [27, 29, 48, 49, 70, 74, 75, 76, 77, 78, 79, 88, 102, 106, 115, 117, 145, 149, 150, 151, 152, 153, 165, 170, 174, 182, 184, 190, 198, 212, 213, 214, 237], "parallel": 27, "wrap": [27, 55, 58, 59, 62, 253], "accumulin": [27, 28, 29, 209], "engin": [28, 29, 250, 254], "accumul": [28, 208, 247, 254, 256], "arg": [28, 29, 67, 68, 176, 177, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "local": [28, 29, 107, 209, 247, 254], "gradient": [28, 29, 33, 42, 96, 149, 150, 151, 152, 153, 166, 172, 173, 184, 209, 235, 237, 247, 251, 254], "instead": [28, 29, 70, 74, 75, 76, 77, 78, 79, 84, 92, 129, 136, 137, 138, 164, 167, 168, 181, 186, 187, 195, 202, 203, 205, 219, 228], "begin": [28, 88, 91, 170, 201, 210, 230], "acc": [28, 29], "model_grad": [28, 29], "retain_dim": [28, 29], "operationalis": [28, 43, 102, 181], "back": [28, 96, 172, 178, 179, 219, 237], "propag": [28, 90], "node": [28, 64, 65, 66, 68, 138, 169, 187, 190], "ii": [28, 33, 44, 46, 48, 164, 167], "ve": [28, 196, 257], "def": [28, 29, 240], "accbwd": 28, "grad_output": 28, "grad_loc": 28, "ll": 28, "quick": 28, "argmap": [28, 209], "lambda": [28, 29, 142, 192, 201], "x": [28, 29, 31, 32, 36, 37, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 74, 75, 76, 77, 78, 79, 85, 86, 87, 89, 92, 94, 95, 96, 97, 98, 99, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 168, 172, 174, 184, 192, 210, 231, 234, 235, 239, 240], "matric": [28, 33, 34, 42, 64, 65, 67, 68, 81, 83, 84, 86, 87, 88, 90, 91, 94, 95, 96, 97, 98, 99, 107, 108, 109, 110, 111, 112, 126, 128, 129, 154, 170, 175, 179, 184, 187, 190, 234, 235, 236, 237, 239, 243], "multipli": [28, 29, 82, 125, 126, 177, 178, 181, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 219, 236, 253], "w": [28, 29, 37, 39, 41, 42, 66, 82, 107, 174, 212, 213, 214, 215, 216, 217, 239], "t0": [28, 29], "rand": [28, 29], "4": [28, 29, 152], "100": [28, 29, 132, 133, 134, 182], "accfwd": 28, "passmap": 28, "fals": [28, 29, 36, 38, 47, 49, 55, 64, 67, 68, 70, 71, 72, 89, 92, 107, 111, 114, 115, 116, 117, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 169, 170, 174, 190, 191, 196, 201, 202, 203, 205, 209, 210, 212, 213, 214, 215, 216, 217, 218, 226, 227, 237, 239, 243, 244], "t1": [28, 29], "6": [28, 29, 55, 58, 59, 62], "shape": [28, 29, 31, 32, 41, 42, 66, 107, 121, 122, 138, 164, 227, 231, 239], "abov": [28, 33, 34, 41, 42, 45, 47, 49, 60, 61, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 82, 84, 90, 92, 94, 95, 96, 97, 98, 99, 107, 109, 110, 111, 112, 115, 117, 125, 178, 181, 183, 200, 201, 202, 203, 204, 205, 236, 240], "bwd": 28, "true": [28, 29, 42, 47, 49, 64, 66, 68, 70, 71, 72, 84, 92, 111, 126, 130, 131, 132, 133, 134, 135, 136, 137, 154, 157, 160, 164, 166, 169, 170, 190, 191, 195, 201, 203, 210, 212, 213, 214, 215, 216, 217, 218, 227, 232, 236, 239, 240, 242, 243], "clear": [28, 92, 130, 131, 135, 136, 137, 228, 245], "capabl": 28, "receiv": [28, 64, 65, 67, 68, 170, 173, 181, 235, 251, 253, 257], "partial": [28, 43, 47, 114, 142, 212, 215, 216, 217, 249], "simplifi": 28, "usag": [28, 250], "callabl": [28, 29, 67, 68, 70, 72, 102, 111, 114, 130, 131, 132, 133, 134, 135, 136, 137, 142, 176, 177, 178, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 198, 212, 213, 214, 215, 216, 217, 219, 230, 237], "bool": [28, 29, 42, 47, 55, 64, 66, 67, 68, 89, 92, 111, 114, 115, 116, 117, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 165, 170, 190, 191, 201, 202, 203, 205, 210, 212, 213, 214, 215, 216, 217, 227, 236, 237, 239, 240], "graph": [28, 33, 41, 42, 64, 65, 67, 68, 107, 183, 187, 190, 196, 239, 242, 249, 254], "retain": [28, 198], "accordingli": [28, 71, 129, 181, 184, 187, 196, 253], "unseen": [28, 69, 70, 72], "static": 28, "ctx": 28, "overridden": [28, 29, 195], "accept": [28, 35, 183, 212, 213, 214, 215, 216, 217, 237], "context": [28, 29, 61, 253], "arbitrari": [28, 177, 181, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 198, 253], "though": [28, 86, 210, 214, 217], "enforc": [28, 34, 82, 107, 115, 117, 182, 212, 213, 215, 216, 237, 239], "save_for_backward": 28, "intend": 28, "equival": [28, 45, 64, 68, 82, 107, 115, 117, 190, 192, 196, 212, 213, 214, 215, 216, 239, 252], "vjp": 28, "save_for_forward": 28, "jvp": 28, "alia": [28, 201, 220], "r": [28, 44, 46, 48, 64, 65, 68, 77, 79, 82, 90, 104, 105, 106, 107, 115, 117, 126, 164, 167, 174, 175, 190, 210, 239], "grad": [28, 29], "needs_input_grad": 28, "whether": [28, 70, 71, 72, 89, 115, 117, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 240], "reduce_dim": 29, "autouse_domain_gradi": 29, "model_output": 29, "model_param": 29, "let": 29, "next": [29, 72, 86, 170], "interest": [29, 45, 187, 253, 257], "reduc": [29, 71, 127, 128, 184, 186, 187, 190, 210], "explicitli": [29, 33, 35, 74, 75, 76, 77, 78, 79, 115, 117, 132, 142, 249], "protect": 29, "declar": [29, 219], "out0": 29, "out1": 29, "sum": [29, 68, 86, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 168, 177, 185, 187, 190, 196, 210], "overal": [29, 124, 130, 132, 134, 138, 170, 174, 192, 193, 194, 245], "weight": [29, 35, 36, 37, 38, 39, 41, 42, 45, 47, 49, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 102, 107, 115, 117, 118, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 147, 164, 173, 174, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 210, 212, 213, 214, 215, 216, 217, 218, 219, 224, 227, 230, 231, 234, 235, 237, 239, 249, 251], "16": 29, "22": 29, "acc_weight": 29, "reset": [29, 247], "zero_grad": [29, 247], "still": [29, 70, 107, 138, 250], "respons": [29, 164, 166], "facilit": [29, 138, 253], "correct": [29, 92, 228], "reduct": [29, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 209, 210], "ax": [29, 36, 38, 83, 88, 89, 90, 95, 96, 97, 98, 124, 125, 138, 145, 168, 172, 192, 193, 194, 196, 212, 213, 214], "unus": [29, 86, 183], "total": [29, 64, 65, 67, 68, 124, 164, 165, 166, 170, 187, 190, 219], "although": [29, 92, 106, 138, 195, 228], "recip": [29, 195], "afterward": [29, 195], "sinc": [29, 195], "former": [29, 195], "care": [29, 195], "regist": [29, 195, 240], "hook": [29, 195], "while": [29, 31, 32, 47, 64, 67, 68, 70, 71, 72, 115, 117, 131, 133, 160, 164, 166, 184, 185, 190, 192, 195, 210, 212, 213, 214, 215, 216, 217, 219, 237], "latter": [29, 195], "silent": [29, 195], "set_to_non": 29, "zero": [29, 36, 53, 71, 85, 90, 104, 111, 149, 169, 183, 210, 212, 213, 214, 215, 216, 217, 219, 234, 249], "similar": [29, 33, 73, 107, 165, 184, 190, 196, 212, 213, 214, 215, 216, 217, 227, 239], "optim": 29, "detail": [29, 33, 48, 92, 101, 105, 115, 117, 128, 132, 140, 141, 146, 164, 167, 168, 173, 175, 219, 246, 250], "neural": [30, 174, 240, 249, 250, 251, 254], "network": [30, 68, 174, 187, 190, 225, 237, 240, 249, 250, 251, 254], "amplitude_tanh": [30, 249], "amplitude_atanh": [30, 249], "corrnorm": [30, 249], "isochor": [30, 249], "psd": [30, 249], "activ": [31, 32, 33, 34, 146, 147, 168, 170, 175, 207, 239, 249, 254, 256], "invers": [31, 43, 47, 50, 51, 75, 78, 84, 94, 97, 99, 149, 150, 151, 152, 153, 154, 164, 166, 172, 174, 212, 213, 214, 215, 216, 217, 219, 249], "hyperbol": [31, 32, 149, 151], "tangent": [31, 32, 93, 94, 96, 99, 149, 151, 172, 173, 212, 213, 214, 215, 216, 217, 233, 234, 235], "arctang": 31, "amplitud": [31, 32, 61, 121, 122, 149, 150, 162, 164, 166, 203, 219], "absolut": [31, 32, 86, 178, 179, 198], "mathrm": [31, 32, 33, 85, 115, 117, 184, 185], "arctanh": 31, "phase": [31, 32, 53, 54, 55, 56, 58, 59, 121, 122, 162, 164, 167, 219, 249], "complex": [31, 32, 54, 121, 122, 149, 150, 162, 166, 219], "preserv": [31, 32, 160, 236], "open": [31, 32, 169, 251], "disc": [31, 32], "plane": [31, 32, 54], "origin": [31, 32, 34, 60, 61, 70, 71, 72, 94, 96, 99, 103, 110, 111, 112, 154, 160, 168, 172, 178, 179, 196, 209, 212, 213, 215, 216, 234, 235], "circumfer": [31, 32], "infin": [31, 149, 150, 151, 152, 153, 170], "As": [31, 32, 33, 34, 41, 42, 45, 47, 49, 60, 61, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 82, 84, 90, 92, 94, 95, 96, 97, 98, 99, 106, 107, 109, 110, 111, 112, 115, 117, 125, 183, 200, 201, 202, 203, 204, 205, 236, 240], "elementwis": [31, 32, 68, 74, 123, 150, 153, 177, 186, 190, 196, 236], "conserv": [31, 32, 111], "tanh": [32, 79, 146, 164, 166, 168, 175, 210, 219], "distant": 32, "region": [32, 37, 39, 130, 131, 133, 134, 135, 136, 137, 138, 181, 182, 187, 210], "gradpath": 33, "both": [33, 93, 122, 124, 126, 175, 202, 207, 212, 213, 214, 219, 230, 237], "divid": [33, 34, 70, 168, 170, 191], "a_": 33, "ij": [33, 44, 46, 48, 64, 68, 190], "product": [33, 68, 82, 102, 106, 107, 125, 126, 164, 166, 167, 174, 190, 236, 239], "sign": [33, 67, 68, 86, 170, 190, 239, 243], "squar": [33, 47, 74, 81, 83, 87, 88, 89, 92, 94, 99, 108, 112, 174, 183, 196, 210, 212, 213, 214, 215, 216, 217, 228, 234, 235, 236], "diagon": [33, 47, 50, 51, 66, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 88, 90, 91, 107, 111, 175, 183, 190, 212, 213, 214, 215, 216, 217, 236, 237, 239], "bar": [33, 95, 96, 97, 98, 234], "_": [33, 39, 44, 46, 48, 64, 68, 74, 181, 190], "frac": [33, 34, 39, 44, 46, 48, 60, 61, 65, 66, 67, 74, 75, 77, 78, 79, 82, 85, 95, 97, 98, 107, 172, 180, 181, 190, 196, 201, 239], "sgn": 33, "jj": [33, 44, 46, 48], "sqrt": [33, 34, 44, 46, 48, 74, 112, 180], "epsilon": 33, "covari": [33, 44, 46, 48, 50, 71, 75, 78, 92, 164, 184, 199, 200, 201, 202, 204, 205, 212, 213, 214, 215, 216, 217, 249, 254, 256], "overriden": 33, "below": [33, 196, 237], "version": [33, 38, 187, 189, 194], "laplacian": [33, 41, 42, 63, 183, 249], "p": [33, 34, 65, 67, 74, 75, 76, 77, 78, 79, 181, 190, 192, 193, 194, 197, 198], "row": [33, 34, 37, 82, 84, 90, 94, 95, 96, 97, 98, 99, 107, 109, 110, 111, 112, 126, 130, 131, 133, 134, 135, 136, 137, 164, 175, 181, 187, 196, 213, 216, 242, 243], "divis": [33, 47, 196, 212, 213, 214, 215, 216, 217], "mostli": [33, 62, 90], "outer": [33, 82, 107, 125, 236, 239], "flow": 33, "volum": [34, 128, 135, 136, 137, 138], "max_condit": 34, "softmax_temp": 34, "symmetr": [34, 47, 80, 82, 84, 86, 87, 88, 91, 94, 99, 107, 109, 110, 111, 112, 154, 174, 175, 190, 198, 201, 212, 213, 214, 215, 216, 217, 234, 235, 236, 238, 239, 249, 254], "definit": [34, 74, 75, 76, 77, 78, 79, 84, 86, 94, 96, 99, 107, 109, 110, 111, 112, 172, 177, 184, 234, 235, 236, 239], "eigendecomposit": [34, 41, 42, 86, 183, 201], "eigenvalu": [34, 41, 42, 85, 86, 94, 96, 99, 109, 110, 111, 112, 172, 184, 234, 235, 237], "n": [34, 36, 41, 42, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 74, 75, 76, 77, 78, 79, 91, 92, 94, 95, 96, 97, 98, 99, 102, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 124, 125, 164, 165, 166, 167, 172, 180, 200, 201, 202, 203, 204, 205, 212, 213, 214, 215, 216, 217, 219, 234, 235, 236, 237, 239, 243], "v_": [34, 128, 190], "determin": [34, 41, 47, 70, 71, 115, 117, 170, 181, 190, 191, 212, 213, 214, 215, 216, 217, 219, 237, 253, 254], "rescal": [34, 203], "softmax": [34, 68, 129, 147, 150, 153, 170, 186, 187, 190, 232, 251], "maxim": 34, "condit": [34, 43, 50, 51, 92, 94, 96, 99, 110, 111, 112, 138, 172, 212, 213, 214, 234, 235, 249], "ellipsoid": 34, "eccentr": 34, "reconstitut": [34, 86, 122], "eigenvector": 34, "procedur": [34, 62, 71, 160, 170, 184, 201, 245], "infti": 34, "maximum": [34, 47, 62, 67, 68, 70, 71, 72, 77, 82, 86, 96, 102, 105, 107, 115, 116, 117, 130, 131, 132, 133, 134, 135, 136, 137, 149, 151, 152, 157, 160, 164, 168, 170, 172, 181, 184, 186, 190, 192, 212, 213, 214, 215, 216, 217, 237], "permiss": 34, "among": [34, 86, 170, 184, 185, 190, 212, 213, 214, 215, 216, 217, 239], "convex": [34, 94, 96, 99, 111, 154, 172, 184, 234, 235, 237], "smallest": [34, 86], "alwai": [34, 42, 177, 184, 187, 203], "isotrop": [34, 75, 102, 105, 168], "scale": [34, 41, 74, 75, 77, 78, 79, 86, 101, 105, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 149, 151, 152, 154, 156, 158, 159, 160, 161, 162, 168, 174, 175, 183, 190, 237], "temperatur": [34, 170], "intrins": 35, "mesh": [35, 131, 133, 138], "grid": [35, 38], "cmass_reference_displacement_grid": [35, 38], "cmass_coor": [35, 38, 249], "diffus": [35, 41, 42, 249], "cmass_reference_displac": [35, 38], "arrai": [35, 62, 102, 105, 122, 125, 146, 168, 169, 170, 249], "na_rm": [36, 38], "regularis": [36, 47, 181, 190, 191, 195, 196, 198, 212, 213, 214, 215, 216, 217, 218, 234, 237, 250, 254], "close": [36, 41, 128, 150, 153, 169, 181, 183, 184, 185, 220, 230, 245], "k_1": 36, "k_2": 36, "k_n": 36, "interven": [36, 45, 47, 49, 60, 61, 65, 67, 68, 92, 94, 95, 96, 97, 98, 99, 102, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 212, 213, 214, 215, 216, 217, 219], "k_i": [36, 65], "3": [36, 41, 70, 77, 103, 104, 106, 125, 149, 150, 151, 153, 164, 192, 222, 237, 239], "dimension": [36, 47, 181, 212, 213, 214, 215, 216, 217], "span": [36, 92], "three": [36, 131, 133, 181, 245], "undefin": [36, 184], "how": [36, 174, 245], "left": [36, 39, 60, 61, 67, 68, 82, 85, 86, 97, 98, 107, 128, 130, 131, 133, 138, 172, 174, 181, 182, 183, 185, 186, 187, 190, 196, 201, 210, 239, 242], "intact": 36, "cmass": [37, 38, 39, 181, 182, 249, 254], "coor": [37, 38, 39, 101, 102, 103, 104, 105, 130, 131, 133, 134, 135, 136, 137, 181, 210], "radiu": [37, 38, 39, 104, 105, 106, 181, 182], "l": [37, 39, 41, 42, 64, 66, 68, 82, 107, 190, 210, 213, 216, 239], "embed": [37, 39, 42, 102, 105, 236], "project": [37, 71, 92, 93, 94, 96, 99, 172, 173, 181, 183, 186, 201, 210, 212, 213, 214, 215, 216, 217, 233, 234, 235, 250], "onto": [37, 71, 181, 186, 196], "sphere": [37, 39, 101, 102, 103, 104, 105, 106, 154, 181, 249, 254], "ref": [38, 130, 131, 133, 134, 135, 136, 137], "explicit": [38, 82, 107, 124], "norm": [39, 74, 96, 102, 154, 164, 167, 168, 172, 177, 181, 182, 185, 192, 193, 194, 197, 198, 236, 239], "floor": [39, 181], "compact": [39, 185, 253, 254], "score": [39, 181], "mathbf": [39, 65, 68, 85, 181, 183, 186, 187, 190, 196, 201], "interc": [39, 45, 64, 65, 68, 74, 75, 76, 77, 78, 79, 82, 107, 109, 110, 112, 181, 183, 186, 187, 190, 201, 210, 239, 242], "circ": [39, 68, 181, 183, 186, 187, 190, 196], "c": [39, 47, 64, 68, 82, 90, 102, 105, 107, 114, 115, 116, 117, 126, 175, 181, 183, 190, 215, 216, 217, 219, 234, 235, 237, 243], "ac": [39, 181], "col": [39, 181, 242], "distanc": [39, 73, 102, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 137, 160, 181, 183, 185, 198], "closer": [39, 230], "about": [39, 196, 219, 253], "brainspac": [40, 41], "laplacian_eigenmap": [40, 41, 249], "diffusion_map": [40, 42, 249], "connectopi": [41, 42, 249, 253, 254], "edge_index": [41, 42, 66], "k": [41, 42, 62, 64, 68, 114, 115, 116, 117, 125, 165, 187, 190], "alpha": [41, 42, 257], "diffusion_tim": 41, "solver": [41, 42, 210, 237], "lobpcg": [41, 42], "niter_svd": 41, "500": 41, "manifold": [41, 42, 93, 96, 102, 172, 234, 235, 249, 254], "veri": [41, 111, 168, 196, 230], "minor": 41, "anisotrop": 41, "kind": [41, 183], "algorithm": [41, 42, 96, 170, 172, 183], "eigenmap": [41, 42, 183], "walk": 41, "style": 41, "fokker": 41, "planck": 41, "laplac": [41, 251, 254], "beltrami": 41, "vertic": [41, 42, 64, 65, 66, 67, 68, 128, 131, 133, 170, 183, 187, 190, 239, 241, 242, 243], "edg": [41, 42, 64, 65, 66, 67, 68, 170, 179, 190], "q": [41, 42, 68, 183, 201], "adjac": [41, 42, 62, 65, 66, 67, 68, 190, 197, 242], "affin": [41, 42, 155, 183, 192, 251], "longtensor": [41, 42, 66], "multi": [41, 47, 138, 181, 186, 187, 212, 213, 214, 215, 216, 217, 237, 251], "consid": [41, 42, 67, 68, 70, 71, 110, 111, 112, 160, 190, 192, 194], "valid": [41, 138, 185, 210, 245], "eigh": [41, 42], "svd": [41, 42, 86, 111, 170, 184, 240], "low": [41, 42, 60, 61, 82, 107, 164, 167, 238, 239], "rank": [41, 42, 82, 107, 174, 226, 236, 238, 239], "eigensolv": [41, 42], "spars": [42, 66, 74, 75, 76, 77, 78, 79, 125, 126, 170], "extrem": [42, 160, 196, 237, 251], "workaround": 42, "degre": [42, 47, 65, 66, 67, 68, 77, 114, 115, 116, 117, 183, 184, 190, 212, 213, 214, 215, 216, 217, 237], "statist": [43, 212, 213, 214, 215, 216, 217], "localis": 43, "At": [43, 235, 250], "whatev": 43, "deleg": 43, "corrcoef": 43, "remov": [43, 45, 92, 210], "alias": 43, "improv": [43, 49, 187, 245], "corr": [43, 47, 212, 215, 216, 217, 249], "partialcov": [43, 249], "partialcorr": [43, 45, 47, 212, 215, 216, 217, 249], "pairedcov": [43, 48, 212, 213, 214, 249], "pairedcorr": [43, 212, 213, 214, 249], "conditionalcov": [43, 44, 212, 213, 214, 249], "conditionalcorr": [43, 45, 212, 213, 214, 249], "precis": [43, 47, 191, 212, 215, 216, 217, 249], "cov": [44, 45, 46, 48, 49, 50, 51, 52, 200, 201, 204, 212, 213, 214, 215, 216, 217, 218, 249, 254, 256], "y": [44, 45, 48, 49, 92, 103, 104, 106], "complet": [44, 45, 46, 47, 48, 49, 50, 51, 52, 102, 105, 130, 131, 133, 135, 136, 137], "characterist": [44, 45, 46, 49, 50, 51, 52], "hat": [44, 46, 48, 94, 96, 99, 172, 234, 235], "sigma": [44, 45, 46, 47, 48, 75, 78, 129, 130, 131, 132, 133, 134, 135, 136, 137, 201], "mathbb": [44, 46, 48, 64, 65, 68, 190, 210], "r_": [44, 46, 48, 180], "sigma_": 45, "xx": 45, "yy": 45, "xy": 45, "schur": [45, 236], "complement": [45, 62, 212, 215, 230], "residualis": [45, 170, 249, 254, 256], "plu": [45, 91, 146], "intercept": [45, 114, 115, 116, 117, 212, 213, 214], "term": [45, 47, 65, 75, 78, 82, 107, 114, 115, 116, 117, 174, 184, 190, 212, 213, 214, 215, 216, 217, 237, 239], "interpret": [45, 50, 51, 75, 78, 138, 164, 167, 184, 190, 210, 212, 213, 214, 215, 216, 217, 251], "effect": [45, 49, 61, 62, 90, 149, 175, 187, 191, 210, 212, 213, 214], "c_x": [45, 49, 92], "ob": [45, 47, 49, 60, 61, 92, 114, 115, 116, 117], "channel": [45, 47, 49, 60, 61, 90, 92, 102, 105, 107, 114, 115, 116, 117, 173, 174, 175, 191, 200, 201, 202, 203, 205, 212, 213, 214, 215, 216, 217, 219, 227, 234, 235, 239], "c_y": [45, 49, 92], "influenc": [45, 210], "wish": [45, 111, 142], "penultim": [45, 47, 49, 92, 115, 117, 212, 213, 214, 215, 216, 217], "rowvar": [45, 47, 49, 92, 212, 213, 214, 215, 216, 217, 218], "bia": [45, 47, 49, 107, 115, 117, 118, 212, 213, 214, 215, 216, 217, 218, 227, 237, 239], "ddof": [45, 47, 49, 212, 213, 214, 215, 216, 217, 218], "l2": [45, 47, 49, 101, 102, 183, 191, 192, 193, 194, 197, 198, 212, 213, 214, 215, 216, 217, 218], "empir": [45, 47, 48, 49, 52, 174, 212, 213, 214, 215, 216, 217], "thank": [47, 138], "19037": 47, "bias": [47, 107, 212, 213, 214, 215, 216, 217], "unweight": [47, 212, 213, 214, 215, 216, 217], "unbias": [47, 128, 212, 213, 214, 215, 216, 217], "freedom": [47, 212, 213, 214, 215, 216, 217], "coupl": [47, 64, 82, 107, 147, 190, 212, 213, 214, 215, 216, 217, 239], "semidefinit": [47, 82, 85, 86, 94, 95, 96, 97, 98, 99, 107, 108, 111, 154, 172, 173, 184, 212, 213, 214, 215, 216, 217, 234, 235, 236, 237, 239, 249, 251, 254, 256], "rel": [47, 49, 153, 160, 164, 167, 179, 184, 212, 213, 214, 215, 216, 217, 234], "off": [47, 50, 51, 90, 175, 183, 212, 213, 214, 215, 216, 217], "band": [47, 90, 164, 167, 175, 212, 213, 214, 215, 216, 217, 251, 254], "inter": [47, 64, 190, 201, 212, 213, 214, 215, 216, 217], "nonneg": [47, 67, 68, 96, 111, 150, 153, 172, 178, 181, 184, 190, 210, 212, 213, 214, 215, 216, 217, 236, 237, 239], "likelihood": [47, 184, 212, 213, 214, 215, 216, 217], "intermedi": [47, 181, 196, 212, 213, 214, 215, 216, 217], "offer": 49, "success": 50, "accompani": 50, "negat": [50, 51, 151, 169, 184], "convolv": [53, 60, 102, 105, 115, 117, 118, 130, 131, 132, 133, 134, 135, 136, 137, 138], "product_filt": [53, 61, 249], "product_filtfilt": [53, 219, 249], "unwrap": [53, 55, 58, 59, 249], "analytic_sign": [53, 55, 56, 57, 58, 59, 249], "hilbert_transform": [53, 54, 55, 56, 58, 59, 249], "envelop": [53, 54, 55, 57, 58, 59, 249], "instantaneous_phas": [53, 54, 55, 56, 57, 58, 249], "instantaneous_frequ": [53, 54, 55, 56, 57, 59, 249], "env_inst": [53, 54, 56, 57, 58, 59, 249], "fourier": [54, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 249, 254], "analyt": [54, 55, 56, 58, 59, 237], "helic": 54, "Its": [54, 138], "real": [54, 61, 122, 166, 201, 203], "imaginari": 54, "relat": 54, "hilbert": [54, 57], "properti": [54, 66, 184, 199, 251], "quickli": [54, 237], "instantan": [54, 55, 56, 58, 59], "frequenc": [54, 55, 56, 57, 58, 59, 60, 61, 70, 71, 164, 165, 166, 167, 187, 200, 203, 204, 249, 251, 254, 256], "containin": 54, "compon": [54, 55, 56, 57, 58, 59, 61, 121, 170, 203, 250], "f": [55, 58, 164, 165, 166, 167, 200, 203, 204, 219, 220, 240], "283185307179586": [55, 58, 59, 62], "return_instantaneous_phas": 55, "decompos": [55, 86, 121], "pi": [55, 58, 59, 62], "rang": [55, 58, 59, 62, 146, 149, 150, 151, 152, 153, 154, 160, 161, 162, 168, 175], "domain": [60, 61, 94, 96, 99, 110, 112, 129, 140, 141, 142, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 172, 173, 175, 181, 186, 187, 203, 210, 213, 216, 234, 235, 249, 251, 254, 256], "lfloor": [60, 61], "rfloor": [60, 61], "analogu": [60, 61], "gain": [60, 61, 164, 166, 219], "bin": [60, 61, 70, 71, 164, 165, 166, 187, 219], "spectrum": [60, 61, 71, 164, 166, 200, 202, 203, 204, 205, 219], "rule": [60, 61], "fft": [60, 61], "rfft": [60, 61], "irfft": [60, 61], "digit": 61, "revers": [61, 72, 219], "copi": [61, 157, 160], "quadrat": [61, 74, 174], "strictli": [61, 64, 68, 164, 166, 190, 234], "delai": [61, 164, 167], "simpli": [61, 187], "depend": [61, 164, 167, 201, 203, 212, 213, 214, 215, 216, 217], "discont": 62, "delta": [62, 146, 168, 190], "contigu": 62, "discontinu": 62, "half": [62, 185], "radian": [62, 121, 122], "achiev": 62, "numpi": [62, 87], "exceed": 62, "girvan_newman_nul": [63, 67, 68, 190, 249], "modularity_matrix": [63, 249], "coaffili": [63, 68, 190, 249], "commun": [63, 67, 68, 170, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 249], "relaxed_modular": [63, 67, 249], "graph_laplacian": [63, 249], "c_i": 64, "c_o": [64, 68, 115, 117, 190], "exclude_diag": [64, 68, 190], "structur": [64, 67, 68, 71, 90, 169, 175, 190, 212, 213, 215, 216, 240], "affili": [64, 68, 187, 190], "sink": [64, 65, 67, 68, 190], "coeffici": [64, 74, 75, 77, 78, 79, 82, 107, 167, 237], "omega": [64, 77, 94, 99, 183, 234, 235], "h": [64, 68, 82, 107, 174, 190, 239], "propos": [64, 68, 183, 190], "partit": [64, 67, 68, 190], "emit": [64, 65, 67, 68], "uncertainti": [64, 68, 190], "jk": [64, 68, 190], "j": [64, 68, 126, 185, 187, 189, 190], "binari": [64, 68, 169, 190, 212, 213, 214], "reflect": [64, 68, 190], "determinist": [64, 68, 170, 186, 187, 190], "l_": [64, 68, 128, 190], "assort": [64, 68, 190], "preferenti": [64, 68, 190], "disaffili": [64, 68, 190], "self": [64, 68, 129, 190, 240], "link": [64, 68, 257], "max": [64, 67, 68, 149, 151, 152, 157, 160, 168, 190], "girvan": [65, 67, 68], "newman": [65, 67, 68], "null": [65, 67, 68, 138, 182, 190], "cut": [65, 190], "stub": 65, "randomli": [65, 164, 170, 190, 210, 212, 213, 214, 215, 216, 217, 230], "rewir": [65, 190], "k_o": 65, "2m": [65, 67], "p_": [65, 190], "gn": [65, 190], "compris": [65, 67, 138, 245], "num_nod": 66, "applic": [66, 186, 210, 220], "tend": [66, 196], "domin": 66, "analysi": [66, 184], "widetild": [66, 110, 111, 112, 201], "undirect": [66, 190], "duplic": 66, "swap": 66, "get_laplacian": 66, "torch_geometr": 66, "gamma": [67, 68, 74, 75, 77, 78, 79, 190, 237], "modular": [67, 68], "b": [67, 68, 125, 190, 220], "resolut": [67, 68, 190], "larger": [67, 68, 70, 71, 102, 160, 169, 190], "small": [67, 68, 111, 190], "mai": [67, 68, 92, 177, 183, 190], "necessari": [67, 68, 138, 190, 218, 237], "normalise_modular": [68, 190], "normalise_coaffili": [68, 190], "relax": 68, "linkag": [68, 190], "revert": [68, 190], "standard": [68, 75, 101, 129, 164, 173, 190, 201, 204, 205, 210, 235, 236], "hadamard": [68, 190], "renormalis": [68, 190, 236, 242, 243], "unnecessari": [68, 190], "been": [68, 96, 172, 190, 237], "extrapol": 69, "censor": 69, "hybrid_interpol": [69, 249], "spectral": [69, 71, 199, 223, 249], "weighted_interpol": [69, 249], "spectral_interpol": [69, 249], "max_weighted_stag": [70, 222], "map_to_kernel": [70, 72, 222, 224], "oversampling_frequ": [70, 71, 222, 223], "8": [70, 71, 222, 223], "maximum_frequ": [70, 71, 222, 223], "frequency_thresh": [70, 222], "handle_fail": [70, 71], "orig": 70, "hybrid": [70, 222], "awai": [70, 130, 131, 135, 136, 137, 186], "seen": [70, 72, 115, 117, 129, 142, 146, 147, 168, 175, 212, 213, 214, 215, 216, 217, 218, 219], "successfulli": 70, "imput": [70, 72, 249, 254], "kernel": [70, 72, 74, 75, 76, 77, 78, 79, 101, 102, 105, 107, 115, 117, 129, 130, 131, 132, 133, 134, 135, 136, 137, 210, 237, 238, 249, 254], "proce": [70, 72, 102, 130, 236, 245], "group": [70, 105, 119, 245], "good": [70, 71, 72, 174, 237], "bad": [70, 71, 72, 234], "flag": [70, 71, 72, 130, 131, 132, 133, 134, 135, 136, 137], "govern": [70, 72], "boxcar": [70, 72], "integ": [70, 72, 128, 138], "convolut": [70, 71, 72, 101, 107, 115, 117, 129, 174, 219, 227, 232, 249, 254], "neighbour": [70, 72], "sine": [70, 71], "cosin": [70, 71, 74], "spectra": [70, 71, 164], "oversampl": [70, 71], "fraction": [70, 71, 239], "nyquist": [70, 71, 164, 167], "orthogon": [70, 71, 92, 183, 184], "basi": [70, 71, 107, 114, 115, 116, 117, 184], "spuriou": [70, 71], "varianc": [70, 71, 92, 115, 117, 146, 160, 168], "captur": [70, 71], "thresh": [70, 71, 223], "rais": [70, 71, 114, 116, 117], "fail": [70, 84], "except": 70, "interpol": [71, 72, 168, 222, 223, 224, 249, 254, 256], "sampling_period": [71, 223], "corrupt": 71, "proxi": 71, "reconstruct": [71, 86, 170], "previou": [71, 96, 172, 234], "anish": 71, "mitra": 71, "jonathan": 71, "power": [71, 114, 116, 117], "turn": [71, 184], "lomb": 71, "scargl": 71, "periodogram": 71, "temporarili": 71, "omiss": 71, "due": [71, 111, 112], "artefact": 71, "content": [71, 138], "disrupt": 71, "autocorrel": 71, "artefactu": 71, "outlier": [71, 160], "arguabl": 71, "linearli": [71, 231], "relev": [71, 129, 176], "plai": 71, "role": 71, "easili": [71, 251], "your": [71, 186, 187, 240, 252], "unsqueez": [71, 124], "consecut": 71, "start_stag": [72, 224], "max_stag": [72, 224], "progress": 72, "longer": [72, 174], "initi": [72, 82, 107], "metric": [73, 101, 102, 107, 185, 239], "linear_kernel": [73, 249], "polynomial_kernel": [73, 249], "sigmoid_kernel": [73, 249], "gaussian_kernel": [73, 78, 249], "rbf_kernel": [73, 75, 249], "cosine_kernel": [73, 249], "x0": [74, 75, 76, 77, 78, 79], "x1": [74, 75, 76, 77, 78, 79], "theta": [74, 75, 76, 77, 78, 79, 94, 99, 183, 234, 235], "parameteris": [74, 75, 76, 77, 78, 79, 183, 186, 230, 249, 254], "x_0": [74, 75, 76, 77, 78, 79], "x_1": [74, 75, 76, 77, 78, 79], "k_": [74, 75, 76, 77, 78, 79], "a_i": 74, "dens": [74, 75, 76, 77, 78, 79, 107, 125, 126], "m": [74, 75, 76, 77, 78, 79, 125, 174, 252], "unparameteris": [74, 75, 76, 77, 78, 79], "gram": [74, 75, 76, 77, 78, 79, 237], "gaussian": [75, 101, 105, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 168, 204, 205, 210, 237], "deviat": [75, 129, 164, 173, 210, 235, 236], "pairwis": [75, 78, 102, 106, 183, 185], "linear": [76, 92, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 155, 156, 196, 208, 225, 227, 231, 232, 237, 251, 256], "offset": [77, 79, 83, 88, 91, 212, 213, 215, 216], "rbf": [78, 237], "sigmoid": [79, 152, 190, 210, 230, 237], "special": 80, "invert_spd": [80, 249], "spd": [80, 111, 249], "expand_out": [80, 249], "recondition_eigenspac": [80, 249], "delete_diagon": [80, 239, 249], "fill_diagon": [80, 249], "toeplitz": [80, 212, 213, 215, 216, 249, 251, 254], "sym2vec": [80, 249], "vec2sym": [80, 249], "squareform": [80, 249], "delet": [81, 239], "infer": [81, 83, 138], "symmetri": [82, 89, 107, 174, 182, 212, 213, 215, 216, 239, 243], "inner": 82, "height": [82, 107, 146], "width": [82, 107, 129, 130, 131, 132, 133, 134, 135, 136, 137, 168, 210], "expans": [82, 107, 239], "toggl": [82, 107, 218, 237], "neg": [82, 86, 107, 112, 149, 184, 190, 192, 210, 239], "cross": [82, 106, 107, 239], "skew": [82, 89, 107, 239], "subtract": [82, 107], "guarante": [82, 86, 94, 96, 99, 107, 110, 112, 172, 234, 235, 236], "main": [83, 88, 91, 128, 212, 213, 215, 216, 237, 252], "force_invert_singular": 84, "invert": [84, 212, 213, 214, 215, 216, 217], "choleski": 84, "decomposit": [84, 85, 86, 111, 184], "recompos": [84, 109, 110, 112], "singular": [84, 85, 86, 110, 112, 184, 193, 212, 213, 214, 215, 216, 217, 237], "moor": 84, "penros": 84, "pseudoinvers": 84, "ainv": 84, "psi": [85, 94, 96, 99, 110, 111, 112, 172, 184, 234, 235], "xi": [85, 110, 111, 112, 184], "recondit": [85, 94, 96, 99, 110, 111, 112, 184, 234, 235, 237], "eigenspac": [85, 111], "help": [85, 170, 234, 245], "stabilis": 85, "x_i": 85, "sim": 85, "uniform": [85, 142, 174, 230], "foral": 85, "nonzero": [85, 125, 178, 179, 181, 184, 210, 212, 213, 215, 216], "nondegener": [85, 110, 112, 184], "ep": [86, 96, 172], "1e": [86, 96, 150, 153, 172], "06": [86, 96, 172], "eig": 86, "symmetris": [86, 89, 91, 107], "diagonalis": [86, 109, 110, 112], "threshold": [86, 96, 169, 172, 178, 179, 230], "theori": 86, "up": [86, 114, 116, 174, 213, 216], "error": [86, 107, 111, 112, 161, 162, 196], "recomposit": 86, "margin": [86, 237], "occasion": 86, "insuffici": [86, 183], "avoid": [86, 149, 150, 151, 152, 153, 161, 162], "numer": [86, 93, 111, 112, 130, 131, 133, 134, 135, 136, 137], "convert": [87, 88, 91, 103, 104, 240], "unlik": 87, "matlab": 87, "vectoris": 87, "sym": [88, 91], "ravel": [88, 91], "upper": [88, 91, 169], "triangl": [88, 91, 186], "vec": [88, 91, 94, 99, 234, 235], "delin": 89, "antisymmetri": 89, "fill_valu": [90, 175], "element": [90, 91, 94, 99, 110, 111, 112, 125, 126, 147, 164, 175, 178, 185, 187, 192], "unless": [90, 187, 237, 249], "unspecifi": 90, "length": [91, 147, 164, 219], "choos": 91, "place": [91, 129, 142, 146, 147, 165, 166, 168, 173, 175, 186, 230, 239], "resid": [92, 130, 131, 132, 133, 134, 135, 136, 137], "driver": [92, 210], "gelsd": 92, "ordinari": 92, "incorrect": [92, 166, 228], "linalg": [92, 154, 210, 228], "lstsq": [92, 210, 228], "pinv": [92, 228], "orthogonalis": 92, "subspac": [92, 93, 94, 99, 173, 233, 234, 235], "explanatori": 92, "explain": 92, "routin": [92, 251], "solv": [92, 170, 237], "lapack": [92, 210], "proper": [93, 154, 233, 234, 235], "riemann": 93, "nearli": [93, 160], "exhibit": 93, "instabl": 93, "tangent_project_spd": [93, 94, 249], "cone_project_spd": [93, 99, 249], "mean_euc_spd": [93, 249], "mean_harm_spd": [93, 249], "mean_logeuc_spd": [93, 249], "mean_geom_spd": [93, 249], "cone": [94, 95, 96, 97, 98, 99, 171, 172, 173, 212, 213, 214, 215, 216, 217, 233, 234, 235, 236, 249, 254], "tangenc": [94, 96, 99, 172, 173, 234, 235], "exp": [94, 98, 109, 234, 235], "exponenti": [94, 98, 108, 109, 168, 172, 212, 213, 215, 216], "promot": [94, 96, 99, 110, 111, 112, 172, 181, 184, 185, 186, 190, 196, 197, 210, 234, 235, 251], "euclidean": [95, 96, 97, 98, 102, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 172, 181, 192, 193, 194, 197, 198, 235, 251], "familiar": [95, 172, 190], "arithmet": [95, 96, 172], "sum_": [95, 97, 98, 172, 182, 185], "x_": [95, 97, 98, 172], "max_it": [96, 172], "geometr": [96, 172], "descent": [96, 172], "geodes": [96, 106, 172, 181], "brief": [96, 172], "converg": [96, 172], "frobeniu": [96, 172, 193], "harmon": [97, 172], "log": [98, 99, 110, 172, 186, 234, 235, 253, 254], "logarithm": [98, 99, 108, 110, 150, 153, 172, 186], "sphere_to_norm": [100, 249], "sphere_to_latlong": [100, 249], "spherical_geodes": [100, 102, 249], "spatial_conv": [100, 101, 105, 249], "spherical_conv": [100, 249], "euclidean_conv": [100, 249], "max_bin": [101, 102, 105, 129, 130, 131, 132, 133, 134, 135, 136, 137, 210], "10000": [101, 102, 105, 129, 130, 131, 132, 133, 134, 135, 136, 137, 210], "truncat": [101, 102, 105, 111, 129, 130, 131, 132, 133, 134, 135, 136, 137, 210], "spatial": [101, 102, 105, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 181, 182, 185, 210], "kernel_gaussian": 102, "evalu": [102, 114, 115, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 176, 177, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 240, 250, 254], "shorter": 102, "n_i": 102, "spheric": [102, 103, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 181, 182, 249, 251, 254], "circl": [102, 106], "try": [102, 105], "decreas": [102, 105], "data_conv": [102, 105], "normal": [103, 104, 106, 164, 191, 201, 204, 205], "latitud": [103, 104, 106], "longitud": [103, 104, 106], "z": [103, 104, 237], "centr": [103, 104, 154, 168, 181, 182, 183, 249, 254], "pretti": 105, "much": [105, 160, 170, 196], "dumbest": 105, "lie": [105, 147, 154], "thing": 105, "http": [105, 237, 252], "openreview": 105, "net": 105, "pdf": 105, "hkbd5xzrb": 105, "haversin": 106, "pleas": [106, 246, 251], "n_x": 106, "n_y": 106, "surfac": [106, 128, 131, 133, 134, 138, 181, 182, 251], "dist": 106, "brainnetcnn": 107, "equip": [107, 245], "induct": 107, "favour": [107, 184, 187, 190, 196, 239], "learn": [107, 115, 117, 129, 147, 183, 196, 210, 219, 220, 225, 230, 231, 235, 239, 251], "unord": 107, "analogi": [107, 182], "lot": 107, "quirk": 107, "usabl": 107, "crosshair_similar": [107, 239], "bank": [107, 219, 239], "step": [107, 130, 245], "c_": [107, 190, 212, 213, 214, 227, 242], "precursor": 107, "One": [107, 176, 186], "nonsquar": [107, 239], "bipartit": [107, 170, 239], "count": [107, 178, 239], "doubl": [107, 168, 174, 212, 213, 215, 216, 239], "parametris": [107, 147], "symexp": [108, 249], "symlog": [108, 249], "symsqrt": [108, 249], "symmap": [109, 110, 112, 249, 254], "q_x": [109, 110, 112], "lambda_x": [109, 110, 112], "matrix_exp": 109, "stabl": 109, "infeas": [110, 112], "guard": [110, 111, 112], "independ": [110, 111, 112, 184, 210], "uniformli": [110, 111, 112], "truncate_eigenvalu": 111, "convexcombin": 111, "nois": [111, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 168, 173, 210, 212, 213, 214, 215, 216, 217, 218, 235, 236], "degener": [111, 184], "repeat": [111, 213, 216, 219], "nondegeneraci": 111, "tsconv2d": [113, 249], "basisconv2d": [113, 249], "polyconv2d": [113, 249], "basischan": [113, 249], "polychan": [113, 249], "tsconv": [114, 115, 116, 117, 118, 249, 254], "basis_funct": [114, 115, 232], "include_const": [114, 115, 116, 117], "ith": [114, 115, 116, 117], "constitut": [114, 249], "signatur": [114, 237], "constant": [114, 115, 116, 117, 140, 143], "conv": [115, 117, 118, 225], "view": [115, 117, 234, 257], "sequenti": [115, 117], "past": [115, 117], "divers": [115, 117, 128], "consist": [115, 117, 134], "penalis": [115, 117, 181, 184, 186, 190, 192, 196, 197, 198], "spread": [115, 117], "conv2d": [115, 117, 240], "zeroth": [116, 117], "hideou": 119, "disorganis": 119, "hopefulli": 119, "somedai": 119, "disappear": 119, "altogeth": 119, "move": 119, "elsewher": [119, 253], "sad": 119, "blemish": 119, "conform_mask": [119, 120, 249], "apply_mask": [119, 123, 210, 249], "wmean": [119, 249], "complex_decompos": [119, 122, 249], "complex_recompos": [119, 121, 249], "sparse_mm": [119, 249], "sparse_rcmul": [119, 249], "orient_and_conform": [119, 249], "msk": [120, 123], "ampl": [121, 122], "almost": [123, 166, 186, 234], "certainli": [123, 166, 186, 196], "orient": 124, "reorient": 124, "coo": [125, 126], "_valu": 125, "nnz": 125, "20": [125, 164, 167, 240], "35": 125, "17": 125, "trail": 125, "exactli": [125, 126, 158, 168], "rusty1": 125, "pytorch_spars": 125, "147": 125, "coalesce_output": 126, "batchabl": 126, "regardless": 126, "coalesc": 126, "keepdim": 127, "tool": [128, 163, 167, 250, 255], "brain": [128, 131, 133, 253], "atlas": [128, 129, 132, 135, 136, 137, 138, 187], "princip": [128, 170, 187, 250], "distribut": [128, 129, 132, 133, 134, 138, 141, 142, 144, 146, 147, 164, 168, 186, 189, 190, 191, 201, 204, 205, 251], "volumetr": [128, 131, 133, 134, 138, 251], "discret": [128, 130, 135, 138, 251], "hard": [128, 245, 251], "parcel": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 182, 184, 186, 187, 190, 196, 210, 219, 251], "overlap": [128, 135, 136, 137, 138], "unstructur": [128, 181], "leverag": [128, 184], "prior": [128, 138, 212, 213, 215, 216, 219], "knowledg": 128, "atlasinit": [128, 251], "abstract": [128, 132], "baseatla": [128, 129, 132, 210, 251], "incorpor": [128, 251], "mixin": [128, 130, 251, 254], "pointer": [128, 130, 131, 133, 134, 135, 136, 137], "annot": 128, "discretevolumetricatla": [128, 251], "multivolumetricatla": [128, 137, 251], "multifilevolumetricatla": [128, 136, 251], "cortexsubcortexciftiatla": [128, 251], "cerebr": 128, "cortex": [128, 131, 133], "subcortex": [128, 131, 133], "dirichletinitvolumetricatla": [128, 133, 251], "dirichlet": [128, 129, 132, 133, 134, 138, 153, 251, 254], "dirichletinitsurfaceatla": [128, 134, 251], "flexibl": [128, 145], "straightforwardli": 128, "realiti": 128, "isol": [128, 130, 138], "compart": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 182, 210], "distinct": 128, "dirichletinitbaseatla": [128, 251], "init": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 210, 212, 213, 215, 216, 219, 227, 230, 239, 242, 250, 254], "spherical_scal": [129, 130, 131, 132, 133, 134, 135, 136, 137, 210], "kernel_sigma": [129, 210], "noise_sigma": [129, 210], "characteris": [129, 183], "instanti": [129, 130, 138, 177, 178, 181, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 204, 219, 237], "blur": 129, "pointwis": 129, "inject": [129, 130, 131, 132, 133, 134, 135, 136, 137, 212, 213, 214, 215, 216, 217, 218, 236], "smooth": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 150, 153, 197, 210, 251], "establish": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "topologi": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 251], "preimag": [129, 142, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 212, 213, 215, 216, 251], "multilogit": [129, 147, 148, 210, 251], "pre": [129, 186, 190, 192, 193, 194, 230, 237, 251], "simplex": [129, 147, 150, 153, 186, 187, 251], "ref_point": [130, 131, 135, 136, 137, 138], "mask_sourc": [130, 132, 134], "clear_cach": [130, 131, 135, 136, 137], "inherit": [130, 253], "sever": [130, 184, 195, 214, 217], "cover": 130, "frequent": [130, 184], "scenario": 130, "own": [130, 183], "composition": 130, "_load_refer": 130, "referencemixin": [130, 251], "_create_mask": 130, "maskmixin": [130, 251], "_compartment_names_dict": 130, "compartmentmixin": [130, 251], "_create_compart": 130, "_configure_decod": 130, "labelmixin": [130, 251], "_populate_map_from_ref": 130, "_init_coor": 130, "meshmixin": [130, 251], "_configure_sigma": 130, "convmixin": [130, 251], "_convolv": 130, "abstractli": 130, "candid": [130, 230, 231], "inclus": [130, 131, 133, 134, 135, 136, 137, 138, 164], "subcompart": [130, 131, 132, 133, 134, 135, 136, 137, 138], "cortic": [130, 131, 133, 138, 182], "hemispher": [130, 131, 133, 138], "decod": [130, 131, 133, 134, 135, 136, 137, 138, 210], "wa": [130, 131, 133, 134, 135, 136, 137], "construct": [130, 131, 133, 134, 135, 136, 137], "statu": [130, 131, 133, 134, 135, 136, 137, 138], "extent": [130, 131, 133, 134, 135, 136, 137, 192, 193, 194, 196], "cached_ref_data": [130, 131, 133, 134, 135, 136, 137], "purg": [130, 131, 133, 135, 136, 137], "overhead": [130, 131, 132, 133, 134, 135, 136, 137], "ceil": [130, 131, 132, 133, 134, 135, 136, 137], "mask_l": [131, 133], "mask_r": [131, 133], "surf_l": [131, 133], "surf_r": [131, 133], "cortex_l": [131, 133], "cifti_structure_cortex_left": [131, 133], "cortex_r": [131, 133], "cifti_structure_cortex_right": [131, 133], "subcort": [131, 133, 138], "grei": [131, 133], "matter": [131, 133], "endow": [131, 133], "gifti": [131, 133], "32k": [131, 133], "fslr": [131, 133], "medial": [131, 133, 138], "wall": [131, 133, 138], "nb": [131, 133, 134, 135, 136, 137], "nifti1imag": [131, 133, 134, 135, 136, 137], "to_imag": [131, 133, 138, 251], "compartment_label": [132, 133, 138], "conc": [132, 133, 134], "template_imag": 132, "concentr": [132, 133, 134, 147, 181, 186, 190, 198], "cifti_templ": 133, "n_label": 134, "probabilist": [136, 137, 210], "segment": [136, 137], "ica": [136, 137], "_objectreferencemixin": [138, 251], "_singlereferencemixin": [138, 251], "disk": [138, 245], "_multireferencemixin": [138, 251], "_phantomreferencemixin": [138, 251], "unimport": 138, "_ciftireferencemixin": [138, 251], "model_axi": 138, "substitut": [138, 227], "chri": 138, "markiewicz": 138, "tutori": 138, "_logicmaskmixin": [138, 251], "tree": [138, 169, 240], "maskintersect": [138, 251], "maskthreshold": [138, 251], "leaf": [138, 169], "_cortexsubcortexciftimaskmixin": [138, 251], "exclus": 138, "_fromnullmaskmixin": [138, 251], "background": 138, "_singlecompartmentmixin": [138, 251], "_multicompartmentmixin": [138, 251], "extra": 138, "_cortexsubcortexcifticompartmentmixin": [138, 251], "_discretelabelmixin": [138, 251], "_continuouslabelmixin": [138, 251], "scheme": [138, 142, 195, 212, 213, 215, 216, 250, 254], "discretelabelmixin": 138, "_dirichletlabelmixin": [138, 251], "_volumetricmeshmixin": [138, 251], "evenli": 138, "_vertexciftimeshmixin": [138, 251], "_evenlysampledconvmixin": [138, 251], "unsupport": 138, "_spatialconvmixin": [138, 251], "from_distr_init_": [139, 141, 251], "constant_init_": [139, 140, 251], "identity_init_": [139, 251], "domaininitialis": [139, 140, 141, 251], "distributioninitialis": [139, 251], "constantinitialis": [139, 251], "throughout": [140, 143], "distr": [141, 144, 147], "preweight": [142, 210, 212, 213, 215, 216, 218, 219], "logist": [142, 152], "interv": [142, 150, 153, 160], "unconstrain": 142, "learnabl": [142, 164, 166, 212, 213, 214, 215, 216, 217, 218, 219, 227, 234, 235, 239, 242], "conveni": [142, 184, 186, 245], "functool": 142, "scalar": [143, 177, 178, 181, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 198, 253], "deltaplus_init_": [146, 251], "loc": [146, 152, 154, 156, 158, 161, 162, 168], "conjunct": [146, 147, 168, 170, 175, 187], "atanh": [146, 148, 164, 166, 168, 175, 210, 219, 251], "dirichlet_init_": [147, 251], "1d": [147, 150, 153], "understood": 147, "n_class": [147, 237], "logit": [148, 150, 153, 181, 186, 187, 189, 210, 251], "unitnormspher": [148, 251], "amplitudeatanh": [148, 164, 166, 219, 251], "amplitudemultilogit": [148, 219, 251], "handler": [149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 251], "mapper": [149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 181, 186, 187, 210, 251, 254], "finit": [149, 151, 152], "reciproc": [149, 151, 152, 183, 236], "never": 149, "min": [149, 151, 152, 157, 160], "purpos": [149, 150, 151, 152, 153, 214, 217], "supremum": [149, 150, 151, 152, 153, 230], "infimum": [149, 150, 151, 152, 153, 230], "asymptot": [149, 151, 152], "restrict": [149, 150, 151, 152, 153], "vanish": [149, 150, 151, 152, 153], "_outofdomainhandl": [149, 150, 151, 152, 153, 154], "clip": [149, 150, 151, 152, 153, 154, 155, 160, 251], "test": [149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 180, 218, 230, 245, 250, 251], "fall": [149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162], "bound": [149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 186], "handle_ood": [149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 162, 251], "001": [150, 153, 184, 232], "multinomi": [150, 153], "natur": [150, 153], "serv": [150, 153], "well": [153, 177, 183, 184, 237], "behav": 153, "increas": [153, 234, 237], "higher": 153, "entropi": [153, 187, 190, 253, 254], "equiprob": [153, 186, 187], "use_vector_norm": 154, "obvious": 154, "l0": 154, "vector_norm": 154, "mahalanobi": 154, "ellips": 154, "No": 154, "ood": [155, 164, 251], "_domain": [155, 251], "_phaseamplitudedomain": [155, 251], "domainbas": [156, 157, 158, 159, 160, 161, 162, 251, 254], "closest": [157, 164, 185], "allow": [157, 166, 212, 213, 215, 216, 240, 253], "prescrib": [157, 160], "unmodifi": 158, "radic": 160, "destroi": 160, "accommod": 160, "feasibl": 160, "obs_min": 160, "obs_max": 160, "lbound": 160, "ubound": 160, "safe": [161, 162], "manner": [161, 162, 166, 187], "superclass": [161, 162], "emul": [163, 164, 166, 167, 219], "replic": 163, "transfer": [163, 164, 165, 166, 219], "freqfilterspec": [163, 165, 166, 219, 251], "freqfilter_init_": [163, 219, 251], "clamp_init_": [163, 251], "freqfilt": [164, 165, 166, 251, 254, 256], "wn": [164, 167], "ftype": [164, 167], "butter": [164, 167], "btype": [164, 167], "bandpass": [164, 167], "ampl_loc": 164, "ampl_scal": 164, "phase_loc": 164, "phase_scal": 164, "02": [164, 168], "clamp": [164, 165, 219], "approxim": [164, 166, 168, 182, 183, 210, 237, 239], "curv": [164, 166], "iir": [164, 166, 251, 254, 256], "iirfilt": [164, 166, 251, 254, 256], "bandstop": [164, 167], "critic": [164, 166, 167], "cutoff": [164, 167], "Not": 164, "ideal": [164, 167, 170], "cheby1": [164, 167], "cheby2": [164, 167], "ellip": [164, 167], "bessel": [164, 167], "randn": 164, "butterworth": [164, 167], "chebyshev": [164, 167], "ellipt": [164, 167], "thompson": [164, 167], "overst": 164, "remot": 164, "contrast": 164, "exact": [164, 183], "lowpass": [164, 167], "highpass": [164, 167], "rippl": [164, 167], "stop": [164, 167], "mag": [164, 167], "scipi": [164, 166, 167], "clampabl": 164, "get_clamp": [164, 251], "toler": [164, 178, 180], "excess": 164, "initialise_spectrum": [164, 251], "worn": 164, "raw": [164, 166, 174, 210, 212, 213, 215, 216, 217, 219], "prevent": [164, 166, 170, 219, 234], "explos": [164, 166, 210, 219], "points_tensor": 165, "values_tensor": 165, "filter_spec": [165, 166, 219], "spec": [165, 166, 220], "even": 166, "kuznetsov": [167, 220], "initialise_coef": [167, 251], "laplace_init_": [168, 251], "excl_axi": 168, "multidimension": 168, "decai": 168, "rate": [168, 245], "atlasmixin": [169, 251, 254], "binaris": 169, "surviv": [169, 239], "morpholog": 169, "dilat": 169, "eros": 169, "hole": 169, "children": 169, "union": [169, 230], "intersect": [169, 230], "img": 169, "lattic": 170, "bipartitelatticeinit": [170, 251], "n_out": 170, "n_lattic": [170, 240], "channel_multipli": [170, 240], "random_init": 170, "attenu": 170, "prev": 170, "biregular": 170, "compress": [170, 242, 243, 254, 256], "wrong": 170, "But": 170, "realli": 170, "common": [170, 218], "n_in": 170, "twice": [170, 190], "maximis": 170, "mutual": [170, 185], "allegi": 170, "n_": 170, "h_": [170, 242, 243], "w_": [170, 242, 243], "best": [170, 251], "uncompress": 170, "succeed": 170, "greedi": 170, "fuse": [170, 242], "join": 170, "redund": 170, "set_next": 170, "set_object": 170, "set_potenti": 170, "sign_vector": 170, "tangencyinit": [171, 251], "tangency_init_": [171, 251], "semidefinitemean": [171, 251], "spdeuclideanmean": [171, 251], "spdharmonicmean": [171, 251], "spdlogeuclideanmean": [171, 251], "spdgeometricmean": [171, 251], "exp_m": 172, "log_m": 172, "mean_spec": [173, 234, 235], "init_data": [173, 235], "std": [173, 235, 236], "_semidefinitemean": [173, 234, 235], "central": [173, 234, 235], "tendenc": [173, 234, 235], "sylo_init_": [174, 251], "fan_in": 174, "nonlinear": [174, 227, 239], "leaky_relu": 174, "kaim": [174, 227], "fan": 174, "recept": 174, "crosshair": 174, "hack": 174, "theoret": 174, "justif": 174, "believ": 174, "toeplitz_init_": [175, 251], "pretransform": 176, "lossschem": [176, 253, 254], "hand": 176, "register_act": [176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 253], "register_sentri": [176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 253], "sentri": [176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 253], "action": [176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "nu": [177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198], "slicewis": 177, "criterion": [177, 210], "listen": [177, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 253], "batchcorr": [178, 179, 180], "tol": [178, 179, 180], "tol_sig": [178, 179], "auto_tol": [178, 253, 254], "fc": 179, "qc": 179, "edgewis": 179, "batchcorrel": [179, 253, 254], "scanner": 179, "motion": 179, "scan": 179, "batch_siz": [180, 209], "tail": 180, "mass": [181, 182, 249, 254], "simul": 181, "collaps": 181, "quantiti": [181, 196, 197, 198], "dispers": 181, "unpenalis": 181, "ball": 181, "proport": [181, 192], "ell": 182, "ell_": 182, "lh": 182, "rh": 182, "moder": 182, "strong": [182, 184], "connectopy_loss": [183, 253], "dissimilar": 183, "minimis": [183, 186, 197], "s_": 183, "optimis": [183, 184, 190, 235, 237], "detect": 183, "attempt": 183, "jointli": 183, "shot": 183, "prone": 183, "misalign": 183, "latent": 183, "induc": [183, 184, 190], "suit": 184, "concav": [184, 186], "global": 184, "seek": 184, "weaker": 184, "cluster": [184, 185], "four": 184, "presum": 184, "advantag": 184, "certain": 184, "denomin": [184, 190], "unstabl": [184, 245, 250], "simpl": [184, 210, 250], "cor": 184, "straightforward": 184, "v": [185, 210, 219, 237], "mathcal": [185, 190], "v_i": 185, "v_j": 185, "Such": 185, "centroid": 185, "proxim": 185, "l1": [185, 192, 193, 194, 197, 198, 230], "notion": 185, "commut": 185, "cartoon": [186, 196], "schemat": 186, "contour": 186, "superpos": 186, "categori": 186, "afford": 186, "unbound": 186, "capac": 186, "undesir": 186, "precompos": [186, 187, 190, 192, 193, 194], "unnormalis": [187, 196], "shrink": 187, "situat": 187, "trivial": 187, "uninterest": 187, "minima": 187, "prob_axi": 187, "hing": 188, "svm": [188, 254, 256], "jensen": 189, "shannon": 189, "diverg": 189, "jsdiv": 189, "affiliation_xfm": 190, "_q": 190, "nu_q": 190, "calcul": 190, "notat": 190, "account": 190, "lend": [190, 210, 251], "intuit": [190, 210, 251], "quantif": 190, "similarli": [190, 239], "wherein": 190, "equilibrium": [190, 253, 254], "loop": 190, "mvkurtosi": 191, "dimensional_sc": 191, "kurtosi": 191, "mardia": 191, "laumann": [191, 201], "colleagu": 191, "stationari": [191, 204, 205], "infinit": 191, "optimum": 191, "violat": 192, "unilateralnormedloss": [192, 253, 254], "manhattan": [192, 193, 194, 197, 198], "unilater": [192, 194, 239], "unreduc": [192, 193, 194], "configur": [193, 237], "normedloss": [194, 253, 254], "nonposit": 194, "verbos": [195, 237], "homogen": 196, "AT": 196, "core": 196, "illustr": 196, "intens": 196, "lavend": 196, "blue": 196, "green": 196, "practic": [196, 230, 245, 251], "uneven": 196, "omit": 196, "voxelwis": [196, 208], "too": [196, 240], "fortun": 196, "broken": [196, 213, 216], "down": 196, "affect": 196, "reactivetermin": 196, "caution": 196, "improp": 196, "destruct": 196, "skip_normalis": 196, "standardise_data": 196, "standardise_mu": 196, "transit": 197, "smoother": 197, "diff": 197, "bimod": 198, "symbimod": 198, "synthet": [198, 204, 205], "experi": [198, 245], "prefer": 198, "synthesis": 199, "match_spectra": [199, 255], "match_covari": [199, 255], "match_refer": [199, 200, 205, 255], "match_cov_and_spectrum": [199, 202, 204, 255], "synthesise_match": [199, 202, 204, 255], "synthesise_from_cov_and_spectrum": [199, 200, 205, 255], "synth": [200, 201, 202, 203, 204, 205, 254, 255], "describ": [201, 234], "et": 201, "al": 201, "2017": 201, "stabil": 201, "bold": [201, 245], "fmri": 201, "align": [201, 210], "end": [201, 210, 237], "drawn": [201, 204, 205], "hold": 201, "use_mean": [202, 203, 205], "correlationnorm": [206, 256], "nn": [207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 249, 250, 254], "grad_path": 207, "labelwis": 208, "atlaslinear": [208, 209, 256], "atlasaccumulin": [208, 256], "image_kei": 209, "influx": 209, "efflux": 209, "line": 209, "transmit_filt": 209, "receive_filt": 209, "skip_loc": 209, "nonlocal_argmap": 209, "rebatch": 209, "mask_input": 210, "spatial_dropout": 210, "min_voxel": 210, "forward_mod": 210, "dropout": [210, 212, 213, 214, 215, 216, 217, 218], "discount": 210, "conjectur": 210, "grow": 210, "absmean": 210, "zscore": 210, "psc": 210, "strategi": 210, "percent": 210, "t_": 210, "min_": 210, "_f": 210, "magma": 210, "gel": 210, "cuda": [210, 252], "gelsi": 210, "postweight": [210, 212, 213, 214, 215, 216, 217, 218, 230], "consider": 210, "compartment_forward": 210, "concatenate_and_decod": 210, "reset_paramet": [210, 219, 230, 232, 239], "select_compart": 210, "_cov": [211, 256], "unarycovari": [211, 256], "unarycovariancetw": [211, 256], "unarycovarianceuw": [211, 256], "binarycovari": [211, 256], "binarycovariancetw": [211, 256], "binarycovarianceuw": [211, 256], "max_lag": [212, 213, 215, 216, 218], "out_channel": [212, 213, 214, 215, 216, 217, 218, 227, 239], "stochast": [212, 213, 214, 215, 216, 217], "c_1": [212, 213, 214], "c_2": [212, 213, 214], "unari": [212, 215, 216, 217], "lag": [212, 213, 214, 215, 216, 217], "noisesourc": [212, 213, 214, 215, 216, 217], "dropoutsourc": [212, 213, 214, 215, 216, 217], "bootstrap": [212, 213, 214, 215, 216, 217], "prepreweight_c": [213, 216], "prepreweight_r": [213, 216], "lead": [213, 216], "prepreweight": [213, 216], "nonetheless": [214, 217], "comprehens": 218, "frequencydomainfilt": [219, 256], "time_dim": 219, "suppli": 219, "uncertain": 219, "entail": 219, "predomain": 219, "clamp_point": 219, "clamp_valu": 219, "rnn": 220, "bori": 220, "kuz": 220, "differentiable_iir_filt": 220, "publish": 220, "cite": 220, "parker": 220, "jd": 220, "esqueda": 220, "2020": 220, "machin": [220, 237], "dafx2020": 220, "vienna": 220, "austria": 220, "septemb": 220, "21": 220, "yet": 220, "dtdf": 220, "iirfiltfilt": [220, 256], "spectralinterpol": [221, 256], "weightedinterpol": [221, 256], "hybridinterpol": [221, 256], "1x1": [225, 227], "queryencod": [225, 256], "recombin": [226, 240, 254, 256], "num_embed": 226, "embedding_dim": 226, "query_dim": 226, "common_layer_dim": 226, "specific_layer_dim": 226, "nlin": [226, 240], "progressive_specif": 226, "noise_dim": 226, "in_channel": [227, 239, 240], "positive_onli": 227, "mixtur": 227, "math": 227, "denois": 229, "responsefunctionlinearselector": [229, 256], "linearcombinationselector": [229, 256], "eliminationselector": [229, 256], "n_column": [230, 231, 232], "or_dim": 230, "and_dim": 230, "elimin": 230, "gentler": 230, "slope": 230, "did": 230, "didn": 230, "look": 230, "carefulli": 230, "someon": 230, "model_dim": [231, 232], "n_response_funct": 232, "response_function_len": 232, "9": 232, "init_lin": 232, "init_conv": 232, "leak": 232, "tangentproject": [233, 256], "batchtangentproject": [233, 256], "inertia": 234, "transport": [234, 235], "destin": [234, 235], "idea": [234, 245], "somehow": 234, "updat": [234, 253, 257], "inerti": 234, "eta": 234, "omega_t": 234, "omega_": 234, "histor": 234, "tangencypoint": 234, "skip": 234, "heavili": 234, "dest": [234, 235], "fix": [235, 239], "noisi": 236, "necessarili": 236, "theorem": 236, "spsdnoisesourc": 236, "coef0": 237, "class_weight": 237, "decision_function_shap": 237, "ovr": 237, "01": 237, "formulate_on_forward_pass": 237, "n_observ": 237, "sample_weight": 237, "kernelis": 237, "dpp": 237, "complianc": 237, "sacrific": 237, "prohibit": 237, "custom": 237, "sklearn": 237, "Or": 237, "libsvm": 237, "hyperparamet": [237, 253], "strength": 237, "poli": 237, "precomput": 237, "unbalanc": 237, "rest": 237, "classifi": 237, "formul": 237, "eco": 237, "sc": 237, "decis": 237, "diffcp": 237, "incredibli": 237, "compar": 237, "dedic": 237, "dual": 237, "soft": [237, 239], "15": 237, "www": 237, "youtub": 237, "com": [237, 252], "watch": 237, "zzn80wmclnw": 237, "cxvpylay": 237, "disciplin": [237, 251], "parametr": 237, "program": [237, 249, 251, 253], "syloresnet": [238, 256], "possibli": 239, "learnable_al": 239, "disabl": 239, "simultan": 239, "respond": [239, 253], "rectifi": 239, "c_in": 239, "c_out": 239, "third": 239, "relu": [239, 240], "sylo": [240, 249, 251, 254, 256], "in_dim": 240, "dim_sequ": 240, "channel_sequ": 240, "block_sequ": 240, "lattice_order_sequ": 240, "compression_init": 240, "norm_lay": 240, "syloresblock": 240, "community_dim": 240, "submodul": [240, 245, 250, 251, 253], "regular": 240, "__init__": 240, "super": 240, "conv1": 240, "conv2": 240, "verticalcompress": [241, 256], "vertical_compress": [241, 256], "vertcom": [242, 243, 254, 256], "in_featur": 242, "out_featur": 242, "fold_channel": [242, 243], "forward_oper": 242, "row_compressor": 243, "col_compressor": 243, "remove_diagon": 243, "rightarrow": 243, "compressor": 243, "window_s": 244, "augmentation_factor": 244, "nonoverlap": 244, "augmentation_axi": 244, "workflow": [245, 250, 251], "ingest": 245, "pipelin": 245, "torchvis": 245, "instruct": 245, "tar": [245, 252], "archiv": [245, 252, 253], "shard": 245, "api": [245, 250, 251], "fairli": [245, 250], "brittl": 245, "atom": [245, 249], "coverag": [245, 251], "poor": 245, "grab": 245, "quit": 245, "read": 245, "speed": 245, "suboptim": 245, "welcom": [245, 257], "contribut": 245, "parallelis": 245, "head": 245, "hour": 245, "upward": 245, "dai": 245, "preprint": [246, 257], "elementari": 249, "connectop": [249, 254], "miscellan": [249, 254], "softwar": 250, "librari": 250, "incipi": 250, "hub": 250, "focus": 250, "guidelin": 250, "soon": 250, "benchmark": [250, 254], "visualis": [250, 254], "instal": 250, "framework": [250, 251, 252], "eval": [250, 254], "neurosci": [250, 254], "viz": [250, 254], "page": 250, "integr": 251, "expertis": 251, "transpar": 251, "start": [251, 253], "modif": 251, "clean": 251, "slate": 251, "experiment": 251, "inadequ": 251, "warrant": 251, "report": 251, "bug": 251, "issu": 251, "deltaplu": [251, 254], "deltaplus_init": 251, "deltaplusinit": 251, "dirichlet_init": 251, "dirichletinit": 251, "iirfilterspec": 251, "laplace_init": 251, "laplaceinit": 251, "maskuthreshold": 251, "maskdil": 251, "maskeros": 251, "maskopen": 251, "maskclos": 251, "maskfillhol": 251, "maskneg": 251, "maskunion": 251, "floatleaf": 251, "maskleaf": 251, "mpbl": [251, 254], "toeplitz_init": 251, "toeplitzinit": 251, "github": [252, 257], "pip": 252, "rciric": 252, "gz": 252, "cudnn": 252, "underli": 252, "helper": 253, "lossappli": [253, 254], "lossargu": 253, "send": 253, "event": 253, "cours": 253, "tune": 253, "epoch": 253, "reducingloss": [253, 254], "qcfc": [253, 254], "hemisphericteth": [253, 254], "logdetcorr": 253, "detcorr": 253, "logdet": 253, "vectordispers": [253, 254], "softmaxentropi": [253, 254], "softmaxequilibrium": [253, 254], "hingeloss": [253, 254], "jsdiverg": [253, 254], "softmaxjsdiverg": [253, 254], "modularityloss": [253, 254], "multivariatekurtosi": [253, 254], "constraintviol": [253, 254], "secondmo": [253, 254], "secondmomentcentr": 253, "smoothnesspenalti": [253, 254], "symmetricbimod": [253, 254], "symmetricbimodalnorm": 253, "synthesi": [254, 255], "spdnois": [254, 256], "windowamplifi": [254, 256], "ohbm": 257, "unfortun": 257, "am": 257, "go": 257, "abl": 257, "invit": 257, "feel": 257, "free": 257, "reach": 257, "question": 257, "discuss": 257, "my": 257, "contact": 257, "email": 257, "post": 257, "arxiv": 257, "star": 257, "repositori": 257, "toward": 257, "releas": 257}, "objects": {"hypercoil": [[245, 0, 0, "-", "data"], [247, 0, 0, "-", "engine"], [248, 0, 0, "-", "eval"], [249, 0, 0, "-", "functional"], [251, 0, 0, "-", "init"], [253, 0, 0, "-", "loss"], [255, 0, 0, "-", "neuro"], [256, 0, 0, "-", "nn"]], "hypercoil.data": [[0, 0, 0, "-", "bids"], [6, 0, 0, "-", "collate"], [7, 0, 0, "-", "dataref"], [11, 0, 0, "-", "dataset"], [14, 0, 0, "-", "functional"], [24, 0, 0, "-", "hcp"]], "hypercoil.data.bids": [[1, 1, 1, "", "BIDSObjectFactory"], [2, 1, 1, "", "LightBIDSLayout"], [3, 1, 1, "", "LightBIDSObject"], [4, 1, 1, "", "fMRIPrepDataset"], [5, 3, 1, "", "fmriprep_references"]], "hypercoil.data.bids.fMRIPrepDataset": [[4, 2, 1, "", "add_data"]], "hypercoil.data.collate": [[6, 3, 1, "", "extend_and_bind"], [6, 3, 1, "", "gen_collate"]], "hypercoil.data.dataref": [[8, 1, 1, "", "DataQuery"], [9, 1, 1, "", "DataReference"], [10, 3, 1, "", "data_references"]], "hypercoil.data.dataref.DataQuery": [[8, 2, 1, "", "__call__"], [8, 2, 1, "", "variable_factory"]], "hypercoil.data.dataref.DataReference": [[9, 2, 1, "", "__call__"], [9, 2, 1, "", "__getattr__"], [9, 4, 1, "", "data"], [9, 2, 1, "", "get_var"], [9, 4, 1, "", "label"], [9, 4, 1, "", "outcome"], [9, 2, 1, "", "parse_ids"]], "hypercoil.data.dataset": [[12, 1, 1, "", "ReferencedDataLoader"], [13, 1, 1, "", "ReferencedDataset"]], "hypercoil.data.dataset.ReferencedDataLoader": [[12, 2, 1, "", "set_depth"]], "hypercoil.data.dataset.ReferencedDataset": [[13, 2, 1, "", "add_data"], [13, 2, 1, "", "set_depth"]], "hypercoil.data.functional": [[15, 3, 1, "", "apply_model_specs"], [17, 3, 1, "", "apply_to_select"], [17, 3, 1, "", "apply_transform"], [16, 3, 1, "", "change_extension"], [21, 3, 1, "", "consolidate_block"], [20, 3, 1, "", "cwb_cifti_header"], [18, 3, 1, "", "dump_data"], [21, 3, 1, "", "extend_to_max_size"], [21, 3, 1, "", "extend_to_size"], [19, 3, 1, "", "fillnan"], [15, 3, 1, "", "get_col"], [18, 3, 1, "", "get_metadata_variable"], [17, 3, 1, "", "get_path_from_var"], [17, 3, 1, "", "identity"], [19, 3, 1, "", "nanfill"], [20, 3, 1, "", "nifti_header"], [22, 3, 1, "", "normalise"], [22, 3, 1, "", "polynomial_detrend"], [22, 3, 1, "", "random_window"], [16, 3, 1, "", "read_data_frame"], [18, 3, 1, "", "read_json"], [20, 3, 1, "", "read_neuro_image"], [22, 3, 1, "", "standardise"], [21, 3, 1, "", "to_named_tensor"], [21, 3, 1, "", "to_tensor"], [17, 3, 1, "", "transform_block"], [17, 3, 1, "", "transpose"], [17, 3, 1, "", "unzip_blocked_dict"], [17, 3, 1, "", "vector_encode"], [22, 3, 1, "", "window"], [22, 3, 1, "", "window_map"]], "hypercoil.data.grabber": [[23, 1, 1, "", "LightGrabber"]], "hypercoil.data.grabber.LightGrabber": [[23, 2, 1, "", "find_files"], [23, 2, 1, "", "get"], [23, 2, 1, "", "getall"]], "hypercoil.data.hcp": [[25, 3, 1, "", "hcp_references"]], "hypercoil.data.neuro": [[26, 1, 1, "", "fMRIDataReference"]], "hypercoil.engine": [[27, 0, 0, "-", "accumulate"]], "hypercoil.engine.accumulate": [[28, 1, 1, "", "AccumulatingFunction"], [29, 1, 1, "", "Accumulator"]], "hypercoil.engine.accumulate.AccumulatingFunction": [[28, 2, 1, "", "apply"], [28, 2, 1, "", "backward"], [28, 2, 1, "", "forward"]], "hypercoil.engine.accumulate.Accumulator": [[29, 2, 1, "", "forward"], [29, 2, 1, "", "reset"], [29, 2, 1, "", "zero_grad"]], "hypercoil.functional": [[30, 0, 0, "-", "activation"], [35, 0, 0, "-", "cmass"], [40, 0, 0, "-", "connectopy"], [43, 0, 0, "-", "cov"], [53, 0, 0, "-", "fourier"], [63, 0, 0, "-", "graph"], [69, 0, 0, "-", "interpolate"], [73, 0, 0, "-", "kernel"], [80, 0, 0, "-", "matrix"], [93, 0, 0, "-", "semidefinite"], [100, 0, 0, "-", "sphere"], [107, 0, 0, "-", "sylo"], [108, 0, 0, "-", "symmap"], [113, 0, 0, "-", "tsconv"], [119, 0, 0, "-", "utils"]], "hypercoil.functional.activation": [[31, 3, 1, "", "amplitude_atanh"], [32, 3, 1, "", "amplitude_tanh"], [33, 3, 1, "", "corrnorm"], [34, 3, 1, "", "isochor"]], "hypercoil.functional.cmass": [[36, 3, 1, "", "cmass"], [37, 3, 1, "", "cmass_coor"], [38, 3, 1, "", "cmass_reference_displacement"], [38, 3, 1, "", "cmass_reference_displacement_grid"], [39, 3, 1, "", "diffuse"]], "hypercoil.functional.connectopy": [[41, 3, 1, "", "diffusion_mapping"], [42, 3, 1, "", "laplacian_eigenmaps"]], "hypercoil.functional.cov": [[44, 3, 1, "", "conditionalcorr"], [45, 3, 1, "", "conditionalcov"], [46, 3, 1, "", "corr"], [47, 3, 1, "", "cov"], [48, 3, 1, "", "pairedcorr"], [49, 3, 1, "", "pairedcov"], [50, 3, 1, "", "partialcorr"], [51, 3, 1, "", "partialcov"], [52, 3, 1, "", "precision"]], "hypercoil.functional.fourier": [[54, 3, 1, "", "analytic_signal"], [55, 3, 1, "", "env_inst"], [56, 3, 1, "", "envelope"], [57, 3, 1, "", "hilbert_transform"], [58, 3, 1, "", "instantaneous_frequency"], [59, 3, 1, "", "instantaneous_phase"], [60, 3, 1, "", "product_filter"], [61, 3, 1, "", "product_filtfilt"], [62, 3, 1, "", "unwrap"]], "hypercoil.functional.graph": [[64, 3, 1, "", "coaffiliation"], [65, 3, 1, "", "girvan_newman_null"], [66, 3, 1, "", "graph_laplacian"], [67, 3, 1, "", "modularity_matrix"], [68, 3, 1, "", "relaxed_modularity"]], "hypercoil.functional.interpolate": [[70, 3, 1, "", "hybrid_interpolate"], [71, 3, 1, "", "spectral_interpolate"], [72, 3, 1, "", "weighted_interpolate"]], "hypercoil.functional.kernel": [[74, 3, 1, "", "cosine_kernel"], [75, 3, 1, "", "gaussian_kernel"], [76, 3, 1, "", "linear_kernel"], [77, 3, 1, "", "polynomial_kernel"], [78, 3, 1, "", "rbf_kernel"], [79, 3, 1, "", "sigmoid_kernel"]], "hypercoil.functional.matrix": [[81, 3, 1, "", "delete_diagonal"], [82, 3, 1, "", "expand_outer"], [83, 3, 1, "", "fill_diagonal"], [84, 3, 1, "", "invert_spd"], [85, 3, 1, "", "recondition_eigenspaces"], [86, 3, 1, "", "spd"], [87, 3, 1, "", "squareform"], [88, 3, 1, "", "sym2vec"], [89, 3, 1, "", "symmetric"], [90, 3, 1, "", "toeplitz"], [91, 3, 1, "", "vec2sym"]], "hypercoil.functional.resid": [[92, 3, 1, "", "residualise"]], "hypercoil.functional.semidefinite": [[94, 3, 1, "", "cone_project_spd"], [95, 3, 1, "", "mean_euc_spd"], [96, 3, 1, "", "mean_geom_spd"], [97, 3, 1, "", "mean_harm_spd"], [98, 3, 1, "", "mean_logeuc_spd"], [99, 3, 1, "", "tangent_project_spd"]], "hypercoil.functional.sphere": [[101, 3, 1, "", "euclidean_conv"], [102, 3, 1, "", "spatial_conv"], [103, 3, 1, "", "sphere_to_latlong"], [104, 3, 1, "", "sphere_to_normals"], [105, 3, 1, "", "spherical_conv"], [106, 3, 1, "", "spherical_geodesic"]], "hypercoil.functional.sylo": [[107, 3, 1, "", "sylo"]], "hypercoil.functional.symmap": [[109, 3, 1, "", "symexp"], [110, 3, 1, "", "symlog"], [111, 3, 1, "", "symmap"], [112, 3, 1, "", "symsqrt"]], "hypercoil.functional.tsconv": [[114, 3, 1, "", "basischan"], [115, 3, 1, "", "basisconv2d"], [116, 3, 1, "", "polychan"], [117, 3, 1, "", "polyconv2d"], [118, 3, 1, "", "tsconv2d"]], "hypercoil.functional.utils": [[120, 3, 1, "", "apply_mask"], [121, 3, 1, "", "complex_decompose"], [122, 3, 1, "", "complex_recompose"], [123, 3, 1, "", "conform_mask"], [124, 3, 1, "", "orient_and_conform"], [125, 3, 1, "", "sparse_mm"], [126, 3, 1, "", "sparse_rcmul"], [127, 3, 1, "", "wmean"]], "hypercoil.init": [[128, 0, 0, "-", "atlas"], [138, 0, 0, "-", "atlasmixins"], [139, 0, 0, "-", "base"], [146, 0, 0, "-", "deltaplus"], [147, 0, 0, "-", "dirichlet"], [148, 0, 0, "-", "domain"], [155, 0, 0, "-", "domainbase"], [163, 0, 0, "-", "freqfilter"], [167, 0, 0, "-", "iirfilter"], [168, 0, 0, "-", "laplace"], [170, 0, 0, "-", "mpbl"], [171, 0, 0, "-", "semidefinite"], [174, 0, 0, "-", "sylo"], [175, 0, 0, "-", "toeplitz"]], "hypercoil.init.atlas": [[129, 1, 1, "", "AtlasInit"], [130, 1, 1, "", "BaseAtlas"], [131, 1, 1, "", "CortexSubcortexCIfTIAtlas"], [132, 1, 1, "", "DirichletInitBaseAtlas"], [133, 1, 1, "", "DirichletInitSurfaceAtlas"], [134, 1, 1, "", "DirichletInitVolumetricAtlas"], [135, 1, 1, "", "DiscreteVolumetricAtlas"], [136, 1, 1, "", "MultiVolumetricAtlas"], [137, 1, 1, "", "MultifileVolumetricAtlas"]], "hypercoil.init.atlas.AtlasInit": [[129, 2, 1, "", "__call__"]], "hypercoil.init.atlas.BaseAtlas": [[130, 2, 1, "", "__call__"]], "hypercoil.init.atlas.CortexSubcortexCIfTIAtlas": [[131, 2, 1, "", "__call__"], [131, 2, 1, "", "to_image"]], "hypercoil.init.atlas.DirichletInitBaseAtlas": [[132, 2, 1, "", "__call__"]], "hypercoil.init.atlas.DirichletInitSurfaceAtlas": [[133, 2, 1, "", "__call__"], [133, 2, 1, "", "to_image"]], "hypercoil.init.atlas.DirichletInitVolumetricAtlas": [[134, 2, 1, "", "__call__"]], "hypercoil.init.atlas.DiscreteVolumetricAtlas": [[135, 2, 1, "", "__call__"]], "hypercoil.init.atlas.MultiVolumetricAtlas": [[136, 2, 1, "", "__call__"]], "hypercoil.init.atlas.MultifileVolumetricAtlas": [[137, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins": [[169, 1, 1, "", "FloatLeaf"], [169, 1, 1, "", "MaskClosing"], [169, 1, 1, "", "MaskDilation"], [169, 1, 1, "", "MaskErosion"], [169, 1, 1, "", "MaskFillHoles"], [169, 1, 1, "", "MaskIntersection"], [169, 1, 1, "", "MaskLeaf"], [169, 1, 1, "", "MaskNegation"], [169, 1, 1, "", "MaskOpening"], [169, 1, 1, "", "MaskThreshold"], [169, 1, 1, "", "MaskUThreshold"], [169, 1, 1, "", "MaskUnion"], [138, 1, 1, "", "_CIfTIReferenceMixin"], [138, 1, 1, "", "_ContinuousLabelMixin"], [138, 1, 1, "", "_CortexSubcortexCIfTICompartmentMixin"], [138, 1, 1, "", "_CortexSubcortexCIfTIMaskMixin"], [138, 1, 1, "", "_DirichletLabelMixin"], [138, 1, 1, "", "_DiscreteLabelMixin"], [138, 1, 1, "", "_EvenlySampledConvMixin"], [138, 1, 1, "", "_FromNullMaskMixin"], [138, 1, 1, "", "_LogicMaskMixin"], [138, 1, 1, "", "_MultiCompartmentMixin"], [138, 1, 1, "", "_MultiReferenceMixin"], [138, 1, 1, "", "_ObjectReferenceMixin"], [138, 1, 1, "", "_PhantomReferenceMixin"], [138, 1, 1, "", "_SingleCompartmentMixin"], [138, 1, 1, "", "_SingleReferenceMixin"], [138, 1, 1, "", "_SpatialConvMixin"], [138, 1, 1, "", "_VertexCIfTIMeshMixin"], [138, 1, 1, "", "_VolumetricMeshMixin"]], "hypercoil.init.atlasmixins.FloatLeaf": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskClosing": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskDilation": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskErosion": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskFillHoles": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskIntersection": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskLeaf": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskNegation": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskOpening": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskThreshold": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskUThreshold": [[169, 2, 1, "", "__call__"]], "hypercoil.init.atlasmixins.MaskUnion": [[169, 2, 1, "", "__call__"]], "hypercoil.init.base": [[140, 3, 1, "", "ConstantInitialiser"], [141, 3, 1, "", "DistributionInitialiser"], [142, 1, 1, "", "DomainInitialiser"], [143, 3, 1, "", "constant_init_"], [144, 3, 1, "", "from_distr_init_"], [145, 3, 1, "", "identity_init_"]], "hypercoil.init.deltaplus": [[146, 1, 1, "", "DeltaPlusInit"], [146, 3, 1, "", "deltaplus_init_"]], "hypercoil.init.dirichlet": [[147, 1, 1, "", "DirichletInit"], [147, 3, 1, "", "dirichlet_init_"]], "hypercoil.init.domain": [[149, 1, 1, "", "AmplitudeAtanh"], [150, 1, 1, "", "AmplitudeMultiLogit"], [151, 1, 1, "", "Atanh"], [152, 1, 1, "", "Logit"], [153, 1, 1, "", "MultiLogit"], [154, 1, 1, "", "UnitNormSphere"]], "hypercoil.init.domain.AmplitudeAtanh": [[149, 2, 1, "", "handle_ood"], [149, 2, 1, "", "image"], [149, 2, 1, "", "preimage"], [149, 2, 1, "", "test"]], "hypercoil.init.domain.AmplitudeMultiLogit": [[150, 2, 1, "", "handle_ood"], [150, 2, 1, "", "image"], [150, 2, 1, "", "preimage"], [150, 2, 1, "", "test"]], "hypercoil.init.domain.Atanh": [[151, 2, 1, "", "handle_ood"], [151, 2, 1, "", "image"], [151, 2, 1, "", "preimage"], [151, 2, 1, "", "test"]], "hypercoil.init.domain.Logit": [[152, 2, 1, "", "handle_ood"], [152, 2, 1, "", "image"], [152, 2, 1, "", "preimage"], [152, 2, 1, "", "test"]], "hypercoil.init.domain.MultiLogit": [[153, 2, 1, "", "handle_ood"], [153, 2, 1, "", "image"], [153, 2, 1, "", "preimage"], [153, 2, 1, "", "test"]], "hypercoil.init.domain.UnitNormSphere": [[154, 2, 1, "", "handle_ood"], [154, 2, 1, "", "image"], [154, 2, 1, "", "preimage"], [154, 2, 1, "", "test"]], "hypercoil.init.domainbase": [[156, 1, 1, "", "Affine"], [157, 1, 1, "", "Clip"], [158, 1, 1, "", "Identity"], [159, 1, 1, "", "Linear"], [160, 1, 1, "", "Normalise"], [161, 1, 1, "", "_Domain"], [162, 1, 1, "", "_PhaseAmplitudeDomain"]], "hypercoil.init.domainbase.Affine": [[156, 2, 1, "", "handle_ood"], [156, 2, 1, "", "image"], [156, 2, 1, "", "preimage"], [156, 2, 1, "", "test"]], "hypercoil.init.domainbase.Clip": [[157, 2, 1, "", "apply"], [157, 2, 1, "", "test"]], "hypercoil.init.domainbase.Identity": [[158, 2, 1, "", "handle_ood"], [158, 2, 1, "", "image"], [158, 2, 1, "", "preimage"], [158, 2, 1, "", "test"]], "hypercoil.init.domainbase.Linear": [[159, 2, 1, "", "handle_ood"], [159, 2, 1, "", "image"], [159, 2, 1, "", "preimage"], [159, 2, 1, "", "test"]], "hypercoil.init.domainbase.Normalise": [[160, 2, 1, "", "apply"], [160, 2, 1, "", "test"]], "hypercoil.init.domainbase._Domain": [[161, 2, 1, "", "handle_ood"], [161, 2, 1, "", "image"], [161, 2, 1, "", "preimage"], [161, 2, 1, "", "test"]], "hypercoil.init.domainbase._PhaseAmplitudeDomain": [[162, 2, 1, "", "handle_ood"], [162, 2, 1, "", "image"], [162, 2, 1, "", "preimage"], [162, 2, 1, "", "test"]], "hypercoil.init.freqfilter": [[164, 1, 1, "", "FreqFilterSpec"], [165, 3, 1, "", "clamp_init_"], [166, 3, 1, "", "freqfilter_init_"]], "hypercoil.init.freqfilter.FreqFilterSpec": [[164, 2, 1, "", "get_clamps"], [164, 2, 1, "", "initialise_spectrum"]], "hypercoil.init.iirfilter": [[167, 1, 1, "", "IIRFilterSpec"]], "hypercoil.init.iirfilter.IIRFilterSpec": [[167, 2, 1, "", "initialise_coefs"]], "hypercoil.init.laplace": [[168, 1, 1, "", "LaplaceInit"], [168, 3, 1, "", "laplace_init_"]], "hypercoil.init.mpbl": [[170, 1, 1, "", "BipartiteLatticeInit"]], "hypercoil.init.semidefinite": [[172, 1, 1, "", "SPDEuclideanMean"], [172, 1, 1, "", "SPDGeometricMean"], [172, 1, 1, "", "SPDHarmonicMean"], [172, 1, 1, "", "SPDLogEuclideanMean"], [173, 1, 1, "", "TangencyInit"], [173, 3, 1, "", "tangency_init_"]], "hypercoil.init.sylo": [[174, 3, 1, "", "sylo_init_"]], "hypercoil.init.toeplitz": [[175, 1, 1, "", "ToeplitzInit"], [175, 3, 1, "", "toeplitz_init_"]], "hypercoil.loss.base": [[176, 1, 1, "", "LossApply"], [177, 1, 1, "", "ReducingLoss"]], "hypercoil.loss.base.LossApply": [[176, 2, 1, "", "forward"], [176, 2, 1, "", "register_action"], [176, 2, 1, "", "register_sentry"]], "hypercoil.loss.base.ReducingLoss": [[177, 2, 1, "", "forward"], [177, 2, 1, "", "register_action"], [177, 2, 1, "", "register_sentry"]], "hypercoil.loss.batchcorr": [[178, 1, 1, "", "BatchCorrelation"], [179, 1, 1, "", "QCFC"], [180, 3, 1, "", "auto_tol"]], "hypercoil.loss.batchcorr.BatchCorrelation": [[178, 2, 1, "", "forward"], [178, 2, 1, "", "register_action"], [178, 2, 1, "", "register_sentry"]], "hypercoil.loss.batchcorr.QCFC": [[179, 2, 1, "", "forward"], [179, 2, 1, "", "register_action"], [179, 2, 1, "", "register_sentry"]], "hypercoil.loss.cmass": [[181, 1, 1, "", "Compactness"], [182, 1, 1, "", "HemisphericTether"]], "hypercoil.loss.cmass.Compactness": [[181, 2, 1, "", "forward"], [181, 2, 1, "", "register_action"], [181, 2, 1, "", "register_sentry"]], "hypercoil.loss.cmass.HemisphericTether": [[182, 2, 1, "", "forward"], [182, 2, 1, "", "register_action"], [182, 2, 1, "", "register_sentry"]], "hypercoil.loss.connectopy": [[183, 3, 1, "", "connectopy_loss"]], "hypercoil.loss": [[184, 0, 0, "-", "determinant"], [186, 0, 0, "-", "entropy"], [187, 0, 0, "-", "equilibrium"], [189, 0, 0, "-", "jsdiv"], [195, 0, 0, "-", "scheme"], [196, 0, 0, "-", "secondmoment"], [198, 0, 0, "-", "symbimodal"]], "hypercoil.loss.determinant": [[184, 1, 1, "", "DetCorr"], [184, 1, 1, "", "Determinant"], [184, 1, 1, "", "LogDet"], [184, 1, 1, "", "LogDetCorr"]], "hypercoil.loss.determinant.DetCorr": [[184, 2, 1, "", "forward"], [184, 2, 1, "", "register_action"], [184, 2, 1, "", "register_sentry"]], "hypercoil.loss.determinant.Determinant": [[184, 2, 1, "", "forward"], [184, 2, 1, "", "register_action"], [184, 2, 1, "", "register_sentry"]], "hypercoil.loss.determinant.LogDet": [[184, 2, 1, "", "forward"], [184, 2, 1, "", "register_action"], [184, 2, 1, "", "register_sentry"]], "hypercoil.loss.determinant.LogDetCorr": [[184, 2, 1, "", "forward"], [184, 2, 1, "", "register_action"], [184, 2, 1, "", "register_sentry"]], "hypercoil.loss.dispersion": [[185, 1, 1, "", "VectorDispersion"]], "hypercoil.loss.dispersion.VectorDispersion": [[185, 2, 1, "", "forward"], [185, 2, 1, "", "register_action"], [185, 2, 1, "", "register_sentry"]], "hypercoil.loss.entropy": [[186, 1, 1, "", "Entropy"], [186, 1, 1, "", "SoftmaxEntropy"]], "hypercoil.loss.entropy.Entropy": [[186, 2, 1, "", "forward"], [186, 2, 1, "", "register_action"], [186, 2, 1, "", "register_sentry"]], "hypercoil.loss.entropy.SoftmaxEntropy": [[186, 2, 1, "", "forward"], [186, 2, 1, "", "register_action"], [186, 2, 1, "", "register_sentry"]], "hypercoil.loss.equilibrium": [[187, 1, 1, "", "Equilibrium"], [187, 1, 1, "", "SoftmaxEquilibrium"]], "hypercoil.loss.equilibrium.Equilibrium": [[187, 2, 1, "", "forward"], [187, 2, 1, "", "register_action"], [187, 2, 1, "", "register_sentry"]], "hypercoil.loss.equilibrium.SoftmaxEquilibrium": [[187, 2, 1, "", "forward"], [187, 2, 1, "", "register_action"], [187, 2, 1, "", "register_sentry"]], "hypercoil.loss.hinge": [[188, 1, 1, "", "HingeLoss"]], "hypercoil.loss.hinge.HingeLoss": [[188, 2, 1, "", "forward"], [188, 2, 1, "", "register_action"], [188, 2, 1, "", "register_sentry"]], "hypercoil.loss.jsdiv": [[189, 1, 1, "", "JSDivergence"], [189, 1, 1, "", "SoftmaxJSDivergence"]], "hypercoil.loss.jsdiv.JSDivergence": [[189, 2, 1, "", "forward"], [189, 2, 1, "", "register_action"], [189, 2, 1, "", "register_sentry"]], "hypercoil.loss.jsdiv.SoftmaxJSDivergence": [[189, 2, 1, "", "forward"], [189, 2, 1, "", "register_action"], [189, 2, 1, "", "register_sentry"]], "hypercoil.loss.modularity": [[190, 1, 1, "", "ModularityLoss"]], "hypercoil.loss.modularity.ModularityLoss": [[190, 2, 1, "", "forward"], [190, 2, 1, "", "register_action"], [190, 2, 1, "", "register_sentry"]], "hypercoil.loss.mvkurtosis": [[191, 1, 1, "", "MultivariateKurtosis"]], "hypercoil.loss.mvkurtosis.MultivariateKurtosis": [[191, 2, 1, "", "forward"], [191, 2, 1, "", "register_action"], [191, 2, 1, "", "register_sentry"]], "hypercoil.loss.norm": [[192, 1, 1, "", "ConstraintViolation"], [193, 1, 1, "", "NormedLoss"], [194, 1, 1, "", "UnilateralNormedLoss"]], "hypercoil.loss.norm.ConstraintViolation": [[192, 2, 1, "", "forward"], [192, 2, 1, "", "register_action"], [192, 2, 1, "", "register_sentry"]], "hypercoil.loss.norm.NormedLoss": [[193, 2, 1, "", "forward"], [193, 2, 1, "", "register_action"], [193, 2, 1, "", "register_sentry"]], "hypercoil.loss.norm.UnilateralNormedLoss": [[194, 2, 1, "", "forward"], [194, 2, 1, "", "register_action"], [194, 2, 1, "", "register_sentry"]], "hypercoil.loss.scheme": [[195, 1, 1, "", "LossScheme"]], "hypercoil.loss.scheme.LossScheme": [[195, 2, 1, "", "forward"], [195, 2, 1, "", "register_action"], [195, 2, 1, "", "register_sentry"]], "hypercoil.loss.secondmoment": [[196, 1, 1, "", "SecondMoment"], [196, 1, 1, "", "SecondMomentCentred"]], "hypercoil.loss.secondmoment.SecondMoment": [[196, 2, 1, "", "forward"], [196, 2, 1, "", "register_action"], [196, 2, 1, "", "register_sentry"]], "hypercoil.loss.secondmoment.SecondMomentCentred": [[196, 2, 1, "", "forward"], [196, 2, 1, "", "register_action"], [196, 2, 1, "", "register_sentry"]], "hypercoil.loss.smoothness": [[197, 1, 1, "", "SmoothnessPenalty"]], "hypercoil.loss.smoothness.SmoothnessPenalty": [[197, 2, 1, "", "forward"], [197, 2, 1, "", "register_action"], [197, 2, 1, "", "register_sentry"]], "hypercoil.loss.symbimodal": [[198, 1, 1, "", "SymmetricBimodal"], [198, 1, 1, "", "SymmetricBimodalNorm"]], "hypercoil.loss.symbimodal.SymmetricBimodal": [[198, 2, 1, "", "forward"], [198, 2, 1, "", "register_action"], [198, 2, 1, "", "register_sentry"]], "hypercoil.loss.symbimodal.SymmetricBimodalNorm": [[198, 2, 1, "", "forward"], [198, 2, 1, "", "register_action"], [198, 2, 1, "", "register_sentry"]], "hypercoil.neuro": [[199, 0, 0, "-", "synth"]], "hypercoil.neuro.synth": [[200, 3, 1, "", "match_cov_and_spectrum"], [201, 3, 1, "", "match_covariance"], [202, 3, 1, "", "match_reference"], [203, 3, 1, "", "match_spectra"], [204, 3, 1, "", "synthesise_from_cov_and_spectrum"], [205, 3, 1, "", "synthesise_matched"]], "hypercoil.nn": [[206, 0, 0, "-", "activation"], [208, 0, 0, "-", "atlas"], [211, 0, 0, "-", "cov"], [220, 0, 0, "-", "iirfilter"], [221, 0, 0, "-", "interpolate"], [225, 0, 0, "-", "recombinator"], [229, 0, 0, "-", "select"], [233, 0, 0, "-", "semidefinite"], [238, 0, 0, "-", "sylo"], [241, 0, 0, "-", "vertcom"]], "hypercoil.nn.activation": [[207, 1, 1, "", "CorrelationNorm"]], "hypercoil.nn.atlas": [[209, 1, 1, "", "AtlasAccumuline"], [210, 1, 1, "", "AtlasLinear"]], "hypercoil.nn.cov": [[212, 1, 1, "", "BinaryCovariance"], [213, 1, 1, "", "BinaryCovarianceTW"], [214, 1, 1, "", "BinaryCovarianceUW"], [215, 1, 1, "", "UnaryCovariance"], [216, 1, 1, "", "UnaryCovarianceTW"], [217, 1, 1, "", "UnaryCovarianceUW"], [218, 1, 1, "", "_Cov"]], "hypercoil.nn.freqfilter": [[219, 1, 1, "", "FrequencyDomainFilter"]], "hypercoil.nn.iirfilter": [[220, 1, 1, "", "IIRFiltFilt"], [220, 1, 1, "", "IIRFilter"]], "hypercoil.nn.interpolate": [[222, 1, 1, "", "HybridInterpolate"], [223, 1, 1, "", "SpectralInterpolate"], [224, 1, 1, "", "WeightedInterpolate"]], "hypercoil.nn.recombinator": [[226, 3, 1, "", "QueryEncoder"], [227, 3, 1, "", "Recombinator"]], "hypercoil.nn.resid": [[228, 0, 0, "-", "Residualise"]], "hypercoil.nn.select": [[230, 1, 1, "", "EliminationSelector"], [231, 1, 1, "", "LinearCombinationSelector"], [232, 1, 1, "", "ResponseFunctionLinearSelector"]], "hypercoil.nn.semidefinite": [[234, 3, 1, "", "BatchTangentProject"], [235, 3, 1, "", "TangentProject"]], "hypercoil.nn.spdnoise": [[236, 1, 1, "", "SPDNoise"]], "hypercoil.nn.svm": [[237, 1, 1, "", "SVM"]], "hypercoil.nn.sylo": [[239, 1, 1, "", "Sylo"], [240, 3, 1, "", "SyloResNet"]], "hypercoil.nn.vertcom": [[242, 3, 1, "", "VerticalCompression"], [243, 3, 1, "", "vertical_compression"]], "hypercoil.nn.window": [[244, 1, 1, "", "WindowAmplifier"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"bid": 0, "interfac": [0, 24], "content": [0, 7, 11, 24, 27, 128, 245, 250, 251], "bidsobjectfactori": 1, "lightbidslayout": 2, "lightbidsobject": 3, "fmriprepdataset": 4, "fmriprep_refer": 5, "collat": 6, "batch": 6, "function": [6, 14, 30, 107, 183, 206, 249], "dataref": 7, "data": [7, 14, 15, 199, 245, 255], "refer": [7, 38, 254], "dataqueri": 8, "datarefer": 9, "data_refer": 10, "dataset": [11, 20], "referenc": 11, "referenceddataload": 12, "referenceddataset": 13, "transform": 14, "categori": 14, "frame": 15, "get_col": 15, "apply_model_spec": 15, "read_data_fram": [15, 16], "i": 16, "o": 16, "filesystem": 16, "read_neuro_imag": [16, 20], "read_json": [16, 18], "change_extens": 16, "gener": 17, "us": 17, "ident": [17, 158], "get_path_from_var": 17, "apply_transform": 17, "apply_to_select": 17, "transform_block": 17, "unzip_blocked_dict": 17, "transpos": 17, "vector_encod": 17, "metadata": 18, "dump_data": 18, "get_metadata_vari": 18, "miss": 19, "valu": 19, "nanfil": 19, "fillnan": 19, "extend_to_max_s": [19, 21], "neuroimag": 20, "nifti_head": 20, "cwb_cifti_head": 20, "tensor": 21, "cast": 21, "bind": 21, "to_tensor": 21, "to_named_tensor": 21, "consolidate_block": 21, "extend_to_s": 21, "time": [22, 113], "seri": [22, 113], "polynomial_detrend": 22, "standardis": 22, "normalis": [22, 34, 160, 207], "window": 22, "random_window": 22, "window_map": 22, "lightgrabb": 23, "hcp": 24, "hcp_refer": 25, "fmridatarefer": 26, "accumul": [27, 29, 209], "local": 27, "gradient": 27, "accumulatingfunct": 28, "activ": [30, 206], "amplitude_atanh": 31, "amplitude_tanh": 32, "corrnorm": 33, "isochor": 34, "psd": 34, "cmass": [35, 36], "centr": [35, 36, 37, 38, 39], "mass": [35, 36, 37, 38, 39], "arrai": 36, "coordin": [36, 37, 100], "cmass_coor": 37, "ani": 37, "displac": 38, "from": 38, "diffus": 39, "around": 39, "connectopi": [40, 183], "connectop": [40, 183], "manifold": 40, "diffusion_map": 41, "laplacian_eigenmap": 42, "cov": [43, 47, 211], "covari": [43, 45, 47, 49, 51, 52, 211, 218], "correl": [43, 44, 46, 48, 50, 207], "conditionalcorr": 44, "condit": [44, 45], "conditionalcov": 45, "corr": [46, 184], "pearson": 46, "pairedcorr": 48, "pair": [48, 49], "pairedcov": 49, "partialcorr": 50, "partial": [50, 51], "partialcov": 51, "precis": 52, "invers": 52, "fourier": 53, "frequenc": [53, 163, 219], "domain": [53, 148, 155, 219], "filter": [53, 61, 167, 219, 220], "analytic_sign": 54, "env_inst": 55, "envelop": 56, "hilbert_transform": 57, "instantaneous_frequ": 58, "instantaneous_phas": 59, "product_filt": 60, "product_filtfilt": 61, "zero": 61, "phase": [61, 62], "unwrap": 62, "graph": [63, 66], "network": [63, 256], "coaffili": 64, "commun": 64, "girvan_newman_nul": 65, "graph_laplacian": 66, "laplacian": 66, "modularity_matrix": 67, "relaxed_modular": 68, "interpol": [69, 70, 221], "imput": 69, "hybrid_interpol": 70, "weight": 70, "spectral": 70, "spectral_interpol": 71, "weighted_interpol": 72, "kernel": 73, "parameteris": 73, "cosine_kernel": 74, "gaussian_kernel": 75, "linear_kernel": 76, "polynomial_kernel": 77, "rbf_kernel": 78, "sigmoid_kernel": 79, "matrix": [80, 108], "oper": 80, "delete_diagon": 81, "expand_out": 82, "fill_diagon": 83, "invert_spd": 84, "recondition_eigenspac": 85, "spd": 86, "squareform": 87, "sym2vec": 88, "symmetr": [89, 108], "toeplitz": [90, 175], "vec2sym": 91, "residualis": [92, 228], "semidefinit": [93, 171, 233], "posit": 93, "cone": 93, "cone_project_spd": 94, "mean_euc_spd": 95, "mean_geom_spd": 96, "mean_harm_spd": 97, "mean_logeuc_spd": 98, "tangent_project_spd": 99, "sphere": 100, "spheric": 100, "euclidean_conv": 101, "spatial_conv": 102, "sphere_to_latlong": 103, "sphere_to_norm": 104, "spherical_conv": 105, "spherical_geodes": 106, "sylo": [107, 174, 238, 239], "symmap": [108, 111], "map": [108, 250], "symexp": 109, "symlog": 110, "symsqrt": 112, "tsconv": 113, "convolut": 113, "basischan": 114, "basisconv2d": 115, "polychan": 116, "polyconv2d": 117, "tsconv2d": 118, "util": [119, 255], "miscellan": 119, "apply_mask": 120, "complex_decompos": 121, "complex_recompos": 122, "conform_mask": 123, "orient_and_conform": 124, "sparse_mm": 125, "dimens": 125, "broadcast": 125, "sparse_rcmul": 126, "wmean": 127, "atla": [128, 138, 208, 209, 210], "initialis": [128, 139, 251], "atlasinit": 129, "baseatla": 130, "cortexsubcortexciftiatla": 131, "dirichletinitbaseatla": 132, "dirichletinitsurfaceatla": 133, "dirichletinitvolumetricatla": 134, "discretevolumetricatla": 135, "multivolumetricatla": 136, "multifilevolumetricatla": 137, "atlasmixin": 138, "mixin": 138, "referencemixin": 138, "maskmixin": 138, "compartmentmixin": 138, "labelmixin": 138, "meshmixin": 138, "convmixin": 138, "base": [139, 155, 184, 196, 218], "constantinitialis": 140, "distributioninitialis": 141, "domaininitialis": 142, "constant_init_": 143, "from_distr_init_": 144, "identity_init_": 145, "deltaplu": 146, "deltaplus_init": 146, "deltaplusinit": 146, "dirichlet": 147, "dirichlet_init": 147, "dirichletinit": 147, "mapper": [148, 155], "amplitudeatanh": 149, "amplitudemultilogit": 150, "atanh": 151, "logit": 152, "multilogit": 153, "unitnormspher": 154, "domainbas": 155, "class": [155, 218], "affin": 156, "clip": 157, "ood": [157, 160], "handler": [157, 160], "linear": [159, 209, 210], "_domain": 161, "_phaseamplitudedomain": 162, "freqfilt": [163, 219], "band": 163, "init": [163, 167, 251], "freqfilterspec": 164, "clamp_init_": 165, "freqfilter_init_": 166, "iirfilt": [167, 220], "iir": [167, 220], "iirfilterspec": 167, "laplac": 168, "laplace_init": 168, "laplaceinit": 168, "mask": 169, "logic": 169, "maskthreshold": 169, "maskuthreshold": 169, "maskdil": 169, "maskeros": 169, "maskopen": 169, "maskclos": 169, "maskfillhol": 169, "maskneg": 169, "maskunion": 169, "maskintersect": 169, "floatleaf": 169, "maskleaf": 169, "mpbl": 170, "semidefinitemean": 172, "spdeuclideanmean": 172, "spdharmonicmean": 172, "spdlogeuclideanmean": 172, "spdgeometricmean": 172, "tangencyinit": 173, "tangency_init_": 173, "toeplitz_init": 175, "toeplitzinit": 175, "lossappli": 176, "reducingloss": 177, "batchcorrel": 178, "qcfc": 179, "auto_tol": 180, "compact": 181, "hemisphericteth": 182, "hemispher": 182, "tether": 182, "loss": [183, 184, 196, 253], "determin": 184, "log": 184, "det": 184, "logdetcorr": 184, "detcorr": 184, "logdet": 184, "vectordispers": 185, "vector": 185, "dispers": 185, "entropi": 186, "softmaxentropi": 186, "equilibrium": 187, "softmaxequilibrium": 187, "hingeloss": 188, "jsdiverg": 189, "softmaxjsdiverg": 189, "modularityloss": 190, "girvan": 190, "newman": 190, "modular": 190, "relax": 190, "multivariatekurtosi": 191, "constraintviol": 192, "normedloss": 193, "unilateralnormedloss": 194, "lossschem": 195, "secondmo": 196, "second": 196, "moment": 196, "secondmomentcentr": 196, "smoothnesspenalti": 197, "symmetricbimod": 198, "symmetricbimodalnorm": 198, "synth": 199, "synthesi": 199, "match_cov_and_spectrum": 200, "paramet": 200, "match_covari": 201, "match_refer": 202, "match_spectra": 203, "synthesise_from_cov_and_spectrum": 204, "synthesise_match": 205, "modul": [206, 211, 256], "correlationnorm": 207, "layer": [208, 210, 219, 220, 221], "atlasaccumulin": 209, "atlaslinear": 210, "binarycovari": 212, "binarycovariancetw": 213, "binarycovarianceuw": 214, "unarycovari": 215, "unarycovariancetw": 216, "unarycovarianceuw": 217, "_cov": 218, "hybridinterpol": 222, "spectralinterpol": 223, "weightedinterpol": 224, "recombin": [225, 227], "queryencod": 226, "select": 229, "model": 229, "eliminationselector": 230, "linearcombinationselector": 231, "responsefunctionlinearselector": 232, "batchtangentproject": 234, "tangentproject": 235, "spdnois": 236, "svm": 237, "syloresnet": 240, "vertcom": 241, "vertex": 241, "compress": 241, "verticalcompress": 242, "vertical_compress": 243, "windowamplifi": 244, "engin": [245, 247], "framework": 246, "differenti": [247, 250], "eval": 248, "benchmark": 248, "evalu": 248, "program": 250, "brain": 250, "indic": 250, "tabl": 250, "scheme": 251, "instal": 252, "regularis": 253, "api": 254, "neuro": 255, "neurosci": 255, "nn": 256, "neural": 256, "poster": 257, "land": 257, "page": 257, "viz": 258, "visualis": 258}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"bids: BIDS interfaces": [[0, "module-hypercoil.data.bids"]], "Contents:": [[0, null], [7, null], [11, null], [24, null], [27, null], [128, null], [245, null], [250, null], [251, null]], "BIDSObjectFactory": [[1, "bidsobjectfactory"]], "LightBIDSLayout": [[2, "lightbidslayout"]], "LightBIDSObject": [[3, "lightbidsobject"]], "fMRIPrepDataset": [[4, "fmriprepdataset"]], "fmriprep_references": [[5, "fmriprep-references"]], "collate: Batch collation functionality": [[6, "module-hypercoil.data.collate"]], "dataref: Data references": [[7, "module-hypercoil.data.dataref"]], "DataQuery": [[8, "dataquery"]], "DataReference": [[9, "datareference"]], "data_references": [[10, "data-references"]], "dataset: Referenced datasets": [[11, "module-hypercoil.data.dataset"]], "ReferencedDataLoader": [[12, "referenceddataloader"]], "ReferencedDataset": [[13, "referenceddataset"]], "functional: Data transform functions": [[14, "module-hypercoil.data.functional"]], "Transform categories:": [[14, null]], "Data frames": [[15, "data-frames"]], "get_col": [[15, "get-col"]], "apply_model_specs": [[15, "apply-model-specs"]], "read_data_frame": [[15, "read-data-frame"], [16, "read-data-frame"]], "I/O and filesystem": [[16, "i-o-and-filesystem"]], "read_neuro_image": [[16, "read-neuro-image"], [20, "read-neuro-image"]], "read_json": [[16, "read-json"], [18, "read-json"]], "change_extension": [[16, "change-extension"]], "General use": [[17, "general-use"]], "identity": [[17, "identity"]], "get_path_from_var": [[17, "get-path-from-var"]], "apply_transform": [[17, "apply-transform"]], "apply_to_select": [[17, "apply-to-select"]], "transform_block": [[17, "transform-block"]], "unzip_blocked_dict": [[17, "unzip-blocked-dict"]], "transpose": [[17, "transpose"]], "vector_encode": [[17, "vector-encode"]], "Metadata": [[18, "metadata"]], "dump_data": [[18, "dump-data"]], "get_metadata_variable": [[18, "get-metadata-variable"]], "Missing values": [[19, "missing-values"]], "nanfill": [[19, "nanfill"]], "fillnan": [[19, "fillnan"]], "extend_to_max_size": [[19, "extend-to-max-size"], [21, "extend-to-max-size"]], "Neuroimaging datasets": [[20, "neuroimaging-datasets"]], "nifti_header": [[20, "nifti-header"]], "cwb_cifti_header": [[20, "cwb-cifti-header"]], "Tensor casting and binding": [[21, "tensor-casting-and-binding"]], "to_tensor": [[21, "to-tensor"]], "to_named_tensor": [[21, "to-named-tensor"]], "consolidate_block": [[21, "consolidate-block"]], "extend_to_size": [[21, "extend-to-size"]], "Time series": [[22, "time-series"]], "polynomial_detrend": [[22, "polynomial-detrend"]], "standardise": [[22, "standardise"]], "normalise": [[22, "normalise"]], "window": [[22, "window"]], "random_window": [[22, "random-window"]], "window_map": [[22, "window-map"]], "LightGrabber": [[23, "lightgrabber"]], "hcp: HCP interfaces": [[24, "module-hypercoil.data.hcp"]], "hcp_references": [[25, "hcp-references"]], "fMRIDataReference": [[26, "fmridatareference"]], "accumulate: Local gradient accumulation": [[27, "module-hypercoil.engine.accumulate"]], "AccumulatingFunction": [[28, "accumulatingfunction"]], "Accumulator": [[29, "accumulator"]], "activation: Activation functions": [[30, "module-hypercoil.functional.activation"]], "amplitude_atanh": [[31, "amplitude-atanh"]], "amplitude_tanh": [[32, "amplitude-tanh"]], "corrnorm": [[33, "corrnorm"]], "isochor: PSD normalisation": [[34, "isochor-psd-normalisation"]], "cmass: Centre of mass": [[35, "module-hypercoil.functional.cmass"]], "cmass: Centre of mass, array coordinates": [[36, "cmass-centre-of-mass-array-coordinates"]], "cmass_coor: Centre of mass, any coordinates": [[37, "cmass-coor-centre-of-mass-any-coordinates"]], "Displacement from a reference centre of mass": [[38, "displacement-from-a-reference-centre-of-mass"]], "diffuse: Diffuseness around centre of mass": [[39, "diffuse-diffuseness-around-centre-of-mass"]], "connectopy: Connectopic manifolds": [[40, "module-hypercoil.functional.connectopy"]], "diffusion_mapping": [[41, "diffusion-mapping"]], "laplacian_eigenmaps": [[42, "laplacian-eigenmaps"]], "cov: Covariances and correlations": [[43, "module-hypercoil.functional.cov"]], "conditionalcorr: Conditional correlation": [[44, "conditionalcorr-conditional-correlation"]], "conditionalcov: Conditional covariance": [[45, "conditionalcov-conditional-covariance"]], "corr: Pearson correlation": [[46, "corr-pearson-correlation"]], "cov: Covariance": [[47, "cov-covariance"]], "pairedcorr: Paired correlation": [[48, "pairedcorr-paired-correlation"]], "pairedcov: Paired covariance": [[49, "pairedcov-paired-covariance"]], "partialcorr: Partial correlation": [[50, "partialcorr-partial-correlation"]], "partialcov: Partial covariance": [[51, "partialcov-partial-covariance"]], "precision: Inverse covariance (precision)": [[52, "precision-inverse-covariance-precision"]], "fourier: Frequency-domain filter": [[53, "module-hypercoil.functional.fourier"]], "analytic_signal": [[54, "analytic-signal"]], "env_inst": [[55, "env-inst"]], "envelope": [[56, "envelope"]], "hilbert_transform": [[57, "hilbert-transform"]], "instantaneous_frequency": [[58, "instantaneous-frequency"]], "instantaneous_phase": [[59, "instantaneous-phase"]], "product_filter": [[60, "product-filter"]], "product_filtfilt: Zero-phase filter": [[61, "product-filtfilt-zero-phase-filter"]], "unwrap: Unwrap phase": [[62, "unwrap-unwrap-phase"]], "graph: Graphs and networks": [[63, "module-hypercoil.functional.graph"]], "coaffiliation: Community coaffiliation": [[64, "coaffiliation-community-coaffiliation"]], "girvan_newman_null": [[65, "girvan-newman-null"]], "graph_laplacian: Graph Laplacian": [[66, "graph-laplacian-graph-laplacian"]], "modularity_matrix": [[67, "modularity-matrix"]], "relaxed_modularity": [[68, "relaxed-modularity"]], "interpolate: Interpolation and imputation": [[69, "module-hypercoil.functional.interpolate"]], "hybrid_interpolate: Weighted + spectral interpolation": [[70, "hybrid-interpolate-weighted-spectral-interpolation"]], "spectral_interpolate": [[71, "spectral-interpolate"]], "weighted_interpolate": [[72, "weighted-interpolate"]], "kernel: Parameterised kernels": [[73, "module-hypercoil.functional.kernel"]], "cosine_kernel": [[74, "cosine-kernel"]], "gaussian_kernel": [[75, "gaussian-kernel"]], "linear_kernel": [[76, "linear-kernel"]], "polynomial_kernel": [[77, "polynomial-kernel"]], "rbf_kernel": [[78, "rbf-kernel"]], "sigmoid_kernel": [[79, "sigmoid-kernel"]], "matrix: Matrix operations": [[80, "module-hypercoil.functional.matrix"]], "delete_diagonal": [[81, "delete-diagonal"]], "expand_outer": [[82, "expand-outer"]], "fill_diagonal": [[83, "fill-diagonal"]], "invert_spd": [[84, "invert-spd"]], "recondition_eigenspaces": [[85, "recondition-eigenspaces"]], "spd": [[86, "spd"]], "squareform": [[87, "squareform"]], "sym2vec": [[88, "sym2vec"]], "symmetric": [[89, "symmetric"]], "toeplitz": [[90, "toeplitz"], [175, "module-hypercoil.init.toeplitz"]], "vec2sym": [[91, "vec2sym"]], "residualise": [[92, "residualise"]], "semidefinite: Positive semidefinite cone": [[93, "module-hypercoil.functional.semidefinite"]], "cone_project_spd": [[94, "cone-project-spd"]], "mean_euc_spd": [[95, "mean-euc-spd"]], "mean_geom_spd": [[96, "mean-geom-spd"]], "mean_harm_spd": [[97, "mean-harm-spd"]], "mean_logeuc_spd": [[98, "mean-logeuc-spd"]], "tangent_project_spd": [[99, "tangent-project-spd"]], "sphere: Spherical coordinates": [[100, "module-hypercoil.functional.sphere"]], "euclidean_conv": [[101, "euclidean-conv"]], "spatial_conv": [[102, "spatial-conv"]], "sphere_to_latlong": [[103, "sphere-to-latlong"]], "sphere_to_normals": [[104, "sphere-to-normals"]], "spherical_conv": [[105, "spherical-conv"]], "spherical_geodesic": [[106, "spherical-geodesic"]], "sylo: Sylo function": [[107, "module-hypercoil.functional.sylo"]], "symmap: Symmetric matrix maps": [[108, "module-hypercoil.functional.symmap"]], "symexp": [[109, "symexp"]], "symlog": [[110, "symlog"]], "symmap": [[111, "symmap"]], "symsqrt": [[112, "symsqrt"]], "tsconv: Time series convolution": [[113, "module-hypercoil.functional.tsconv"]], "basischan": [[114, "basischan"]], "basisconv2d": [[115, "basisconv2d"]], "polychan": [[116, "polychan"]], "polyconv2d": [[117, "polyconv2d"]], "tsconv2d": [[118, "tsconv2d"]], "utils: Miscellaneous": [[119, "module-hypercoil.functional.utils"]], "apply_mask": [[120, "apply-mask"]], "complex_decompose": [[121, "complex-decompose"]], "complex_recompose": [[122, "complex-recompose"]], "conform_mask": [[123, "conform-mask"]], "orient_and_conform": [[124, "orient-and-conform"]], "sparse_mm": [[125, "sparse-mm"]], "Dimensions and broadcasting": [[125, null]], "sparse_rcmul": [[126, "sparse-rcmul"]], "wmean": [[127, "wmean"]], "atlas: Atlas initialisation": [[128, "module-hypercoil.init.atlas"]], "AtlasInit": [[129, "atlasinit"]], "BaseAtlas": [[130, "baseatlas"]], "CortexSubcortexCIfTIAtlas": [[131, "cortexsubcortexciftiatlas"]], "DirichletInitBaseAtlas": [[132, "dirichletinitbaseatlas"]], "DirichletInitSurfaceAtlas": [[133, "dirichletinitsurfaceatlas"]], "DirichletInitVolumetricAtlas": [[134, "dirichletinitvolumetricatlas"]], "DiscreteVolumetricAtlas": [[135, "discretevolumetricatlas"]], "MultiVolumetricAtlas": [[136, "multivolumetricatlas"]], "MultifileVolumetricAtlas": [[137, "multifilevolumetricatlas"]], "atlasmixins: Atlas mixins": [[138, "module-hypercoil.init.atlasmixins"]], "~ReferenceMixin": [[138, "referencemixin"]], "~MaskMixin": [[138, "maskmixin"]], "~CompartmentMixin": [[138, "compartmentmixin"]], "~LabelMixin": [[138, "labelmixin"]], "~MeshMixin": [[138, "meshmixin"]], "~ConvMixin": [[138, "convmixin"]], "base: Base initialisations": [[139, "module-hypercoil.init.base"]], "ConstantInitialiser": [[140, "constantinitialiser"]], "DistributionInitialiser": [[141, "distributioninitialiser"]], "DomainInitialiser": [[142, "domaininitialiser"]], "constant_init_": [[143, "constant-init"]], "from_distr_init_": [[144, "from-distr-init"]], "identity_init_": [[145, "identity-init"]], "deltaplus": [[146, "module-hypercoil.init.deltaplus"]], "deltaplus_init": [[146, "deltaplus-init"]], "DeltaPlusInit": [[146, "deltaplusinit"]], "dirichlet": [[147, "module-hypercoil.init.dirichlet"]], "dirichlet_init": [[147, "dirichlet-init"]], "DirichletInit": [[147, "dirichletinit"]], "domain: Domain mappers": [[148, "module-hypercoil.init.domain"]], "AmplitudeAtanh": [[149, "amplitudeatanh"]], "AmplitudeMultiLogit": [[150, "amplitudemultilogit"]], "Atanh": [[151, "atanh"]], "Logit": [[152, "logit"]], "MultiLogit": [[153, "multilogit"]], "UnitNormSphere": [[154, "unitnormsphere"]], "domainbase: Domain mapper base classes": [[155, "module-hypercoil.init.domainbase"]], "Affine": [[156, "affine"]], "Clip: OOD handler": [[157, "clip-ood-handler"]], "Identity": [[158, "identity"]], "Linear": [[159, "linear"]], "Normalise: OOD handler": [[160, "normalise-ood-handler"]], "_Domain": [[161, "domain"]], "_PhaseAmplitudeDomain": [[162, "phaseamplitudedomain"]], "freqfilter: Frequency band init": [[163, "module-hypercoil.init.freqfilter"]], "FreqFilterSpec": [[164, "freqfilterspec"]], "clamp_init_": [[165, "clamp-init"]], "freqfilter_init_": [[166, "freqfilter-init"]], "iirfilter: IIR filter init": [[167, "module-hypercoil.init.iirfilter"]], "IIRFilterSpec": [[167, "iirfilterspec"]], "laplace": [[168, "module-hypercoil.init.laplace"]], "laplace_init": [[168, "laplace-init"]], "LaplaceInit": [[168, "laplaceinit"]], "Mask logic": [[169, "mask-logic"]], "MaskThreshold": [[169, "maskthreshold"]], "MaskUThreshold": [[169, "maskuthreshold"]], "MaskDilation": [[169, "maskdilation"]], "MaskErosion": [[169, "maskerosion"]], "MaskOpening": [[169, "maskopening"]], "MaskClosing": [[169, "maskclosing"]], "MaskFillHoles": [[169, "maskfillholes"]], "MaskNegation": [[169, "masknegation"]], "MaskUnion": [[169, "maskunion"]], "MaskIntersection": [[169, "maskintersection"]], "FloatLeaf": [[169, "floatleaf"]], "MaskLeaf": [[169, "maskleaf"]], "mpbl": [[170, "module-hypercoil.init.mpbl"]], "semidefinite": [[171, "module-hypercoil.init.semidefinite"], [233, "module-hypercoil.nn.semidefinite"]], "SemidefiniteMean": [[172, "semidefinitemean"]], "SPDEuclideanMean": [[172, "spdeuclideanmean"]], "SPDHarmonicMean": [[172, "spdharmonicmean"]], "SPDLogEuclideanMean": [[172, "spdlogeuclideanmean"]], "SPDGeometricMean": [[172, "spdgeometricmean"]], "TangencyInit": [[173, "tangencyinit"], [173, "id1"]], "tangency_init_": [[173, "tangency-init"]], "sylo": [[174, "module-hypercoil.init.sylo"], [238, "module-hypercoil.nn.sylo"]], "toeplitz_init": [[175, "toeplitz-init"]], "ToeplitzInit": [[175, "toeplitzinit"]], "LossApply": [[176, "lossapply"]], "ReducingLoss": [[177, "reducingloss"]], "BatchCorrelation": [[178, "batchcorrelation"]], "QCFC": [[179, "qcfc"]], "auto_tol": [[180, "auto-tol"]], "Compactness": [[181, "compactness"], [181, null]], "HemisphericTether": [[182, "hemispherictether"]], "Hemispheric Tether": [[182, null]], "Connectopy loss functional": [[183, "connectopy-loss-functional"]], "Connectopic loss functional": [[183, null]], "determinant: Log determinant-based losses": [[184, "module-hypercoil.loss.determinant"]], "Log-det-corr": [[184, null]], "LogDetCorr": [[184, "logdetcorr"]], "DetCorr": [[184, "detcorr"]], "LogDet": [[184, "logdet"]], "Determinant": [[184, "determinant"]], "VectorDispersion": [[185, "vectordispersion"]], "Vector dispersion": [[185, null]], "Entropy and SoftmaxEntropy": [[186, "module-hypercoil.loss.entropy"]], "Entropy": [[186, null], [186, "entropy"]], "SoftmaxEntropy": [[186, "softmaxentropy"]], "Equilibrium and SoftmaxEquilibrium": [[187, "module-hypercoil.loss.equilibrium"]], "Equilibrium": [[187, null], [187, "equilibrium"]], "SoftmaxEquilibrium": [[187, "softmaxequilibrium"]], "HingeLoss": [[188, "hingeloss"]], "JSDivergence and SoftmaxJSDivergence": [[189, "module-hypercoil.loss.jsdiv"]], "JSDivergence": [[189, "jsdivergence"]], "SoftmaxJSDivergence": [[189, "softmaxjsdivergence"]], "ModularityLoss": [[190, "modularityloss"]], "Girvan-Newman Modularity Relaxation": [[190, null]], "MultivariateKurtosis": [[191, "multivariatekurtosis"]], "ConstraintViolation": [[192, "constraintviolation"]], "NormedLoss": [[193, "normedloss"]], "UnilateralNormedLoss": [[194, "unilateralnormedloss"]], "LossScheme": [[195, "module-hypercoil.loss.scheme"]], "secondmoment: Second moment-based losses": [[196, "module-hypercoil.loss.secondmoment"]], "Second Moment": [[196, null]], "SecondMoment": [[196, "secondmoment"]], "SecondMomentCentred": [[196, "secondmomentcentred"]], "SmoothnessPenalty": [[197, "smoothnesspenalty"]], "SymmetricBimodal": [[198, "module-hypercoil.loss.symbimodal"], [198, "id1"]], "SymmetricBimodalNorm": [[198, "symmetricbimodalnorm"]], "synth: Data synthesis": [[199, "module-hypercoil.neuro.synth"]], "match_cov_and_spectrum": [[200, "match-cov-and-spectrum"]], "Parameters": [[200, "parameters"]], "match_covariance": [[201, "match-covariance"]], "match_reference": [[202, "match-reference"]], "match_spectra": [[203, "match-spectra"]], "synthesise_from_cov_and_spectrum": [[204, "synthesise-from-cov-and-spectrum"]], "synthesise_matched": [[205, "synthesise-matched"]], "activation: Activation functions as modules": [[206, "module-hypercoil.nn.activation"]], "CorrelationNorm: Correlation normalisation": [[207, "correlationnorm-correlation-normalisation"]], "atlas: Atlas layers": [[208, "module-hypercoil.nn.atlas"]], "AtlasAccumuline: Linear atlas accumulator": [[209, "atlasaccumuline-linear-atlas-accumulator"]], "AtlasLinear: Linear atlas layer": [[210, "atlaslinear-linear-atlas-layer"]], "cov: Covariance modules": [[211, "module-hypercoil.nn.cov"]], "BinaryCovariance": [[212, "binarycovariance"]], "BinaryCovarianceTW": [[213, "binarycovariancetw"]], "BinaryCovarianceUW": [[214, "binarycovarianceuw"]], "UnaryCovariance": [[215, "unarycovariance"]], "UnaryCovarianceTW": [[216, "unarycovariancetw"]], "UnaryCovarianceUW": [[217, "unarycovarianceuw"]], "_Cov: Covariance base class": [[218, "cov-covariance-base-class"]], "freqfilter: Frequency-domain filter layer": [[219, "freqfilter-frequency-domain-filter-layer"]], "iirfilter: IIR filter layer": [[220, "module-hypercoil.nn.iirfilter"]], "interpolate: Interpolation layers": [[221, "module-hypercoil.nn.interpolate"]], "HybridInterpolate": [[222, "hybridinterpolate"]], "SpectralInterpolate": [[223, "spectralinterpolate"]], "WeightedInterpolate": [[224, "weightedinterpolate"]], "recombinator": [[225, "module-hypercoil.nn.recombinator"]], "QueryEncoder": [[226, "queryencoder"]], "Recombinator": [[227, "recombinator"]], "Residualise": [[228, "module-hypercoil.nn.resid.Residualise"]], "select: Model Selection": [[229, "module-hypercoil.nn.select"]], "EliminationSelector": [[230, "eliminationselector"]], "LinearCombinationSelector": [[231, "linearcombinationselector"]], "ResponseFunctionLinearSelector": [[232, "responsefunctionlinearselector"]], "BatchTangentProject": [[234, "batchtangentproject"]], "TangentProject": [[235, "tangentproject"]], "SPDNoise": [[236, "spdnoise"]], "SVM": [[237, "svm"]], "Sylo": [[239, "sylo"]], "SyloResNet": [[240, "syloresnet"]], "vertcom: Vertex compression": [[241, "module-hypercoil.nn.vertcom"]], "VerticalCompression": [[242, "verticalcompression"]], "vertical_compression": [[243, "vertical-compression"]], "WindowAmplifier": [[244, "windowamplifier"]], "data: Data engineering": [[245, "module-hypercoil.data"]], "Framework": [[246, "framework"]], "engine: Differentiable engine": [[247, "module-hypercoil.engine"]], "eval: Benchmarks and evaluation": [[248, "module-hypercoil.eval"]], "functional: Functions and functionals": [[249, "module-hypercoil.functional"]], "Differentiable programming for brain mapping": [[250, "differentiable-programming-for-brain-mapping"]], "Indices and tables": [[250, "indices-and-tables"]], "init: Initialisation schemes": [[251, "module-hypercoil.init"]], "Installation": [[252, "installation"]], "loss: Loss and regularisation": [[253, "module-hypercoil.loss"]], "API reference": [[254, "api-reference"]], "neuro: Neuroscience data utilities": [[255, "module-hypercoil.neuro"]], "nn: Neural network modules": [[256, "module-hypercoil.nn"]], "Poster landing page": [[257, "poster-landing-page"]], "viz: Visualisation": [[258, "viz-visualisation"]]}, "indexentries": {"hypercoil.data.bids": [[0, "module-hypercoil.data.bids"]], "module": [[0, "module-hypercoil.data.bids"], [6, "module-hypercoil.data.collate"], [7, "module-hypercoil.data.dataref"], [11, "module-hypercoil.data.dataset"], [14, "module-hypercoil.data.functional"], [24, "module-hypercoil.data.hcp"], [27, "module-hypercoil.engine.accumulate"], [30, "module-hypercoil.functional.activation"], [35, "module-hypercoil.functional.cmass"], [40, "module-hypercoil.functional.connectopy"], [43, "module-hypercoil.functional.cov"], [53, "module-hypercoil.functional.fourier"], [63, "module-hypercoil.functional.graph"], [69, "module-hypercoil.functional.interpolate"], [73, "module-hypercoil.functional.kernel"], [80, "module-hypercoil.functional.matrix"], [93, "module-hypercoil.functional.semidefinite"], [100, "module-hypercoil.functional.sphere"], [107, "module-hypercoil.functional.sylo"], [108, "module-hypercoil.functional.symmap"], [113, "module-hypercoil.functional.tsconv"], [119, "module-hypercoil.functional.utils"], [128, "module-hypercoil.init.atlas"], [138, "module-hypercoil.init.atlasmixins"], [139, "module-hypercoil.init.base"], [146, "module-hypercoil.init.deltaplus"], [147, "module-hypercoil.init.dirichlet"], [148, "module-hypercoil.init.domain"], [155, "module-hypercoil.init.domainbase"], [163, "module-hypercoil.init.freqfilter"], [167, "module-hypercoil.init.iirfilter"], [168, "module-hypercoil.init.laplace"], [170, "module-hypercoil.init.mpbl"], [171, "module-hypercoil.init.semidefinite"], [174, "module-hypercoil.init.sylo"], [175, "module-hypercoil.init.toeplitz"], [184, "module-hypercoil.loss.determinant"], [186, "module-hypercoil.loss.entropy"], [187, "module-hypercoil.loss.equilibrium"], [189, "module-hypercoil.loss.jsdiv"], [195, "module-hypercoil.loss.scheme"], [196, "module-hypercoil.loss.secondmoment"], [198, "module-hypercoil.loss.symbimodal"], [199, "module-hypercoil.neuro.synth"], [206, "module-hypercoil.nn.activation"], [208, "module-hypercoil.nn.atlas"], [211, "module-hypercoil.nn.cov"], [220, "module-hypercoil.nn.iirfilter"], [221, "module-hypercoil.nn.interpolate"], [225, "module-hypercoil.nn.recombinator"], [228, "module-hypercoil.nn.resid.Residualise"], [229, "module-hypercoil.nn.select"], [233, "module-hypercoil.nn.semidefinite"], [238, "module-hypercoil.nn.sylo"], [241, "module-hypercoil.nn.vertcom"], [245, "module-hypercoil.data"], [247, "module-hypercoil.engine"], [248, "module-hypercoil.eval"], [249, "module-hypercoil.functional"], [251, "module-hypercoil.init"], [253, "module-hypercoil.loss"], [255, "module-hypercoil.neuro"], [256, "module-hypercoil.nn"]], "bidsobjectfactory (class in hypercoil.data.bids)": [[1, "hypercoil.data.bids.BIDSObjectFactory"]], "lightbidslayout (class in hypercoil.data.bids)": [[2, "hypercoil.data.bids.LightBIDSLayout"]], "lightbidsobject (class in hypercoil.data.bids)": [[3, "hypercoil.data.bids.LightBIDSObject"]], "add_data() (hypercoil.data.bids.fmriprepdataset method)": [[4, "hypercoil.data.bids.fMRIPrepDataset.add_data"]], "fmriprepdataset (class in hypercoil.data.bids)": [[4, "hypercoil.data.bids.fMRIPrepDataset"]], "fmriprep_references() (in module hypercoil.data.bids)": [[5, "hypercoil.data.bids.fmriprep_references"]], "extend_and_bind() (in module hypercoil.data.collate)": [[6, "hypercoil.data.collate.extend_and_bind"]], "gen_collate() (in module hypercoil.data.collate)": [[6, "hypercoil.data.collate.gen_collate"]], "hypercoil.data.collate": [[6, "module-hypercoil.data.collate"]], "hypercoil.data.dataref": [[7, "module-hypercoil.data.dataref"]], "dataquery (class in hypercoil.data.dataref)": [[8, "hypercoil.data.dataref.DataQuery"]], "__call__() (hypercoil.data.dataref.dataquery method)": [[8, "hypercoil.data.dataref.DataQuery.__call__"]], "variable_factory() (hypercoil.data.dataref.dataquery method)": [[8, "hypercoil.data.dataref.DataQuery.variable_factory"]], "datareference (class in hypercoil.data.dataref)": [[9, "hypercoil.data.dataref.DataReference"]], "__call__() (hypercoil.data.dataref.datareference method)": [[9, "hypercoil.data.dataref.DataReference.__call__"]], "__getattr__() (hypercoil.data.dataref.datareference method)": [[9, "hypercoil.data.dataref.DataReference.__getattr__"]], "data (hypercoil.data.dataref.datareference attribute)": [[9, "hypercoil.data.dataref.DataReference.data"]], "get_var() (hypercoil.data.dataref.datareference method)": [[9, "hypercoil.data.dataref.DataReference.get_var"]], "label (hypercoil.data.dataref.datareference attribute)": [[9, "hypercoil.data.dataref.DataReference.label"]], "outcome (hypercoil.data.dataref.datareference attribute)": [[9, "hypercoil.data.dataref.DataReference.outcome"]], "parse_ids() (hypercoil.data.dataref.datareference method)": [[9, "hypercoil.data.dataref.DataReference.parse_ids"]], "data_references() (in module hypercoil.data.dataref)": [[10, "hypercoil.data.dataref.data_references"]], "hypercoil.data.dataset": [[11, "module-hypercoil.data.dataset"]], "referenceddataloader (class in hypercoil.data.dataset)": [[12, "hypercoil.data.dataset.ReferencedDataLoader"]], "set_depth() (hypercoil.data.dataset.referenceddataloader method)": [[12, "hypercoil.data.dataset.ReferencedDataLoader.set_depth"]], "referenceddataset (class in hypercoil.data.dataset)": [[13, "hypercoil.data.dataset.ReferencedDataset"]], "add_data() (hypercoil.data.dataset.referenceddataset method)": [[13, "hypercoil.data.dataset.ReferencedDataset.add_data"]], "set_depth() (hypercoil.data.dataset.referenceddataset method)": [[13, "hypercoil.data.dataset.ReferencedDataset.set_depth"]], "hypercoil.data.functional": [[14, "module-hypercoil.data.functional"]], "apply_model_specs() (in module hypercoil.data.functional)": [[15, "hypercoil.data.functional.apply_model_specs"]], "get_col() (in module hypercoil.data.functional)": [[15, "hypercoil.data.functional.get_col"]], "read_data_frame() (in module hypercoil.data.functional)": [[15, "hypercoil.data.functional.read_data_frame"], [16, "hypercoil.data.functional.read_data_frame"]], "change_extension() (in module hypercoil.data.functional)": [[16, "hypercoil.data.functional.change_extension"]], "read_json() (in module hypercoil.data.functional)": [[16, "hypercoil.data.functional.read_json"], [18, "hypercoil.data.functional.read_json"]], "read_neuro_image() (in module hypercoil.data.functional)": [[16, "hypercoil.data.functional.read_neuro_image"], [20, "hypercoil.data.functional.read_neuro_image"]], "apply_to_select() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.apply_to_select"]], "apply_transform() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.apply_transform"]], "get_path_from_var() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.get_path_from_var"]], "identity() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.identity"]], "transform_block() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.transform_block"]], "transpose() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.transpose"]], "unzip_blocked_dict() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.unzip_blocked_dict"]], "vector_encode() (in module hypercoil.data.functional)": [[17, "hypercoil.data.functional.vector_encode"]], "dump_data() (in module hypercoil.data.functional)": [[18, "hypercoil.data.functional.dump_data"]], "get_metadata_variable() (in module hypercoil.data.functional)": [[18, "hypercoil.data.functional.get_metadata_variable"]], "extend_to_max_size() (in module hypercoil.data.functional)": [[19, "hypercoil.data.functional.extend_to_max_size"], [21, "hypercoil.data.functional.extend_to_max_size"]], "fillnan() (in module hypercoil.data.functional)": [[19, "hypercoil.data.functional.fillnan"]], "nanfill() (in module hypercoil.data.functional)": [[19, "hypercoil.data.functional.nanfill"]], "cwb_cifti_header() (in module hypercoil.data.functional)": [[20, "hypercoil.data.functional.cwb_cifti_header"]], "nifti_header() (in module hypercoil.data.functional)": [[20, "hypercoil.data.functional.nifti_header"]], "consolidate_block() (in module hypercoil.data.functional)": [[21, "hypercoil.data.functional.consolidate_block"]], "extend_to_size() (in module hypercoil.data.functional)": [[21, "hypercoil.data.functional.extend_to_size"]], "to_named_tensor() (in module hypercoil.data.functional)": [[21, "hypercoil.data.functional.to_named_tensor"]], "to_tensor() (in module hypercoil.data.functional)": [[21, "hypercoil.data.functional.to_tensor"]], "normalise() (in module hypercoil.data.functional)": [[22, "hypercoil.data.functional.normalise"]], "polynomial_detrend() (in module hypercoil.data.functional)": [[22, "hypercoil.data.functional.polynomial_detrend"]], "random_window() (in module hypercoil.data.functional)": [[22, "hypercoil.data.functional.random_window"]], "standardise() (in module hypercoil.data.functional)": [[22, "hypercoil.data.functional.standardise"]], "window() (in module hypercoil.data.functional)": [[22, "hypercoil.data.functional.window"]], "window_map() (in module hypercoil.data.functional)": [[22, "hypercoil.data.functional.window_map"]], "lightgrabber (class in hypercoil.data.grabber)": [[23, "hypercoil.data.grabber.LightGrabber"]], "find_files() (hypercoil.data.grabber.lightgrabber method)": [[23, "hypercoil.data.grabber.LightGrabber.find_files"]], "get() (hypercoil.data.grabber.lightgrabber method)": [[23, "hypercoil.data.grabber.LightGrabber.get"]], "getall() (hypercoil.data.grabber.lightgrabber method)": [[23, "hypercoil.data.grabber.LightGrabber.getall"]], "hypercoil.data.hcp": [[24, "module-hypercoil.data.hcp"]], "hcp_references() (in module hypercoil.data.hcp)": [[25, "hypercoil.data.hcp.hcp_references"]], "fmridatareference (class in hypercoil.data.neuro)": [[26, "hypercoil.data.neuro.fMRIDataReference"]], "hypercoil.engine.accumulate": [[27, "module-hypercoil.engine.accumulate"]], "accumulatingfunction (class in hypercoil.engine.accumulate)": [[28, "hypercoil.engine.accumulate.AccumulatingFunction"]], "apply() (hypercoil.engine.accumulate.accumulatingfunction method)": [[28, "hypercoil.engine.accumulate.AccumulatingFunction.apply"]], "backward() (hypercoil.engine.accumulate.accumulatingfunction static method)": [[28, "hypercoil.engine.accumulate.AccumulatingFunction.backward"]], "forward() (hypercoil.engine.accumulate.accumulatingfunction static method)": [[28, "hypercoil.engine.accumulate.AccumulatingFunction.forward"]], "accumulator (class in hypercoil.engine.accumulate)": [[29, "hypercoil.engine.accumulate.Accumulator"]], "forward() (hypercoil.engine.accumulate.accumulator method)": [[29, "hypercoil.engine.accumulate.Accumulator.forward"]], "reset() (hypercoil.engine.accumulate.accumulator method)": [[29, "hypercoil.engine.accumulate.Accumulator.reset"]], "zero_grad() (hypercoil.engine.accumulate.accumulator method)": [[29, "hypercoil.engine.accumulate.Accumulator.zero_grad"]], "hypercoil.functional.activation": [[30, "module-hypercoil.functional.activation"]], "amplitude_atanh() (in module hypercoil.functional.activation)": [[31, "hypercoil.functional.activation.amplitude_atanh"]], "amplitude_tanh() (in module hypercoil.functional.activation)": [[32, "hypercoil.functional.activation.amplitude_tanh"]], "corrnorm() (in module hypercoil.functional.activation)": [[33, "hypercoil.functional.activation.corrnorm"]], "isochor() (in module hypercoil.functional.activation)": [[34, "hypercoil.functional.activation.isochor"]], "hypercoil.functional.cmass": [[35, "module-hypercoil.functional.cmass"]], "cmass() (in module hypercoil.functional.cmass)": [[36, "hypercoil.functional.cmass.cmass"]], "cmass_coor() (in module hypercoil.functional.cmass)": [[37, "hypercoil.functional.cmass.cmass_coor"]], "cmass_reference_displacement() (in module hypercoil.functional.cmass)": [[38, "hypercoil.functional.cmass.cmass_reference_displacement"]], "cmass_reference_displacement_grid() (in module hypercoil.functional.cmass)": [[38, "hypercoil.functional.cmass.cmass_reference_displacement_grid"]], "diffuse() (in module hypercoil.functional.cmass)": [[39, "hypercoil.functional.cmass.diffuse"]], "hypercoil.functional.connectopy": [[40, "module-hypercoil.functional.connectopy"]], "diffusion_mapping() (in module hypercoil.functional.connectopy)": [[41, "hypercoil.functional.connectopy.diffusion_mapping"]], "laplacian_eigenmaps() (in module hypercoil.functional.connectopy)": [[42, "hypercoil.functional.connectopy.laplacian_eigenmaps"]], "hypercoil.functional.cov": [[43, "module-hypercoil.functional.cov"]], "conditionalcorr() (in module hypercoil.functional.cov)": [[44, "hypercoil.functional.cov.conditionalcorr"]], "conditionalcov() (in module hypercoil.functional.cov)": [[45, "hypercoil.functional.cov.conditionalcov"]], "corr() (in module hypercoil.functional.cov)": [[46, "hypercoil.functional.cov.corr"]], "cov() (in module hypercoil.functional.cov)": [[47, "hypercoil.functional.cov.cov"]], "pairedcorr() (in module hypercoil.functional.cov)": [[48, "hypercoil.functional.cov.pairedcorr"]], "pairedcov() (in module hypercoil.functional.cov)": [[49, "hypercoil.functional.cov.pairedcov"]], "partialcorr() (in module hypercoil.functional.cov)": [[50, "hypercoil.functional.cov.partialcorr"]], "partialcov() (in module hypercoil.functional.cov)": [[51, "hypercoil.functional.cov.partialcov"]], "precision() (in module hypercoil.functional.cov)": [[52, "hypercoil.functional.cov.precision"]], "hypercoil.functional.fourier": [[53, "module-hypercoil.functional.fourier"]], "analytic_signal() (in module hypercoil.functional.fourier)": [[54, "hypercoil.functional.fourier.analytic_signal"]], "env_inst() (in module hypercoil.functional.fourier)": [[55, "hypercoil.functional.fourier.env_inst"]], "envelope() (in module hypercoil.functional.fourier)": [[56, "hypercoil.functional.fourier.envelope"]], "hilbert_transform() (in module hypercoil.functional.fourier)": [[57, "hypercoil.functional.fourier.hilbert_transform"]], "instantaneous_frequency() (in module hypercoil.functional.fourier)": [[58, "hypercoil.functional.fourier.instantaneous_frequency"]], "instantaneous_phase() (in module hypercoil.functional.fourier)": [[59, "hypercoil.functional.fourier.instantaneous_phase"]], "product_filter() (in module hypercoil.functional.fourier)": [[60, "hypercoil.functional.fourier.product_filter"]], "product_filtfilt() (in module hypercoil.functional.fourier)": [[61, "hypercoil.functional.fourier.product_filtfilt"]], "unwrap() (in module hypercoil.functional.fourier)": [[62, "hypercoil.functional.fourier.unwrap"]], "hypercoil.functional.graph": [[63, "module-hypercoil.functional.graph"]], "coaffiliation() (in module hypercoil.functional.graph)": [[64, "hypercoil.functional.graph.coaffiliation"]], "girvan_newman_null() (in module hypercoil.functional.graph)": [[65, "hypercoil.functional.graph.girvan_newman_null"]], "graph_laplacian() (in module hypercoil.functional.graph)": [[66, "hypercoil.functional.graph.graph_laplacian"]], "modularity_matrix() (in module hypercoil.functional.graph)": [[67, "hypercoil.functional.graph.modularity_matrix"]], "relaxed_modularity() (in module hypercoil.functional.graph)": [[68, "hypercoil.functional.graph.relaxed_modularity"]], "hypercoil.functional.interpolate": [[69, "module-hypercoil.functional.interpolate"]], "hybrid_interpolate() (in module hypercoil.functional.interpolate)": [[70, "hypercoil.functional.interpolate.hybrid_interpolate"]], "spectral_interpolate() (in module hypercoil.functional.interpolate)": [[71, "hypercoil.functional.interpolate.spectral_interpolate"]], "weighted_interpolate() (in module hypercoil.functional.interpolate)": [[72, "hypercoil.functional.interpolate.weighted_interpolate"]], "hypercoil.functional.kernel": [[73, "module-hypercoil.functional.kernel"]], "cosine_kernel() (in module hypercoil.functional.kernel)": [[74, "hypercoil.functional.kernel.cosine_kernel"]], "gaussian_kernel() (in module hypercoil.functional.kernel)": [[75, "hypercoil.functional.kernel.gaussian_kernel"]], "linear_kernel() (in module hypercoil.functional.kernel)": [[76, "hypercoil.functional.kernel.linear_kernel"]], "polynomial_kernel() (in module hypercoil.functional.kernel)": [[77, "hypercoil.functional.kernel.polynomial_kernel"]], "rbf_kernel() (in module hypercoil.functional.kernel)": [[78, "hypercoil.functional.kernel.rbf_kernel"]], "sigmoid_kernel() (in module hypercoil.functional.kernel)": [[79, "hypercoil.functional.kernel.sigmoid_kernel"]], "hypercoil.functional.matrix": [[80, "module-hypercoil.functional.matrix"]], "delete_diagonal() (in module hypercoil.functional.matrix)": [[81, "hypercoil.functional.matrix.delete_diagonal"]], "expand_outer() (in module hypercoil.functional.matrix)": [[82, "hypercoil.functional.matrix.expand_outer"]], "fill_diagonal() (in module hypercoil.functional.matrix)": [[83, "hypercoil.functional.matrix.fill_diagonal"]], "invert_spd() (in module hypercoil.functional.matrix)": [[84, "hypercoil.functional.matrix.invert_spd"]], "recondition_eigenspaces() (in module hypercoil.functional.matrix)": [[85, "hypercoil.functional.matrix.recondition_eigenspaces"]], "spd() (in module hypercoil.functional.matrix)": [[86, "hypercoil.functional.matrix.spd"]], "squareform() (in module hypercoil.functional.matrix)": [[87, "hypercoil.functional.matrix.squareform"]], "sym2vec() (in module hypercoil.functional.matrix)": [[88, "hypercoil.functional.matrix.sym2vec"]], "symmetric() (in module hypercoil.functional.matrix)": [[89, "hypercoil.functional.matrix.symmetric"]], "toeplitz() (in module hypercoil.functional.matrix)": [[90, "hypercoil.functional.matrix.toeplitz"]], "vec2sym() (in module hypercoil.functional.matrix)": [[91, "hypercoil.functional.matrix.vec2sym"]], "residualise() (in module hypercoil.functional.resid)": [[92, "hypercoil.functional.resid.residualise"]], "hypercoil.functional.semidefinite": [[93, "module-hypercoil.functional.semidefinite"]], "cone_project_spd() (in module hypercoil.functional.semidefinite)": [[94, "hypercoil.functional.semidefinite.cone_project_spd"]], "mean_euc_spd() (in module hypercoil.functional.semidefinite)": [[95, "hypercoil.functional.semidefinite.mean_euc_spd"]], "mean_geom_spd() (in module hypercoil.functional.semidefinite)": [[96, "hypercoil.functional.semidefinite.mean_geom_spd"]], "mean_harm_spd() (in module hypercoil.functional.semidefinite)": [[97, "hypercoil.functional.semidefinite.mean_harm_spd"]], "mean_logeuc_spd() (in module hypercoil.functional.semidefinite)": [[98, "hypercoil.functional.semidefinite.mean_logeuc_spd"]], "tangent_project_spd() (in module hypercoil.functional.semidefinite)": [[99, "hypercoil.functional.semidefinite.tangent_project_spd"]], "hypercoil.functional.sphere": [[100, "module-hypercoil.functional.sphere"]], "euclidean_conv() (in module hypercoil.functional.sphere)": [[101, "hypercoil.functional.sphere.euclidean_conv"]], "spatial_conv() (in module hypercoil.functional.sphere)": [[102, "hypercoil.functional.sphere.spatial_conv"]], "sphere_to_latlong() (in module hypercoil.functional.sphere)": [[103, "hypercoil.functional.sphere.sphere_to_latlong"]], "sphere_to_normals() (in module hypercoil.functional.sphere)": [[104, "hypercoil.functional.sphere.sphere_to_normals"]], "spherical_conv() (in module hypercoil.functional.sphere)": [[105, "hypercoil.functional.sphere.spherical_conv"]], "spherical_geodesic() (in module hypercoil.functional.sphere)": [[106, "hypercoil.functional.sphere.spherical_geodesic"]], "hypercoil.functional.sylo": [[107, "module-hypercoil.functional.sylo"]], "sylo() (in module hypercoil.functional.sylo)": [[107, "hypercoil.functional.sylo.sylo"]], "hypercoil.functional.symmap": [[108, "module-hypercoil.functional.symmap"]], "symexp() (in module hypercoil.functional.symmap)": [[109, "hypercoil.functional.symmap.symexp"]], "symlog() (in module hypercoil.functional.symmap)": [[110, "hypercoil.functional.symmap.symlog"]], "symmap() (in module hypercoil.functional.symmap)": [[111, "hypercoil.functional.symmap.symmap"]], "symsqrt() (in module hypercoil.functional.symmap)": [[112, "hypercoil.functional.symmap.symsqrt"]], "hypercoil.functional.tsconv": [[113, "module-hypercoil.functional.tsconv"]], "basischan() (in module hypercoil.functional.tsconv)": [[114, "hypercoil.functional.tsconv.basischan"]], "basisconv2d() (in module hypercoil.functional.tsconv)": [[115, "hypercoil.functional.tsconv.basisconv2d"]], "polychan() (in module hypercoil.functional.tsconv)": [[116, "hypercoil.functional.tsconv.polychan"]], "polyconv2d() (in module hypercoil.functional.tsconv)": [[117, "hypercoil.functional.tsconv.polyconv2d"]], "tsconv2d() (in module hypercoil.functional.tsconv)": [[118, "hypercoil.functional.tsconv.tsconv2d"]], "hypercoil.functional.utils": [[119, "module-hypercoil.functional.utils"]], "apply_mask() (in module hypercoil.functional.utils)": [[120, "hypercoil.functional.utils.apply_mask"]], "complex_decompose() (in module hypercoil.functional.utils)": [[121, "hypercoil.functional.utils.complex_decompose"]], "complex_recompose() (in module hypercoil.functional.utils)": [[122, "hypercoil.functional.utils.complex_recompose"]], "conform_mask() (in module hypercoil.functional.utils)": [[123, "hypercoil.functional.utils.conform_mask"]], "orient_and_conform() (in module hypercoil.functional.utils)": [[124, "hypercoil.functional.utils.orient_and_conform"]], "sparse_mm() (in module hypercoil.functional.utils)": [[125, "hypercoil.functional.utils.sparse_mm"]], "sparse_rcmul() (in module hypercoil.functional.utils)": [[126, "hypercoil.functional.utils.sparse_rcmul"]], "wmean() (in module hypercoil.functional.utils)": [[127, "hypercoil.functional.utils.wmean"]], "hypercoil.init.atlas": [[128, "module-hypercoil.init.atlas"]], "atlasinit (class in hypercoil.init.atlas)": [[129, "hypercoil.init.atlas.AtlasInit"]], "__call__() (hypercoil.init.atlas.atlasinit method)": [[129, "hypercoil.init.atlas.AtlasInit.__call__"]], "baseatlas (class in hypercoil.init.atlas)": [[130, "hypercoil.init.atlas.BaseAtlas"]], "__call__() (hypercoil.init.atlas.baseatlas method)": [[130, "hypercoil.init.atlas.BaseAtlas.__call__"]], "cortexsubcortexciftiatlas (class in hypercoil.init.atlas)": [[131, "hypercoil.init.atlas.CortexSubcortexCIfTIAtlas"]], "__call__() (hypercoil.init.atlas.cortexsubcortexciftiatlas method)": [[131, "hypercoil.init.atlas.CortexSubcortexCIfTIAtlas.__call__"]], "to_image() (hypercoil.init.atlas.cortexsubcortexciftiatlas method)": [[131, "hypercoil.init.atlas.CortexSubcortexCIfTIAtlas.to_image"]], "dirichletinitbaseatlas (class in hypercoil.init.atlas)": [[132, "hypercoil.init.atlas.DirichletInitBaseAtlas"]], "__call__() (hypercoil.init.atlas.dirichletinitbaseatlas method)": [[132, "hypercoil.init.atlas.DirichletInitBaseAtlas.__call__"]], "dirichletinitsurfaceatlas (class in hypercoil.init.atlas)": [[133, "hypercoil.init.atlas.DirichletInitSurfaceAtlas"]], "__call__() (hypercoil.init.atlas.dirichletinitsurfaceatlas method)": [[133, "hypercoil.init.atlas.DirichletInitSurfaceAtlas.__call__"]], "to_image() (hypercoil.init.atlas.dirichletinitsurfaceatlas method)": [[133, "hypercoil.init.atlas.DirichletInitSurfaceAtlas.to_image"]], "dirichletinitvolumetricatlas (class in hypercoil.init.atlas)": [[134, "hypercoil.init.atlas.DirichletInitVolumetricAtlas"]], "__call__() (hypercoil.init.atlas.dirichletinitvolumetricatlas method)": [[134, "hypercoil.init.atlas.DirichletInitVolumetricAtlas.__call__"]], "discretevolumetricatlas (class in hypercoil.init.atlas)": [[135, "hypercoil.init.atlas.DiscreteVolumetricAtlas"]], "__call__() (hypercoil.init.atlas.discretevolumetricatlas method)": [[135, "hypercoil.init.atlas.DiscreteVolumetricAtlas.__call__"]], "multivolumetricatlas (class in hypercoil.init.atlas)": [[136, "hypercoil.init.atlas.MultiVolumetricAtlas"]], "__call__() (hypercoil.init.atlas.multivolumetricatlas method)": [[136, "hypercoil.init.atlas.MultiVolumetricAtlas.__call__"]], "multifilevolumetricatlas (class in hypercoil.init.atlas)": [[137, "hypercoil.init.atlas.MultifileVolumetricAtlas"]], "__call__() (hypercoil.init.atlas.multifilevolumetricatlas method)": [[137, "hypercoil.init.atlas.MultifileVolumetricAtlas.__call__"]], "_ciftireferencemixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._CIfTIReferenceMixin"]], "_continuouslabelmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._ContinuousLabelMixin"]], "_cortexsubcortexcifticompartmentmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._CortexSubcortexCIfTICompartmentMixin"]], "_cortexsubcortexciftimaskmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._CortexSubcortexCIfTIMaskMixin"]], "_dirichletlabelmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._DirichletLabelMixin"]], "_discretelabelmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._DiscreteLabelMixin"]], "_evenlysampledconvmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._EvenlySampledConvMixin"]], "_fromnullmaskmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._FromNullMaskMixin"]], "_logicmaskmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._LogicMaskMixin"]], "_multicompartmentmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._MultiCompartmentMixin"]], "_multireferencemixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._MultiReferenceMixin"]], "_objectreferencemixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._ObjectReferenceMixin"]], "_phantomreferencemixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._PhantomReferenceMixin"]], "_singlecompartmentmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._SingleCompartmentMixin"]], "_singlereferencemixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._SingleReferenceMixin"]], "_spatialconvmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._SpatialConvMixin"]], "_vertexciftimeshmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._VertexCIfTIMeshMixin"]], "_volumetricmeshmixin (class in hypercoil.init.atlasmixins)": [[138, "hypercoil.init.atlasmixins._VolumetricMeshMixin"]], "hypercoil.init.atlasmixins": [[138, "module-hypercoil.init.atlasmixins"]], "hypercoil.init.base": [[139, "module-hypercoil.init.base"]], "constantinitialiser() (in module hypercoil.init.base)": [[140, "hypercoil.init.base.ConstantInitialiser"]], "distributioninitialiser() (in module hypercoil.init.base)": [[141, "hypercoil.init.base.DistributionInitialiser"]], "domaininitialiser (class in hypercoil.init.base)": [[142, "hypercoil.init.base.DomainInitialiser"]], "constant_init_() (in module hypercoil.init.base)": [[143, "hypercoil.init.base.constant_init_"]], "from_distr_init_() (in module hypercoil.init.base)": [[144, "hypercoil.init.base.from_distr_init_"]], "identity_init_() (in module hypercoil.init.base)": [[145, "hypercoil.init.base.identity_init_"]], "deltaplusinit (class in hypercoil.init.deltaplus)": [[146, "hypercoil.init.deltaplus.DeltaPlusInit"]], "deltaplus_init_() (in module hypercoil.init.deltaplus)": [[146, "hypercoil.init.deltaplus.deltaplus_init_"]], "hypercoil.init.deltaplus": [[146, "module-hypercoil.init.deltaplus"]], "dirichletinit (class in hypercoil.init.dirichlet)": [[147, "hypercoil.init.dirichlet.DirichletInit"]], "dirichlet_init_() (in module hypercoil.init.dirichlet)": [[147, "hypercoil.init.dirichlet.dirichlet_init_"]], "hypercoil.init.dirichlet": [[147, "module-hypercoil.init.dirichlet"]], "hypercoil.init.domain": [[148, "module-hypercoil.init.domain"]], "amplitudeatanh (class in hypercoil.init.domain)": [[149, "hypercoil.init.domain.AmplitudeAtanh"]], "handle_ood() (hypercoil.init.domain.amplitudeatanh method)": [[149, "hypercoil.init.domain.AmplitudeAtanh.handle_ood"]], "image() (hypercoil.init.domain.amplitudeatanh method)": [[149, "hypercoil.init.domain.AmplitudeAtanh.image"]], "preimage() (hypercoil.init.domain.amplitudeatanh method)": [[149, "hypercoil.init.domain.AmplitudeAtanh.preimage"]], "test() (hypercoil.init.domain.amplitudeatanh method)": [[149, "hypercoil.init.domain.AmplitudeAtanh.test"]], "amplitudemultilogit (class in hypercoil.init.domain)": [[150, "hypercoil.init.domain.AmplitudeMultiLogit"]], "handle_ood() (hypercoil.init.domain.amplitudemultilogit method)": [[150, "hypercoil.init.domain.AmplitudeMultiLogit.handle_ood"]], "image() (hypercoil.init.domain.amplitudemultilogit method)": [[150, "hypercoil.init.domain.AmplitudeMultiLogit.image"]], "preimage() (hypercoil.init.domain.amplitudemultilogit method)": [[150, "hypercoil.init.domain.AmplitudeMultiLogit.preimage"]], "test() (hypercoil.init.domain.amplitudemultilogit method)": [[150, "hypercoil.init.domain.AmplitudeMultiLogit.test"]], "atanh (class in hypercoil.init.domain)": [[151, "hypercoil.init.domain.Atanh"]], "handle_ood() (hypercoil.init.domain.atanh method)": [[151, "hypercoil.init.domain.Atanh.handle_ood"]], "image() (hypercoil.init.domain.atanh method)": [[151, "hypercoil.init.domain.Atanh.image"]], "preimage() (hypercoil.init.domain.atanh method)": [[151, "hypercoil.init.domain.Atanh.preimage"]], "test() (hypercoil.init.domain.atanh method)": [[151, "hypercoil.init.domain.Atanh.test"]], "logit (class in hypercoil.init.domain)": [[152, "hypercoil.init.domain.Logit"]], "handle_ood() (hypercoil.init.domain.logit method)": [[152, "hypercoil.init.domain.Logit.handle_ood"]], "image() (hypercoil.init.domain.logit method)": [[152, "hypercoil.init.domain.Logit.image"]], "preimage() (hypercoil.init.domain.logit method)": [[152, "hypercoil.init.domain.Logit.preimage"]], "test() (hypercoil.init.domain.logit method)": [[152, "hypercoil.init.domain.Logit.test"]], "multilogit (class in hypercoil.init.domain)": [[153, "hypercoil.init.domain.MultiLogit"]], "handle_ood() (hypercoil.init.domain.multilogit method)": [[153, "hypercoil.init.domain.MultiLogit.handle_ood"]], "image() (hypercoil.init.domain.multilogit method)": [[153, "hypercoil.init.domain.MultiLogit.image"]], "preimage() (hypercoil.init.domain.multilogit method)": [[153, "hypercoil.init.domain.MultiLogit.preimage"]], "test() (hypercoil.init.domain.multilogit method)": [[153, "hypercoil.init.domain.MultiLogit.test"]], "unitnormsphere (class in hypercoil.init.domain)": [[154, "hypercoil.init.domain.UnitNormSphere"]], "handle_ood() (hypercoil.init.domain.unitnormsphere method)": [[154, "hypercoil.init.domain.UnitNormSphere.handle_ood"]], "image() (hypercoil.init.domain.unitnormsphere method)": [[154, "hypercoil.init.domain.UnitNormSphere.image"]], "preimage() (hypercoil.init.domain.unitnormsphere method)": [[154, "hypercoil.init.domain.UnitNormSphere.preimage"]], "test() (hypercoil.init.domain.unitnormsphere method)": [[154, "hypercoil.init.domain.UnitNormSphere.test"]], "hypercoil.init.domainbase": [[155, "module-hypercoil.init.domainbase"]], "affine (class in hypercoil.init.domainbase)": [[156, "hypercoil.init.domainbase.Affine"]], "handle_ood() (hypercoil.init.domainbase.affine method)": [[156, "hypercoil.init.domainbase.Affine.handle_ood"]], "image() (hypercoil.init.domainbase.affine method)": [[156, "hypercoil.init.domainbase.Affine.image"]], "preimage() (hypercoil.init.domainbase.affine method)": [[156, "hypercoil.init.domainbase.Affine.preimage"]], "test() (hypercoil.init.domainbase.affine method)": [[156, "hypercoil.init.domainbase.Affine.test"]], "clip (class in hypercoil.init.domainbase)": [[157, "hypercoil.init.domainbase.Clip"]], "apply() (hypercoil.init.domainbase.clip method)": [[157, "hypercoil.init.domainbase.Clip.apply"]], "test() (hypercoil.init.domainbase.clip method)": [[157, "hypercoil.init.domainbase.Clip.test"]], "identity (class in hypercoil.init.domainbase)": [[158, "hypercoil.init.domainbase.Identity"]], "handle_ood() (hypercoil.init.domainbase.identity method)": [[158, "hypercoil.init.domainbase.Identity.handle_ood"]], "image() (hypercoil.init.domainbase.identity method)": [[158, "hypercoil.init.domainbase.Identity.image"]], "preimage() (hypercoil.init.domainbase.identity method)": [[158, "hypercoil.init.domainbase.Identity.preimage"]], "test() (hypercoil.init.domainbase.identity method)": [[158, "hypercoil.init.domainbase.Identity.test"]], "linear (class in hypercoil.init.domainbase)": [[159, "hypercoil.init.domainbase.Linear"]], "handle_ood() (hypercoil.init.domainbase.linear method)": [[159, "hypercoil.init.domainbase.Linear.handle_ood"]], "image() (hypercoil.init.domainbase.linear method)": [[159, "hypercoil.init.domainbase.Linear.image"]], "preimage() (hypercoil.init.domainbase.linear method)": [[159, "hypercoil.init.domainbase.Linear.preimage"]], "test() (hypercoil.init.domainbase.linear method)": [[159, "hypercoil.init.domainbase.Linear.test"]], "normalise (class in hypercoil.init.domainbase)": [[160, "hypercoil.init.domainbase.Normalise"]], "apply() (hypercoil.init.domainbase.normalise method)": [[160, "hypercoil.init.domainbase.Normalise.apply"]], "test() (hypercoil.init.domainbase.normalise method)": [[160, "hypercoil.init.domainbase.Normalise.test"]], "_domain (class in hypercoil.init.domainbase)": [[161, "hypercoil.init.domainbase._Domain"]], "handle_ood() (hypercoil.init.domainbase._domain method)": [[161, "hypercoil.init.domainbase._Domain.handle_ood"]], "image() (hypercoil.init.domainbase._domain method)": [[161, "hypercoil.init.domainbase._Domain.image"]], "preimage() (hypercoil.init.domainbase._domain method)": [[161, "hypercoil.init.domainbase._Domain.preimage"]], "test() (hypercoil.init.domainbase._domain method)": [[161, "hypercoil.init.domainbase._Domain.test"]], "_phaseamplitudedomain (class in hypercoil.init.domainbase)": [[162, "hypercoil.init.domainbase._PhaseAmplitudeDomain"]], "handle_ood() (hypercoil.init.domainbase._phaseamplitudedomain method)": [[162, "hypercoil.init.domainbase._PhaseAmplitudeDomain.handle_ood"]], "image() (hypercoil.init.domainbase._phaseamplitudedomain method)": [[162, "hypercoil.init.domainbase._PhaseAmplitudeDomain.image"]], "preimage() (hypercoil.init.domainbase._phaseamplitudedomain method)": [[162, "hypercoil.init.domainbase._PhaseAmplitudeDomain.preimage"]], "test() (hypercoil.init.domainbase._phaseamplitudedomain method)": [[162, "hypercoil.init.domainbase._PhaseAmplitudeDomain.test"]], "hypercoil.init.freqfilter": [[163, "module-hypercoil.init.freqfilter"]], "freqfilterspec (class in hypercoil.init.freqfilter)": [[164, "hypercoil.init.freqfilter.FreqFilterSpec"]], "get_clamps() (hypercoil.init.freqfilter.freqfilterspec method)": [[164, "hypercoil.init.freqfilter.FreqFilterSpec.get_clamps"]], "initialise_spectrum() (hypercoil.init.freqfilter.freqfilterspec method)": [[164, "hypercoil.init.freqfilter.FreqFilterSpec.initialise_spectrum"]], "clamp_init_() (in module hypercoil.init.freqfilter)": [[165, "hypercoil.init.freqfilter.clamp_init_"]], "freqfilter_init_() (in module hypercoil.init.freqfilter)": [[166, "hypercoil.init.freqfilter.freqfilter_init_"]], "iirfilterspec (class in hypercoil.init.iirfilter)": [[167, "hypercoil.init.iirfilter.IIRFilterSpec"]], "hypercoil.init.iirfilter": [[167, "module-hypercoil.init.iirfilter"]], "initialise_coefs() (hypercoil.init.iirfilter.iirfilterspec method)": [[167, "hypercoil.init.iirfilter.IIRFilterSpec.initialise_coefs"]], "laplaceinit (class in hypercoil.init.laplace)": [[168, "hypercoil.init.laplace.LaplaceInit"]], "hypercoil.init.laplace": [[168, "module-hypercoil.init.laplace"]], "laplace_init_() (in module hypercoil.init.laplace)": [[168, "hypercoil.init.laplace.laplace_init_"]], "floatleaf (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.FloatLeaf"]], "maskclosing (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskClosing"]], "maskdilation (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskDilation"]], "maskerosion (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskErosion"]], "maskfillholes (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskFillHoles"]], "maskintersection (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskIntersection"]], "maskleaf (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskLeaf"]], "masknegation (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskNegation"]], "maskopening (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskOpening"]], "maskthreshold (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskThreshold"]], "maskuthreshold (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskUThreshold"]], "maskunion (class in hypercoil.init.atlasmixins)": [[169, "hypercoil.init.atlasmixins.MaskUnion"]], "__call__() (hypercoil.init.atlasmixins.floatleaf method)": [[169, "hypercoil.init.atlasmixins.FloatLeaf.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskclosing method)": [[169, "hypercoil.init.atlasmixins.MaskClosing.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskdilation method)": [[169, "hypercoil.init.atlasmixins.MaskDilation.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskerosion method)": [[169, "hypercoil.init.atlasmixins.MaskErosion.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskfillholes method)": [[169, "hypercoil.init.atlasmixins.MaskFillHoles.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskintersection method)": [[169, "hypercoil.init.atlasmixins.MaskIntersection.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskleaf method)": [[169, "hypercoil.init.atlasmixins.MaskLeaf.__call__"]], "__call__() (hypercoil.init.atlasmixins.masknegation method)": [[169, "hypercoil.init.atlasmixins.MaskNegation.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskopening method)": [[169, "hypercoil.init.atlasmixins.MaskOpening.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskthreshold method)": [[169, "hypercoil.init.atlasmixins.MaskThreshold.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskuthreshold method)": [[169, "hypercoil.init.atlasmixins.MaskUThreshold.__call__"]], "__call__() (hypercoil.init.atlasmixins.maskunion method)": [[169, "hypercoil.init.atlasmixins.MaskUnion.__call__"]], "bipartitelatticeinit (class in hypercoil.init.mpbl)": [[170, "hypercoil.init.mpbl.BipartiteLatticeInit"]], "hypercoil.init.mpbl": [[170, "module-hypercoil.init.mpbl"]], "hypercoil.init.semidefinite": [[171, "module-hypercoil.init.semidefinite"]], "spdeuclideanmean (class in hypercoil.init.semidefinite)": [[172, "hypercoil.init.semidefinite.SPDEuclideanMean"]], "spdgeometricmean (class in hypercoil.init.semidefinite)": [[172, "hypercoil.init.semidefinite.SPDGeometricMean"]], "spdharmonicmean (class in hypercoil.init.semidefinite)": [[172, "hypercoil.init.semidefinite.SPDHarmonicMean"]], "spdlogeuclideanmean (class in hypercoil.init.semidefinite)": [[172, "hypercoil.init.semidefinite.SPDLogEuclideanMean"]], "tangencyinit (class in hypercoil.init.semidefinite)": [[173, "hypercoil.init.semidefinite.TangencyInit"]], "tangency_init_() (in module hypercoil.init.semidefinite)": [[173, "hypercoil.init.semidefinite.tangency_init_"]], "hypercoil.init.sylo": [[174, "module-hypercoil.init.sylo"]], "sylo_init_() (in module hypercoil.init.sylo)": [[174, "hypercoil.init.sylo.sylo_init_"]], "toeplitzinit (class in hypercoil.init.toeplitz)": [[175, "hypercoil.init.toeplitz.ToeplitzInit"]], "hypercoil.init.toeplitz": [[175, "module-hypercoil.init.toeplitz"]], "toeplitz_init_() (in module hypercoil.init.toeplitz)": [[175, "hypercoil.init.toeplitz.toeplitz_init_"]], "lossapply (class in hypercoil.loss.base)": [[176, "hypercoil.loss.base.LossApply"]], "forward() (hypercoil.loss.base.lossapply method)": [[176, "hypercoil.loss.base.LossApply.forward"]], "register_action() (hypercoil.loss.base.lossapply method)": [[176, "hypercoil.loss.base.LossApply.register_action"]], "register_sentry() (hypercoil.loss.base.lossapply method)": [[176, "hypercoil.loss.base.LossApply.register_sentry"]], "reducingloss (class in hypercoil.loss.base)": [[177, "hypercoil.loss.base.ReducingLoss"]], "forward() (hypercoil.loss.base.reducingloss method)": [[177, "hypercoil.loss.base.ReducingLoss.forward"]], "register_action() (hypercoil.loss.base.reducingloss method)": [[177, "hypercoil.loss.base.ReducingLoss.register_action"]], "register_sentry() (hypercoil.loss.base.reducingloss method)": [[177, "hypercoil.loss.base.ReducingLoss.register_sentry"]], "batchcorrelation (class in hypercoil.loss.batchcorr)": [[178, "hypercoil.loss.batchcorr.BatchCorrelation"]], "forward() (hypercoil.loss.batchcorr.batchcorrelation method)": [[178, "hypercoil.loss.batchcorr.BatchCorrelation.forward"]], "register_action() (hypercoil.loss.batchcorr.batchcorrelation method)": [[178, "hypercoil.loss.batchcorr.BatchCorrelation.register_action"]], "register_sentry() (hypercoil.loss.batchcorr.batchcorrelation method)": [[178, "hypercoil.loss.batchcorr.BatchCorrelation.register_sentry"]], "qcfc (class in hypercoil.loss.batchcorr)": [[179, "hypercoil.loss.batchcorr.QCFC"]], "forward() (hypercoil.loss.batchcorr.qcfc method)": [[179, "hypercoil.loss.batchcorr.QCFC.forward"]], "register_action() (hypercoil.loss.batchcorr.qcfc method)": [[179, "hypercoil.loss.batchcorr.QCFC.register_action"]], "register_sentry() (hypercoil.loss.batchcorr.qcfc method)": [[179, "hypercoil.loss.batchcorr.QCFC.register_sentry"]], "auto_tol() (in module hypercoil.loss.batchcorr)": [[180, "hypercoil.loss.batchcorr.auto_tol"]], "compactness (class in hypercoil.loss.cmass)": [[181, "hypercoil.loss.cmass.Compactness"]], "forward() (hypercoil.loss.cmass.compactness method)": [[181, "hypercoil.loss.cmass.Compactness.forward"]], "register_action() (hypercoil.loss.cmass.compactness method)": [[181, "hypercoil.loss.cmass.Compactness.register_action"]], "register_sentry() (hypercoil.loss.cmass.compactness method)": [[181, "hypercoil.loss.cmass.Compactness.register_sentry"]], "hemispherictether (class in hypercoil.loss.cmass)": [[182, "hypercoil.loss.cmass.HemisphericTether"]], "forward() (hypercoil.loss.cmass.hemispherictether method)": [[182, "hypercoil.loss.cmass.HemisphericTether.forward"]], "register_action() (hypercoil.loss.cmass.hemispherictether method)": [[182, "hypercoil.loss.cmass.HemisphericTether.register_action"]], "register_sentry() (hypercoil.loss.cmass.hemispherictether method)": [[182, "hypercoil.loss.cmass.HemisphericTether.register_sentry"]], "connectopy_loss() (in module hypercoil.loss.connectopy)": [[183, "hypercoil.loss.connectopy.connectopy_loss"]], "detcorr (class in hypercoil.loss.determinant)": [[184, "hypercoil.loss.determinant.DetCorr"]], "determinant (class in hypercoil.loss.determinant)": [[184, "hypercoil.loss.determinant.Determinant"]], "logdet (class in hypercoil.loss.determinant)": [[184, "hypercoil.loss.determinant.LogDet"]], "logdetcorr (class in hypercoil.loss.determinant)": [[184, "hypercoil.loss.determinant.LogDetCorr"]], "forward() (hypercoil.loss.determinant.detcorr method)": [[184, "hypercoil.loss.determinant.DetCorr.forward"]], "forward() (hypercoil.loss.determinant.determinant method)": [[184, "hypercoil.loss.determinant.Determinant.forward"]], "forward() (hypercoil.loss.determinant.logdet method)": [[184, "hypercoil.loss.determinant.LogDet.forward"]], "forward() (hypercoil.loss.determinant.logdetcorr method)": [[184, "hypercoil.loss.determinant.LogDetCorr.forward"]], "hypercoil.loss.determinant": [[184, "module-hypercoil.loss.determinant"]], "register_action() (hypercoil.loss.determinant.detcorr method)": [[184, "hypercoil.loss.determinant.DetCorr.register_action"]], "register_action() (hypercoil.loss.determinant.determinant method)": [[184, "hypercoil.loss.determinant.Determinant.register_action"]], "register_action() (hypercoil.loss.determinant.logdet method)": [[184, "hypercoil.loss.determinant.LogDet.register_action"]], "register_action() (hypercoil.loss.determinant.logdetcorr method)": [[184, "hypercoil.loss.determinant.LogDetCorr.register_action"]], "register_sentry() (hypercoil.loss.determinant.detcorr method)": [[184, "hypercoil.loss.determinant.DetCorr.register_sentry"]], "register_sentry() (hypercoil.loss.determinant.determinant method)": [[184, "hypercoil.loss.determinant.Determinant.register_sentry"]], "register_sentry() (hypercoil.loss.determinant.logdet method)": [[184, "hypercoil.loss.determinant.LogDet.register_sentry"]], "register_sentry() (hypercoil.loss.determinant.logdetcorr method)": [[184, "hypercoil.loss.determinant.LogDetCorr.register_sentry"]], "vectordispersion (class in hypercoil.loss.dispersion)": [[185, "hypercoil.loss.dispersion.VectorDispersion"]], "forward() (hypercoil.loss.dispersion.vectordispersion method)": [[185, "hypercoil.loss.dispersion.VectorDispersion.forward"]], "register_action() (hypercoil.loss.dispersion.vectordispersion method)": [[185, "hypercoil.loss.dispersion.VectorDispersion.register_action"]], "register_sentry() (hypercoil.loss.dispersion.vectordispersion method)": [[185, "hypercoil.loss.dispersion.VectorDispersion.register_sentry"]], "entropy (class in hypercoil.loss.entropy)": [[186, "hypercoil.loss.entropy.Entropy"]], "softmaxentropy (class in hypercoil.loss.entropy)": [[186, "hypercoil.loss.entropy.SoftmaxEntropy"]], "forward() (hypercoil.loss.entropy.entropy method)": [[186, "hypercoil.loss.entropy.Entropy.forward"]], "forward() (hypercoil.loss.entropy.softmaxentropy method)": [[186, "hypercoil.loss.entropy.SoftmaxEntropy.forward"]], "hypercoil.loss.entropy": [[186, "module-hypercoil.loss.entropy"]], "register_action() (hypercoil.loss.entropy.entropy method)": [[186, "hypercoil.loss.entropy.Entropy.register_action"]], "register_action() (hypercoil.loss.entropy.softmaxentropy method)": [[186, "hypercoil.loss.entropy.SoftmaxEntropy.register_action"]], "register_sentry() (hypercoil.loss.entropy.entropy method)": [[186, "hypercoil.loss.entropy.Entropy.register_sentry"]], "register_sentry() (hypercoil.loss.entropy.softmaxentropy method)": [[186, "hypercoil.loss.entropy.SoftmaxEntropy.register_sentry"]], "equilibrium (class in hypercoil.loss.equilibrium)": [[187, "hypercoil.loss.equilibrium.Equilibrium"]], "softmaxequilibrium (class in hypercoil.loss.equilibrium)": [[187, "hypercoil.loss.equilibrium.SoftmaxEquilibrium"]], "forward() (hypercoil.loss.equilibrium.equilibrium method)": [[187, "hypercoil.loss.equilibrium.Equilibrium.forward"]], "forward() (hypercoil.loss.equilibrium.softmaxequilibrium method)": [[187, "hypercoil.loss.equilibrium.SoftmaxEquilibrium.forward"]], "hypercoil.loss.equilibrium": [[187, "module-hypercoil.loss.equilibrium"]], "register_action() (hypercoil.loss.equilibrium.equilibrium method)": [[187, "hypercoil.loss.equilibrium.Equilibrium.register_action"]], "register_action() (hypercoil.loss.equilibrium.softmaxequilibrium method)": [[187, "hypercoil.loss.equilibrium.SoftmaxEquilibrium.register_action"]], "register_sentry() (hypercoil.loss.equilibrium.equilibrium method)": [[187, "hypercoil.loss.equilibrium.Equilibrium.register_sentry"]], "register_sentry() (hypercoil.loss.equilibrium.softmaxequilibrium method)": [[187, "hypercoil.loss.equilibrium.SoftmaxEquilibrium.register_sentry"]], "hingeloss (class in hypercoil.loss.hinge)": [[188, "hypercoil.loss.hinge.HingeLoss"]], "forward() (hypercoil.loss.hinge.hingeloss method)": [[188, "hypercoil.loss.hinge.HingeLoss.forward"]], "register_action() (hypercoil.loss.hinge.hingeloss method)": [[188, "hypercoil.loss.hinge.HingeLoss.register_action"]], "register_sentry() (hypercoil.loss.hinge.hingeloss method)": [[188, "hypercoil.loss.hinge.HingeLoss.register_sentry"]], "jsdivergence (class in hypercoil.loss.jsdiv)": [[189, "hypercoil.loss.jsdiv.JSDivergence"]], "softmaxjsdivergence (class in hypercoil.loss.jsdiv)": [[189, "hypercoil.loss.jsdiv.SoftmaxJSDivergence"]], "forward() (hypercoil.loss.jsdiv.jsdivergence method)": [[189, "hypercoil.loss.jsdiv.JSDivergence.forward"]], "forward() (hypercoil.loss.jsdiv.softmaxjsdivergence method)": [[189, "hypercoil.loss.jsdiv.SoftmaxJSDivergence.forward"]], "hypercoil.loss.jsdiv": [[189, "module-hypercoil.loss.jsdiv"]], "register_action() (hypercoil.loss.jsdiv.jsdivergence method)": [[189, "hypercoil.loss.jsdiv.JSDivergence.register_action"]], "register_action() (hypercoil.loss.jsdiv.softmaxjsdivergence method)": [[189, "hypercoil.loss.jsdiv.SoftmaxJSDivergence.register_action"]], "register_sentry() (hypercoil.loss.jsdiv.jsdivergence method)": [[189, "hypercoil.loss.jsdiv.JSDivergence.register_sentry"]], "register_sentry() (hypercoil.loss.jsdiv.softmaxjsdivergence method)": [[189, "hypercoil.loss.jsdiv.SoftmaxJSDivergence.register_sentry"]], "modularityloss (class in hypercoil.loss.modularity)": [[190, "hypercoil.loss.modularity.ModularityLoss"]], "forward() (hypercoil.loss.modularity.modularityloss method)": [[190, "hypercoil.loss.modularity.ModularityLoss.forward"]], "register_action() (hypercoil.loss.modularity.modularityloss method)": [[190, "hypercoil.loss.modularity.ModularityLoss.register_action"]], "register_sentry() (hypercoil.loss.modularity.modularityloss method)": [[190, "hypercoil.loss.modularity.ModularityLoss.register_sentry"]], "multivariatekurtosis (class in hypercoil.loss.mvkurtosis)": [[191, "hypercoil.loss.mvkurtosis.MultivariateKurtosis"]], "forward() (hypercoil.loss.mvkurtosis.multivariatekurtosis method)": [[191, "hypercoil.loss.mvkurtosis.MultivariateKurtosis.forward"]], "register_action() (hypercoil.loss.mvkurtosis.multivariatekurtosis method)": [[191, "hypercoil.loss.mvkurtosis.MultivariateKurtosis.register_action"]], "register_sentry() (hypercoil.loss.mvkurtosis.multivariatekurtosis method)": [[191, "hypercoil.loss.mvkurtosis.MultivariateKurtosis.register_sentry"]], "constraintviolation (class in hypercoil.loss.norm)": [[192, "hypercoil.loss.norm.ConstraintViolation"]], "forward() (hypercoil.loss.norm.constraintviolation method)": [[192, "hypercoil.loss.norm.ConstraintViolation.forward"]], "register_action() (hypercoil.loss.norm.constraintviolation method)": [[192, "hypercoil.loss.norm.ConstraintViolation.register_action"]], "register_sentry() (hypercoil.loss.norm.constraintviolation method)": [[192, "hypercoil.loss.norm.ConstraintViolation.register_sentry"]], "normedloss (class in hypercoil.loss.norm)": [[193, "hypercoil.loss.norm.NormedLoss"]], "forward() (hypercoil.loss.norm.normedloss method)": [[193, "hypercoil.loss.norm.NormedLoss.forward"]], "register_action() (hypercoil.loss.norm.normedloss method)": [[193, "hypercoil.loss.norm.NormedLoss.register_action"]], "register_sentry() (hypercoil.loss.norm.normedloss method)": [[193, "hypercoil.loss.norm.NormedLoss.register_sentry"]], "unilateralnormedloss (class in hypercoil.loss.norm)": [[194, "hypercoil.loss.norm.UnilateralNormedLoss"]], "forward() (hypercoil.loss.norm.unilateralnormedloss method)": [[194, "hypercoil.loss.norm.UnilateralNormedLoss.forward"]], "register_action() (hypercoil.loss.norm.unilateralnormedloss method)": [[194, "hypercoil.loss.norm.UnilateralNormedLoss.register_action"]], "register_sentry() (hypercoil.loss.norm.unilateralnormedloss method)": [[194, "hypercoil.loss.norm.UnilateralNormedLoss.register_sentry"]], "lossscheme (class in hypercoil.loss.scheme)": [[195, "hypercoil.loss.scheme.LossScheme"]], "forward() (hypercoil.loss.scheme.lossscheme method)": [[195, "hypercoil.loss.scheme.LossScheme.forward"]], "hypercoil.loss.scheme": [[195, "module-hypercoil.loss.scheme"]], "register_action() (hypercoil.loss.scheme.lossscheme method)": [[195, "hypercoil.loss.scheme.LossScheme.register_action"]], "register_sentry() (hypercoil.loss.scheme.lossscheme method)": [[195, "hypercoil.loss.scheme.LossScheme.register_sentry"]], "secondmoment (class in hypercoil.loss.secondmoment)": [[196, "hypercoil.loss.secondmoment.SecondMoment"]], "secondmomentcentred (class in hypercoil.loss.secondmoment)": [[196, "hypercoil.loss.secondmoment.SecondMomentCentred"]], "forward() (hypercoil.loss.secondmoment.secondmoment method)": [[196, "hypercoil.loss.secondmoment.SecondMoment.forward"]], "forward() (hypercoil.loss.secondmoment.secondmomentcentred method)": [[196, "hypercoil.loss.secondmoment.SecondMomentCentred.forward"]], "hypercoil.loss.secondmoment": [[196, "module-hypercoil.loss.secondmoment"]], "register_action() (hypercoil.loss.secondmoment.secondmoment method)": [[196, "hypercoil.loss.secondmoment.SecondMoment.register_action"]], "register_action() (hypercoil.loss.secondmoment.secondmomentcentred method)": [[196, "hypercoil.loss.secondmoment.SecondMomentCentred.register_action"]], "register_sentry() (hypercoil.loss.secondmoment.secondmoment method)": [[196, "hypercoil.loss.secondmoment.SecondMoment.register_sentry"]], "register_sentry() (hypercoil.loss.secondmoment.secondmomentcentred method)": [[196, "hypercoil.loss.secondmoment.SecondMomentCentred.register_sentry"]], "smoothnesspenalty (class in hypercoil.loss.smoothness)": [[197, "hypercoil.loss.smoothness.SmoothnessPenalty"]], "forward() (hypercoil.loss.smoothness.smoothnesspenalty method)": [[197, "hypercoil.loss.smoothness.SmoothnessPenalty.forward"]], "register_action() (hypercoil.loss.smoothness.smoothnesspenalty method)": [[197, "hypercoil.loss.smoothness.SmoothnessPenalty.register_action"]], "register_sentry() (hypercoil.loss.smoothness.smoothnesspenalty method)": [[197, "hypercoil.loss.smoothness.SmoothnessPenalty.register_sentry"]], "symmetricbimodal (class in hypercoil.loss.symbimodal)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodal"]], "symmetricbimodalnorm (class in hypercoil.loss.symbimodal)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodalNorm"]], "forward() (hypercoil.loss.symbimodal.symmetricbimodal method)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodal.forward"]], "forward() (hypercoil.loss.symbimodal.symmetricbimodalnorm method)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodalNorm.forward"]], "hypercoil.loss.symbimodal": [[198, "module-hypercoil.loss.symbimodal"]], "register_action() (hypercoil.loss.symbimodal.symmetricbimodal method)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodal.register_action"]], "register_action() (hypercoil.loss.symbimodal.symmetricbimodalnorm method)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodalNorm.register_action"]], "register_sentry() (hypercoil.loss.symbimodal.symmetricbimodal method)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodal.register_sentry"]], "register_sentry() (hypercoil.loss.symbimodal.symmetricbimodalnorm method)": [[198, "hypercoil.loss.symbimodal.SymmetricBimodalNorm.register_sentry"]], "hypercoil.neuro.synth": [[199, "module-hypercoil.neuro.synth"]], "match_cov_and_spectrum() (in module hypercoil.neuro.synth)": [[200, "hypercoil.neuro.synth.match_cov_and_spectrum"]], "match_covariance() (in module hypercoil.neuro.synth)": [[201, "hypercoil.neuro.synth.match_covariance"]], "match_reference() (in module hypercoil.neuro.synth)": [[202, "hypercoil.neuro.synth.match_reference"]], "match_spectra() (in module hypercoil.neuro.synth)": [[203, "hypercoil.neuro.synth.match_spectra"]], "synthesise_from_cov_and_spectrum() (in module hypercoil.neuro.synth)": [[204, "hypercoil.neuro.synth.synthesise_from_cov_and_spectrum"]], "synthesise_matched() (in module hypercoil.neuro.synth)": [[205, "hypercoil.neuro.synth.synthesise_matched"]], "hypercoil.nn.activation": [[206, "module-hypercoil.nn.activation"]], "correlationnorm (class in hypercoil.nn.activation)": [[207, "hypercoil.nn.activation.CorrelationNorm"]], "hypercoil.nn.atlas": [[208, "module-hypercoil.nn.atlas"]], "atlasaccumuline (class in hypercoil.nn.atlas)": [[209, "hypercoil.nn.atlas.AtlasAccumuline"]], "atlaslinear (class in hypercoil.nn.atlas)": [[210, "hypercoil.nn.atlas.AtlasLinear"]], "hypercoil.nn.cov": [[211, "module-hypercoil.nn.cov"]], "binarycovariance (class in hypercoil.nn.cov)": [[212, "hypercoil.nn.cov.BinaryCovariance"]], "binarycovariancetw (class in hypercoil.nn.cov)": [[213, "hypercoil.nn.cov.BinaryCovarianceTW"]], "binarycovarianceuw (class in hypercoil.nn.cov)": [[214, "hypercoil.nn.cov.BinaryCovarianceUW"]], "unarycovariance (class in hypercoil.nn.cov)": [[215, "hypercoil.nn.cov.UnaryCovariance"]], "unarycovariancetw (class in hypercoil.nn.cov)": [[216, "hypercoil.nn.cov.UnaryCovarianceTW"]], "unarycovarianceuw (class in hypercoil.nn.cov)": [[217, "hypercoil.nn.cov.UnaryCovarianceUW"]], "_cov (class in hypercoil.nn.cov)": [[218, "hypercoil.nn.cov._Cov"]], "frequencydomainfilter (class in hypercoil.nn.freqfilter)": [[219, "hypercoil.nn.freqfilter.FrequencyDomainFilter"]], "iirfiltfilt (class in hypercoil.nn.iirfilter)": [[220, "hypercoil.nn.iirfilter.IIRFiltFilt"]], "iirfilter (class in hypercoil.nn.iirfilter)": [[220, "hypercoil.nn.iirfilter.IIRFilter"]], "hypercoil.nn.iirfilter": [[220, "module-hypercoil.nn.iirfilter"]], "hypercoil.nn.interpolate": [[221, "module-hypercoil.nn.interpolate"]], "hybridinterpolate (class in hypercoil.nn.interpolate)": [[222, "hypercoil.nn.interpolate.HybridInterpolate"]], "spectralinterpolate (class in hypercoil.nn.interpolate)": [[223, "hypercoil.nn.interpolate.SpectralInterpolate"]], "weightedinterpolate (class in hypercoil.nn.interpolate)": [[224, "hypercoil.nn.interpolate.WeightedInterpolate"]], "hypercoil.nn.recombinator": [[225, "module-hypercoil.nn.recombinator"]], "queryencoder() (in module hypercoil.nn.recombinator)": [[226, "hypercoil.nn.recombinator.QueryEncoder"]], "recombinator() (in module hypercoil.nn.recombinator)": [[227, "hypercoil.nn.recombinator.Recombinator"]], "hypercoil.nn.resid.residualise": [[228, "module-hypercoil.nn.resid.Residualise"]], "hypercoil.nn.select": [[229, "module-hypercoil.nn.select"]], "eliminationselector (class in hypercoil.nn.select)": [[230, "hypercoil.nn.select.EliminationSelector"]], "linearcombinationselector (class in hypercoil.nn.select)": [[231, "hypercoil.nn.select.LinearCombinationSelector"]], "responsefunctionlinearselector (class in hypercoil.nn.select)": [[232, "hypercoil.nn.select.ResponseFunctionLinearSelector"]], "hypercoil.nn.semidefinite": [[233, "module-hypercoil.nn.semidefinite"]], "batchtangentproject() (in module hypercoil.nn.semidefinite)": [[234, "hypercoil.nn.semidefinite.BatchTangentProject"]], "tangentproject() (in module hypercoil.nn.semidefinite)": [[235, "hypercoil.nn.semidefinite.TangentProject"]], "spdnoise (class in hypercoil.nn.spdnoise)": [[236, "hypercoil.nn.spdnoise.SPDNoise"]], "svm (class in hypercoil.nn.svm)": [[237, "hypercoil.nn.svm.SVM"]], "hypercoil.nn.sylo": [[238, "module-hypercoil.nn.sylo"]], "sylo (class in hypercoil.nn.sylo)": [[239, "hypercoil.nn.sylo.Sylo"]], "syloresnet() (in module hypercoil.nn.sylo)": [[240, "hypercoil.nn.sylo.SyloResNet"]], "hypercoil.nn.vertcom": [[241, "module-hypercoil.nn.vertcom"]], "verticalcompression() (in module hypercoil.nn.vertcom)": [[242, "hypercoil.nn.vertcom.VerticalCompression"]], "vertical_compression() (in module hypercoil.nn.vertcom)": [[243, "hypercoil.nn.vertcom.vertical_compression"]], "windowamplifier (class in hypercoil.nn.window)": [[244, "hypercoil.nn.window.WindowAmplifier"]], "hypercoil.data": [[245, "module-hypercoil.data"]], "hypercoil.engine": [[247, "module-hypercoil.engine"]], "hypercoil.eval": [[248, "module-hypercoil.eval"]], "hypercoil.functional": [[249, "module-hypercoil.functional"]], "hypercoil.init": [[251, "module-hypercoil.init"]], "hypercoil.loss": [[253, "module-hypercoil.loss"]], "hypercoil.neuro": [[255, "module-hypercoil.neuro"]], "hypercoil.nn": [[256, "module-hypercoil.nn"]]}})